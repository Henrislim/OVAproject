
stepmotor0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028e  00800100  00001ee6  00001f7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ee6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  0080038e  0080038e  00002208  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cf1  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011bc  00000000  00000000  000051cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b15  00000000  00000000  00006389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b4  00000000  00000000  00006ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af4  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019a0  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  000099e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__vector_16>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__vector_18>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	40 07       	cpc	r20, r16
      6a:	47 07       	cpc	r20, r23
      6c:	4f 07       	cpc	r20, r31
      6e:	56 07       	cpc	r21, r22
      70:	5e 07       	cpc	r21, r30
      72:	65 07       	cpc	r22, r21
      74:	6d 07       	cpc	r22, r29
      76:	74 07       	cpc	r23, r20

00000078 <__trampolines_end>:
      78:	4e 41       	sbci	r20, 0x1E	; 30
      7a:	4e 49       	sbci	r20, 0x9E	; 158

0000007b <pstr_inity>:
      7b:	49 4e 49 54 59                                      INITY

00000080 <pstr_inf>:
      80:	49 4e 46                                            INF

00000083 <pwr_m10>:
      83:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      93:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000009b <pwr_p10>:
      9b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ab:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      bb:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      cb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      db:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      eb:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      fb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     10b:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     11b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     12b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     13b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     14b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     15b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     16b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     17b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     18b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     19b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ab:	3d 27 00                                            ='.

000001ae <__ctors_start>:
     1ae:	84 01       	movw	r16, r8
     1b0:	47 06       	cpc	r4, r23
     1b2:	ea 06       	cpc	r14, r26
     1b4:	52 08       	sbc	r5, r2

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	13 e0       	ldi	r17, 0x03	; 3
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	e6 ee       	ldi	r30, 0xE6	; 230
     1ca:	fe e1       	ldi	r31, 0x1E	; 30
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	ae 38       	cpi	r26, 0x8E	; 142
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	ae e8       	ldi	r26, 0x8E	; 142
     1dc:	b3 e0       	ldi	r27, 0x03	; 3
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	a9 3c       	cpi	r26, 0xC9	; 201
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>

000001e8 <__do_global_ctors>:
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	c6 eb       	ldi	r28, 0xB6	; 182
     1ec:	d1 e0       	ldi	r29, 0x01	; 1
     1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <__do_global_ctors+0x10>
     1f0:	22 97       	sbiw	r28, 0x02	; 2
     1f2:	fe 01       	movw	r30, r28
     1f4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__tablejump__>
     1f8:	ce 3a       	cpi	r28, 0xAE	; 174
     1fa:	d1 07       	cpc	r29, r17
     1fc:	c9 f7       	brne	.-14     	; 0x1f0 <__do_global_ctors+0x8>
     1fe:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <main>
     202:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <_ZN4ADC2C1Ev>:

ADC2::ADC2(){
	//Channel ADC0 is chosen
	//MUX3...0 =0000
	//Configure the PORTC0
	DDRC &= !_BV(0);
     20a:	87 b1       	in	r24, 0x07	; 7
     20c:	17 b8       	out	0x07, r1	; 7
	//Enable ADC with prescaller 128 (16000000/128=125000Hz)
	//Required 50K-200KHz
	ADCSRA |= _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	87 68       	ori	r24, 0x87	; 135
     216:	80 83       	st	Z, r24
	//Internal 1.1V Voltage Reference with external capacitor at AREF pin 
	ADMUX |=  _BV(REFS0);//|_BV(REFS1);
     218:	ec e7       	ldi	r30, 0x7C	; 124
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	80 64       	ori	r24, 0x40	; 64
     220:	80 83       	st	Z, r24
     222:	08 95       	ret

00000224 <_ZN7ADS1115C1Ev>:


I2C ADS1115i2c;


ADS1115::ADS1115(){}
     224:	08 95       	ret

00000226 <_ZN7ADS111512init_ADS1115Ev>:

	
void ADS1115::init_ADS1115(){
	
	ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     226:	60 e9       	ldi	r22, 0x90	; 144
     228:	8e e8       	ldi	r24, 0x8E	; 142
     22a:	93 e0       	ldi	r25, 0x03	; 3
     22c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONFIG); // set pointer to Config register
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	8e e8       	ldi	r24, 0x8E	; 142
     234:	93 e0       	ldi	r25, 0x03	; 3
     236:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0>>8)); // write MSB of the Config register
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	8e e8       	ldi	r24, 0x8E	; 142
     23e:	93 e0       	ldi	r25, 0x03	; 3
     240:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0&0xFF)); // write LSB of the Config register
     244:	63 ee       	ldi	r22, 0xE3	; 227
     246:	8e e8       	ldi	r24, 0x8E	; 142
     248:	93 e0       	ldi	r25, 0x03	; 3
     24a:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_stop();
     24e:	8e e8       	ldi	r24, 0x8E	; 142
     250:	93 e0       	ldi	r25, 0x03	; 3
     252:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>
     256:	08 95       	ret

00000258 <_ZN7ADS111511readADS1115Ev>:
	
}

uint16_t ADS1115::readADS1115(){
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
	 
	 int a=ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     25c:	60 e9       	ldi	r22, 0x90	; 144
     25e:	8e e8       	ldi	r24, 0x8E	; 142
     260:	93 e0       	ldi	r25, 0x03	; 3
     262:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	 if (a==1)
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	29 f0       	breq	.+10     	; 0x274 <_ZN7ADS111511readADS1115Ev+0x1c>
	 {
	 }
	 else{
		 ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONVERT); // set pointer to X axis MSB
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	8e e8       	ldi	r24, 0x8E	; 142
     26e:	93 e0       	ldi	r25, 0x03	; 3
     270:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
		 
	 }
	 ADS1115i2c.i2c_stop();
     274:	8e e8       	ldi	r24, 0x8E	; 142
     276:	93 e0       	ldi	r25, 0x03	; 3
     278:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>

	 int b=ADS1115i2c.i2c_start((ADS1115_ADDRESS|0x01));
     27c:	61 e9       	ldi	r22, 0x91	; 145
     27e:	8e e8       	ldi	r24, 0x8E	; 142
     280:	93 e0       	ldi	r25, 0x03	; 3
     282:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	 if (b==1)
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	59 f0       	breq	.+22     	; 0x2a0 <_ZN7ADS111511readADS1115Ev+0x48>
	 {
	 }
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
     28a:	8e e8       	ldi	r24, 0x8E	; 142
     28c:	93 e0       	ldi	r25, 0x03	; 3
     28e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN3I2C12i2c_read_ackEv>
     292:	c8 2f       	mov	r28, r24
		 LSB = ADS1115i2c.i2c_read_ack();
     294:	8e e8       	ldi	r24, 0x8E	; 142
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN3I2C12i2c_read_ackEv>
     29c:	d8 2f       	mov	r29, r24
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN7ADS111511readADS1115Ev+0x4c>
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
	
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
		 LSB = ADS1115i2c.i2c_read_ack();
		 
	 }
	 ADS1115i2c.i2c_stop();
     2a4:	8e e8       	ldi	r24, 0x8E	; 142
     2a6:	93 e0       	ldi	r25, 0x03	; 3
     2a8:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>

	 result =((MSB<<8)|LSB)>>4;
     2ac:	2d 2f       	mov	r18, r29
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	c9 01       	movw	r24, r18
     2b2:	9c 2b       	or	r25, r28
	 return result;
}
     2b4:	95 95       	asr	r25
     2b6:	87 95       	ror	r24
     2b8:	95 95       	asr	r25
     2ba:	87 95       	ror	r24
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	95 95       	asr	r25
     2c2:	87 95       	ror	r24
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <_ZN7ADS111511readVoltageEv>:

double ADS1115::readVoltage(){
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
	init_ADS1115();
     2d0:	0e 94 13 01 	call	0x226	; 0x226 <_ZN7ADS111512init_ADS1115Ev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	89 ef       	ldi	r24, 0xF9	; 249
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	80 40       	sbci	r24, 0x00	; 0
     2de:	90 40       	sbci	r25, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <_ZN7ADS111511readVoltageEv+0x10>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <_ZN7ADS111511readVoltageEv+0x1a>
     2e4:	00 00       	nop
	_delay_ms(20);
	uint16_t readResult= readADS1115();
     2e6:	ce 01       	movw	r24, r28
     2e8:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN7ADS111511readADS1115Ev>
	double voltage = 0.003*readResult;
     2ec:	bc 01       	movw	r22, r24
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 a1 09 	call	0x1342	; 0x1342 <__floatunsisf>
     2f6:	26 ea       	ldi	r18, 0xA6	; 166
     2f8:	3b e9       	ldi	r19, 0x9B	; 155
     2fa:	44 e4       	ldi	r20, 0x44	; 68
     2fc:	5b e3       	ldi	r21, 0x3B	; 59
     2fe:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
	return voltage;
	
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_GLOBAL__sub_I_ADS1115i2c>:
#include <stdlib.h>
#include "ADS1115.h"
#include "i2c.h"


I2C ADS1115i2c;
     308:	8e e8       	ldi	r24, 0x8E	; 142
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN3I2CC1Ev>
     310:	08 95       	ret

00000312 <_ZN7VolTodBC1Ev>:
double static voltagePoint[] ={0,0.801,0.927,1.05,1.175,1.3005,1.425,1.5495,1.6725,1.797,1.9155,2.04,2.166,2.2905,2.42,2.541,2.6655,2.788,2.909,3.03,3.1545,3.279,3.4015,3.526,3.6495,3.7695,3.8895, 4.0};
double static dBPoint[]={0,-1.035,-2.17,-3.25,-4.31,-5.333,-6.26,-7.155,-7.98,-8.725,-9.595,-10.565,-11.58,-12.515,-13.535,-14.54,-15.515,-16.495,-17.415,-18.375,-19.34,-20.325,-21.4,-22.48,-23.585,-24.705,-25.87,-26.5};

double initVolDifference=0;

VolTodB::VolTodB(){};
     312:	08 95       	ret

00000314 <_ZN7VolTodB5getdBEd>:
	
double VolTodB::getdB(double voltage){
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	6a 01       	movw	r12, r20
     326:	7b 01       	movw	r14, r22
     328:	c1 e8       	ldi	r28, 0x81	; 129
     32a:	d1 e0       	ldi	r29, 0x01	; 1
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (voltage>voltagePoint[i]&&voltage<=voltagePoint[i+1])
     330:	69 91       	ld	r22, Y+
     332:	79 91       	ld	r23, Y+
     334:	89 91       	ld	r24, Y+
     336:	99 91       	ld	r25, Y+
     338:	a7 01       	movw	r20, r14
     33a:	96 01       	movw	r18, r12
     33c:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     340:	88 23       	and	r24, r24
     342:	6c f5       	brge	.+90     	; 0x39e <_ZN7VolTodB5getdBEd+0x8a>
     344:	28 81       	ld	r18, Y
     346:	39 81       	ldd	r19, Y+1	; 0x01
     348:	4a 81       	ldd	r20, Y+2	; 0x02
     34a:	5b 81       	ldd	r21, Y+3	; 0x03
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     354:	18 16       	cp	r1, r24
     356:	1c f1       	brlt	.+70     	; 0x39e <_ZN7VolTodB5getdBEd+0x8a>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
     358:	00 0f       	add	r16, r16
     35a:	11 1f       	adc	r17, r17
     35c:	00 0f       	add	r16, r16
     35e:	11 1f       	adc	r17, r17
     360:	e8 01       	movw	r28, r16
     362:	c3 5a       	subi	r28, 0xA3	; 163
     364:	dd 4f       	sbci	r29, 0xFD	; 253
     366:	20 91 8f 03 	lds	r18, 0x038F
     36a:	30 91 90 03 	lds	r19, 0x0390
     36e:	40 91 91 03 	lds	r20, 0x0391
     372:	50 91 92 03 	lds	r21, 0x0392
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	0e 94 9f 08 	call	0x113e	; 0x113e <__subsf3>
     37e:	28 81       	ld	r18, Y
     380:	39 81       	ldd	r19, Y+1	; 0x01
     382:	4a 81       	ldd	r20, Y+2	; 0x02
     384:	5b 81       	ldd	r21, Y+3	; 0x03
     386:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     38a:	f8 01       	movw	r30, r16
     38c:	ef 50       	subi	r30, 0x0F	; 15
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	20 81       	ld	r18, Z
     392:	31 81       	ldd	r19, Z+1	; 0x01
     394:	42 81       	ldd	r20, Z+2	; 0x02
     396:	53 81       	ldd	r21, Z+3	; 0x03
     398:	0e 94 a0 08 	call	0x1140	; 0x1140 <__addsf3>
     39c:	03 c0       	rjmp	.+6      	; 0x3a4 <_ZN7VolTodB5getdBEd+0x90>
VolTodB::VolTodB(){};
	
double VolTodB::getdB(double voltage){
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     39e:	0f 5f       	subi	r16, 0xFF	; 255
     3a0:	1f 4f       	sbci	r17, 0xFF	; 255
     3a2:	c6 cf       	rjmp	.-116    	; 0x330 <_ZN7VolTodB5getdBEd+0x1c>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
		}
	}
	
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	df 90       	pop	r13
     3b2:	cf 90       	pop	r12
     3b4:	08 95       	ret

000003b6 <_ZN7VolTodB14setInitVoltageEd>:

void VolTodB::setInitVoltage(double voltage){
     3b6:	cb 01       	movw	r24, r22
     3b8:	ba 01       	movw	r22, r20
	initVolDifference= voltage-0.687;
     3ba:	2b e3       	ldi	r18, 0x3B	; 59
     3bc:	3f ed       	ldi	r19, 0xDF	; 223
     3be:	4f e2       	ldi	r20, 0x2F	; 47
     3c0:	5f e3       	ldi	r21, 0x3F	; 63
     3c2:	0e 94 9f 08 	call	0x113e	; 0x113e <__subsf3>
     3c6:	60 93 8f 03 	sts	0x038F, r22
     3ca:	70 93 90 03 	sts	0x0390, r23
     3ce:	80 93 91 03 	sts	0x0391, r24
     3d2:	90 93 92 03 	sts	0x0392, r25
     3d6:	08 95       	ret

000003d8 <_ZN7VolTodB10getVoltageEd>:
}

double VolTodB::getVoltage(double dB){
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
     3e8:	9a 01       	movw	r18, r20
     3ea:	ab 01       	movw	r20, r22
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	cb 01       	movw	r24, r22
     3f2:	0e 94 9f 08 	call	0x113e	; 0x113e <__subsf3>
     3f6:	6b 01       	movw	r12, r22
     3f8:	7c 01       	movw	r14, r24
	double voltage=0;
	
	if (inv_dB==0)
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	a9 01       	movw	r20, r18
     400:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     404:	81 11       	cpse	r24, r1
     406:	13 c0       	rjmp	.+38     	; 0x42e <_ZN7VolTodB10getVoltageEd+0x56>
	{
		voltage=((inv_dB-t[0])/k[0]);
     408:	27 e9       	ldi	r18, 0x97	; 151
     40a:	30 e9       	ldi	r19, 0x90	; 144
     40c:	47 ec       	ldi	r20, 0xC7	; 199
     40e:	50 e4       	ldi	r21, 0x40	; 64
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	0e 94 9f 08 	call	0x113e	; 0x113e <__subsf3>
     418:	21 e0       	ldi	r18, 0x01	; 1
     41a:	3d e4       	ldi	r19, 0x4D	; 77
     41c:	41 e1       	ldi	r20, 0x11	; 17
     41e:	51 ec       	ldi	r21, 0xC1	; 193
     420:	0e 94 08 09 	call	0x1210	; 0x1210 <__divsf3>
     424:	56 2f       	mov	r21, r22
     426:	47 2f       	mov	r20, r23
     428:	38 2f       	mov	r19, r24
     42a:	29 2f       	mov	r18, r25
     42c:	38 c0       	rjmp	.+112    	; 0x49e <_ZN7VolTodB10getVoltageEd+0xc6>
     42e:	c1 e1       	ldi	r28, 0x11	; 17
     430:	d1 e0       	ldi	r29, 0x01	; 1
double VolTodB::getVoltage(double dB){
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
	double voltage=0;
	
	if (inv_dB==0)
     432:	00 e0       	ldi	r16, 0x00	; 0
     434:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	else{
	for (int i=0;i<size-1;i++)
	{
		if (inv_dB<dBPoint[i]&&inv_dB>=dBPoint[i+1])
     436:	29 91       	ld	r18, Y+
     438:	39 91       	ld	r19, Y+
     43a:	49 91       	ld	r20, Y+
     43c:	59 91       	ld	r21, Y+
     43e:	c7 01       	movw	r24, r14
     440:	b6 01       	movw	r22, r12
     442:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     446:	88 23       	and	r24, r24
     448:	3c f5       	brge	.+78     	; 0x498 <_ZN7VolTodB10getVoltageEd+0xc0>
     44a:	28 81       	ld	r18, Y
     44c:	39 81       	ldd	r19, Y+1	; 0x01
     44e:	4a 81       	ldd	r20, Y+2	; 0x02
     450:	5b 81       	ldd	r21, Y+3	; 0x03
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__gesf2>
     45a:	88 23       	and	r24, r24
     45c:	ec f0       	brlt	.+58     	; 0x498 <_ZN7VolTodB10getVoltageEd+0xc0>
		{
			voltage= ((inv_dB-t[i])/k[i]);
     45e:	00 0f       	add	r16, r16
     460:	11 1f       	adc	r17, r17
     462:	00 0f       	add	r16, r16
     464:	11 1f       	adc	r17, r17
     466:	f8 01       	movw	r30, r16
     468:	ef 50       	subi	r30, 0x0F	; 15
     46a:	fe 4f       	sbci	r31, 0xFE	; 254
     46c:	20 81       	ld	r18, Z
     46e:	31 81       	ldd	r19, Z+1	; 0x01
     470:	42 81       	ldd	r20, Z+2	; 0x02
     472:	53 81       	ldd	r21, Z+3	; 0x03
     474:	c7 01       	movw	r24, r14
     476:	b6 01       	movw	r22, r12
     478:	0e 94 9f 08 	call	0x113e	; 0x113e <__subsf3>
     47c:	f8 01       	movw	r30, r16
     47e:	e3 5a       	subi	r30, 0xA3	; 163
     480:	fd 4f       	sbci	r31, 0xFD	; 253
     482:	20 81       	ld	r18, Z
     484:	31 81       	ldd	r19, Z+1	; 0x01
     486:	42 81       	ldd	r20, Z+2	; 0x02
     488:	53 81       	ldd	r21, Z+3	; 0x03
     48a:	0e 94 08 09 	call	0x1210	; 0x1210 <__divsf3>
			return voltage;
     48e:	56 2f       	mov	r21, r22
     490:	47 2f       	mov	r20, r23
     492:	38 2f       	mov	r19, r24
     494:	29 2f       	mov	r18, r25
     496:	03 c0       	rjmp	.+6      	; 0x49e <_ZN7VolTodB10getVoltageEd+0xc6>
	{
		voltage=((inv_dB-t[0])/k[0]);
	}
	
	else{
	for (int i=0;i<size-1;i++)
     498:	0f 5f       	subi	r16, 0xFF	; 255
     49a:	1f 4f       	sbci	r17, 0xFF	; 255
     49c:	cc cf       	rjmp	.-104    	; 0x436 <_ZN7VolTodB10getVoltageEd+0x5e>
		}
	}
	}
	return voltage;
	
}
     49e:	65 2f       	mov	r22, r21
     4a0:	74 2f       	mov	r23, r20
     4a2:	83 2f       	mov	r24, r19
     4a4:	92 2f       	mov	r25, r18
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	08 95       	ret

000004b8 <_ZN3I2CC1Ev>:

I2C::I2C(){ i2c_init();}
	
void I2C::i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     4b8:	88 e4       	ldi	r24, 0x48	; 72
     4ba:	80 93 b8 00 	sts	0x00B8, r24
     4be:	08 95       	ret

000004c0 <_ZN3I2C9i2c_startEh>:
}

uint8_t I2C::i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     4c0:	ec eb       	ldi	r30, 0xBC	; 188
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     4c6:	84 ea       	ldi	r24, 0xA4	; 164
     4c8:	80 83       	st	Z, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4ca:	80 81       	ld	r24, Z
     4cc:	88 23       	and	r24, r24
     4ce:	ec f7       	brge	.-6      	; 0x4ca <_ZN3I2C9i2c_startEh+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     4d0:	80 91 b9 00 	lds	r24, 0x00B9
     4d4:	88 7f       	andi	r24, 0xF8	; 248
     4d6:	88 30       	cpi	r24, 0x08	; 8
     4d8:	a1 f4       	brne	.+40     	; 0x502 <_ZN3I2C9i2c_startEh+0x42>
	
	// load slave address into data register
	TWDR = address;
     4da:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     4de:	84 e8       	ldi	r24, 0x84	; 132
     4e0:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4e4:	ec eb       	ldi	r30, 0xBC	; 188
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	88 23       	and	r24, r24
     4ec:	ec f7       	brge	.-6      	; 0x4e8 <_ZN3I2C9i2c_startEh+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     4ee:	90 91 b9 00 	lds	r25, 0x00B9
     4f2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     4f4:	98 31       	cpi	r25, 0x18	; 24
     4f6:	39 f0       	breq	.+14     	; 0x506 <_ZN3I2C9i2c_startEh+0x46>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 34       	cpi	r25, 0x40	; 64
     4fc:	29 f4       	brne	.+10     	; 0x508 <_ZN3I2C9i2c_startEh+0x48>
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     506:	80 e0       	ldi	r24, 0x00	; 0
}
     508:	08 95       	ret

0000050a <_ZN3I2C9i2c_writeEh>:

uint8_t I2C::i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     50a:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     50e:	84 e8       	ldi	r24, 0x84	; 132
     510:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     514:	ec eb       	ldi	r30, 0xBC	; 188
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	88 23       	and	r24, r24
     51c:	ec f7       	brge	.-6      	; 0x518 <_ZN3I2C9i2c_writeEh+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     51e:	90 91 b9 00 	lds	r25, 0x00B9
     522:	98 7f       	andi	r25, 0xF8	; 248
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	98 32       	cpi	r25, 0x28	; 40
     528:	09 f4       	brne	.+2      	; 0x52c <_ZN3I2C9i2c_writeEh+0x22>
     52a:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     52c:	08 95       	ret

0000052e <_ZN3I2C12i2c_read_ackEv>:

uint8_t I2C::i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     52e:	84 ec       	ldi	r24, 0xC4	; 196
     530:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     534:	ec eb       	ldi	r30, 0xBC	; 188
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 23       	and	r24, r24
     53c:	ec f7       	brge	.-6      	; 0x538 <_ZN3I2C12i2c_read_ackEv+0xa>
	// return received data from TWDR
	return TWDR;
     53e:	80 91 bb 00 	lds	r24, 0x00BB
}
     542:	08 95       	ret

00000544 <_ZN3I2C8i2c_stopEv>:
}

void I2C::i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     544:	84 e9       	ldi	r24, 0x94	; 148
     546:	80 93 bc 00 	sts	0x00BC, r24
     54a:	08 95       	ret

0000054c <_ZN4MenuC1Ev>:
bool modelR=false;
bool modelT=false;


	
Menu::Menu(){
     54c:	0e 94 57 08 	call	0x10ae	; 0x10ae <_ZN8UARTtoolC1Ev>
     550:	08 95       	ret

00000552 <_Z9replyListi>:
	

	
	
}
void replyList(int index){
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	a8 97       	sbiw	r28, 0x28	; 40
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
	
	
		if (index==1)
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	91 05       	cpc	r25, r1
     56a:	89 f4       	brne	.+34     	; 0x58e <_Z9replyListi+0x3c>
		{
			char testmsg1[]="Mode A: W + or S -";
     56c:	83 e1       	ldi	r24, 0x13	; 19
     56e:	e9 ec       	ldi	r30, 0xC9	; 201
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	de 01       	movw	r26, r28
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	01 90       	ld	r0, Z+
     578:	0d 92       	st	X+, r0
     57a:	8a 95       	dec	r24
     57c:	e1 f7       	brne	.-8      	; 0x576 <_Z9replyListi+0x24>
			myUART.uart_transmit_string(testmsg1);
     57e:	be 01       	movw	r22, r28
     580:	6f 5f       	subi	r22, 0xFF	; 255
     582:	7f 4f       	sbci	r23, 0xFF	; 255
     584:	86 ea       	ldi	r24, 0xA6	; 166
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
     58c:	3a c0       	rjmp	.+116    	; 0x602 <_Z9replyListi+0xb0>
		}
		else if (index==2)
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	91 05       	cpc	r25, r1
     592:	89 f4       	brne	.+34     	; 0x5b6 <_Z9replyListi+0x64>
		{
			char testmsg2[]="Mode B: Input target voltage: 0.80-4.20";
     594:	88 e2       	ldi	r24, 0x28	; 40
     596:	ec ed       	ldi	r30, 0xDC	; 220
     598:	f2 e0       	ldi	r31, 0x02	; 2
     59a:	de 01       	movw	r26, r28
     59c:	11 96       	adiw	r26, 0x01	; 1
     59e:	01 90       	ld	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	8a 95       	dec	r24
     5a4:	e1 f7       	brne	.-8      	; 0x59e <_Z9replyListi+0x4c>
			myUART.uart_transmit_string(testmsg2);
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	86 ea       	ldi	r24, 0xA6	; 166
     5ae:	93 e0       	ldi	r25, 0x03	; 3
     5b0:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
     5b4:	26 c0       	rjmp	.+76     	; 0x602 <_Z9replyListi+0xb0>
		}
		
		else if (index==3)
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	91 05       	cpc	r25, r1
     5ba:	89 f4       	brne	.+34     	; 0x5de <_Z9replyListi+0x8c>
		{
			char testmsg3[]="Reset to 0 dB";
     5bc:	8e e0       	ldi	r24, 0x0E	; 14
     5be:	e4 e0       	ldi	r30, 0x04	; 4
     5c0:	f3 e0       	ldi	r31, 0x03	; 3
     5c2:	de 01       	movw	r26, r28
     5c4:	11 96       	adiw	r26, 0x01	; 1
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	8a 95       	dec	r24
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <_Z9replyListi+0x74>
			myUART.uart_transmit_string(testmsg3);
     5ce:	be 01       	movw	r22, r28
     5d0:	6f 5f       	subi	r22, 0xFF	; 255
     5d2:	7f 4f       	sbci	r23, 0xFF	; 255
     5d4:	86 ea       	ldi	r24, 0xA6	; 166
     5d6:	93 e0       	ldi	r25, 0x03	; 3
     5d8:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
     5dc:	12 c0       	rjmp	.+36     	; 0x602 <_Z9replyListi+0xb0>
		}
		
		else if (index==4)
     5de:	04 97       	sbiw	r24, 0x04	; 4
     5e0:	81 f4       	brne	.+32     	; 0x602 <_Z9replyListi+0xb0>
		{
			char testmsg4[]="Input target dB: 0.0-(-28.5)";
     5e2:	8d e1       	ldi	r24, 0x1D	; 29
     5e4:	e2 e1       	ldi	r30, 0x12	; 18
     5e6:	f3 e0       	ldi	r31, 0x03	; 3
     5e8:	de 01       	movw	r26, r28
     5ea:	11 96       	adiw	r26, 0x01	; 1
     5ec:	01 90       	ld	r0, Z+
     5ee:	0d 92       	st	X+, r0
     5f0:	8a 95       	dec	r24
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <_Z9replyListi+0x9a>
			myUART.uart_transmit_string(testmsg4);
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	86 ea       	ldi	r24, 0xA6	; 166
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
		}
		
}
     602:	a8 96       	adiw	r28, 0x28	; 40
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <_Z9menuStartv>:


void menuStart(){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	c3 55       	subi	r28, 0x53	; 83
     61e:	d1 09       	sbc	r29, r1
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
			char msg1[]="Welcome";
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	ef e2       	ldi	r30, 0x2F	; 47
     62e:	f3 e0       	ldi	r31, 0x03	; 3
     630:	de 01       	movw	r26, r28
     632:	a4 5b       	subi	r26, 0xB4	; 180
     634:	bf 4f       	sbci	r27, 0xFF	; 255
     636:	01 90       	ld	r0, Z+
     638:	0d 92       	st	X+, r0
     63a:	8a 95       	dec	r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <_Z9menuStartv+0x22>
			char msg2[]="========= Menu =========";
     63e:	89 e1       	ldi	r24, 0x19	; 25
     640:	e7 e3       	ldi	r30, 0x37	; 55
     642:	f3 e0       	ldi	r31, 0x03	; 3
     644:	de 01       	movw	r26, r28
     646:	5d 96       	adiw	r26, 0x1d	; 29
     648:	01 90       	ld	r0, Z+
     64a:	0d 92       	st	X+, r0
     64c:	8a 95       	dec	r24
     64e:	e1 f7       	brne	.-8      	; 0x648 <_Z9menuStartv+0x34>
			char msg3[]="A. Step by step: W+ and S-.";
     650:	8c e1       	ldi	r24, 0x1C	; 28
     652:	e0 e5       	ldi	r30, 0x50	; 80
     654:	f3 e0       	ldi	r31, 0x03	; 3
     656:	de 01       	movw	r26, r28
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	01 90       	ld	r0, Z+
     65c:	0d 92       	st	X+, r0
     65e:	8a 95       	dec	r24
     660:	e1 f7       	brne	.-8      	; 0x65a <_Z9menuStartv+0x46>
			char msg4[]="R. Reset";
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	ec e6       	ldi	r30, 0x6C	; 108
     666:	f3 e0       	ldi	r31, 0x03	; 3
     668:	de 01       	movw	r26, r28
     66a:	ad 5b       	subi	r26, 0xBD	; 189
     66c:	bf 4f       	sbci	r27, 0xFF	; 255
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	8a 95       	dec	r24
     674:	e1 f7       	brne	.-8      	; 0x66e <_Z9menuStartv+0x5a>
			char msg5[]="T. Target dB";
     676:	8d e0       	ldi	r24, 0x0D	; 13
     678:	e5 e7       	ldi	r30, 0x75	; 117
     67a:	f3 e0       	ldi	r31, 0x03	; 3
     67c:	de 01       	movw	r26, r28
     67e:	d6 96       	adiw	r26, 0x36	; 54
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <_Z9menuStartv+0x6c>
			
			myUART.uart_transmit_string(msg1);
     688:	be 01       	movw	r22, r28
     68a:	64 5b       	subi	r22, 0xB4	; 180
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	86 ea       	ldi	r24, 0xA6	; 166
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg2);
     696:	be 01       	movw	r22, r28
     698:	63 5e       	subi	r22, 0xE3	; 227
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	86 ea       	ldi	r24, 0xA6	; 166
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg3);
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5f       	subi	r22, 0xFF	; 255
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	86 ea       	ldi	r24, 0xA6	; 166
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg4);
     6b2:	be 01       	movw	r22, r28
     6b4:	6d 5b       	subi	r22, 0xBD	; 189
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	86 ea       	ldi	r24, 0xA6	; 166
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg5);
     6c0:	be 01       	movw	r22, r28
     6c2:	6a 5c       	subi	r22, 0xCA	; 202
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	86 ea       	ldi	r24, 0xA6	; 166
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
		
}
     6ce:	cd 5a       	subi	r28, 0xAD	; 173
     6d0:	df 4f       	sbci	r29, 0xFF	; 255
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <_Z14moveUpDownLitei>:
	
}

void moveUpDownLite(int stepdown){
	
	myStepper.step(stepdown);
     6e2:	bc 01       	movw	r22, r24
     6e4:	87 ea       	ldi	r24, 0xA7	; 167
     6e6:	93 e0       	ldi	r25, 0x03	; 3
     6e8:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN7Stepper4stepEi>
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	89 e6       	ldi	r24, 0x69	; 105
     6f0:	98 e1       	ldi	r25, 0x18	; 24
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	90 40       	sbci	r25, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <_Z14moveUpDownLitei+0x10>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <_Z14moveUpDownLitei+0x1a>
     6fc:	00 00       	nop
	_delay_ms(500);
	myStepper.motorOff();
     6fe:	87 ea       	ldi	r24, 0xA7	; 167
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN7Stepper8motorOffEv>
     706:	08 95       	ret

00000708 <_Z11stepperStopv>:
}

void stepperStop(){
	myStepper.motorOff();
     708:	87 ea       	ldi	r24, 0xA7	; 167
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN7Stepper8motorOffEv>
     710:	08 95       	ret

00000712 <_ZN4Menu9MenuStartEv>:
Menu::Menu(){
	
}

void Menu::MenuStart(){
		menuStart();
     712:	0e 94 0a 03 	call	0x614	; 0x614 <_Z9menuStartv>
		myStepper.setSpeed(4);//Set the speed of the stepper
     716:	44 e0       	ldi	r20, 0x04	; 4
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	87 ea       	ldi	r24, 0xA7	; 167
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN7Stepper8setSpeedEl>
		stepperStop();
     726:	0e 94 84 03 	call	0x708	; 0x708 <_Z11stepperStopv>
     72a:	08 95       	ret

0000072c <_Z11readVoltagev>:
void stepperStop(){
	myStepper.motorOff();
}


double readVoltage(){
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	2d 97       	sbiw	r28, 0x0d	; 13
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	00 e1       	ldi	r16, 0x10	; 16
     74e:	10 e0       	ldi	r17, 0x00	; 0
	
	double voltage=0;
	double voltageSum=0;
     750:	c1 2c       	mov	r12, r1
     752:	d1 2c       	mov	r13, r1
     754:	76 01       	movw	r14, r12
	for (int i=0;i<16;i++)
	{
		 voltage= myADS1115.readVoltage();
     756:	84 ea       	ldi	r24, 0xA4	; 164
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN7ADS111511readVoltageEv>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
		 voltageSum=voltageSum+voltage;
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	0e 94 a0 08 	call	0x1140	; 0x1140 <__addsf3>
     76a:	6b 01       	movw	r12, r22
     76c:	7c 01       	movw	r14, r24
     76e:	01 50       	subi	r16, 0x01	; 1
     770:	11 09       	sbc	r17, r1

double readVoltage(){
	
	double voltage=0;
	double voltageSum=0;
	for (int i=0;i<16;i++)
     772:	01 15       	cp	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	79 f7       	brne	.-34     	; 0x756 <_Z11readVoltagev+0x2a>
	{
		 voltage= myADS1115.readVoltage();
		 voltageSum=voltageSum+voltage;
	}
	voltage = voltageSum/16;
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5d e3       	ldi	r21, 0x3D	; 61
     780:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
	char buffer0[10];
	//Convert double to stringw
	dtostrf(voltage, 6, 3, buffer0);
     788:	8e 01       	movw	r16, r28
     78a:	0f 5f       	subi	r16, 0xFF	; 255
     78c:	1f 4f       	sbci	r17, 0xFF	; 255
     78e:	23 e0       	ldi	r18, 0x03	; 3
     790:	46 e0       	ldi	r20, 0x06	; 6
     792:	0e 94 1f 0b 	call	0x163e	; 0x163e <dtostrf>
	//dtostrf(voltagePot,4,2,buffer1);
	myUART.uart_transmit_string(wiperv_msg);
     796:	68 e0       	ldi	r22, 0x08	; 8
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	86 ea       	ldi	r24, 0xA6	; 166
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     7a2:	b8 01       	movw	r22, r16
     7a4:	86 ea       	ldi	r24, 0xA6	; 166
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
	
	//get dB
	double dB = myVolTodB.getdB(voltage);
     7ac:	b7 01       	movw	r22, r14
     7ae:	a6 01       	movw	r20, r12
     7b0:	83 ea       	ldi	r24, 0xA3	; 163
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN7VolTodB5getdBEd>
	dtostrf(dB, 6, 3, buffer0);
     7b8:	23 e0       	ldi	r18, 0x03	; 3
     7ba:	46 e0       	ldi	r20, 0x06	; 6
     7bc:	0e 94 1f 0b 	call	0x163e	; 0x163e <dtostrf>
	char temp_msg[]="dB";
     7c0:	84 e6       	ldi	r24, 0x64	; 100
     7c2:	92 e4       	ldi	r25, 0x42	; 66
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	8b 87       	std	Y+11, r24	; 0x0b
     7c8:	9c 87       	std	Y+12, r25	; 0x0c
     7ca:	ad 87       	std	Y+13, r26	; 0x0d
	myUART.uart_transmit_string(temp_msg);
     7cc:	be 01       	movw	r22, r28
     7ce:	65 5f       	subi	r22, 0xF5	; 245
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	86 ea       	ldi	r24, 0xA6	; 166
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     7da:	b8 01       	movw	r22, r16
     7dc:	86 ea       	ldi	r24, 0xA6	; 166
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
	
	return voltage;
}
     7e4:	c7 01       	movw	r24, r14
     7e6:	b6 01       	movw	r22, r12
     7e8:	2d 96       	adiw	r28, 0x0d	; 13
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	08 95       	ret

00000806 <_Z10moveUpDowni>:
		
}

void moveUpDown(int stepup){
	
	myStepper.step(stepup);
     806:	bc 01       	movw	r22, r24
     808:	87 ea       	ldi	r24, 0xA7	; 167
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN7Stepper4stepEi>
     810:	2f ef       	ldi	r18, 0xFF	; 255
     812:	83 ec       	ldi	r24, 0xC3	; 195
     814:	99 e0       	ldi	r25, 0x09	; 9
     816:	21 50       	subi	r18, 0x01	; 1
     818:	80 40       	sbci	r24, 0x00	; 0
     81a:	90 40       	sbci	r25, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <_Z10moveUpDowni+0x10>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <_Z10moveUpDowni+0x1a>
     820:	00 00       	nop
	_delay_ms(200);
	myStepper.motorOff();
     822:	87 ea       	ldi	r24, 0xA7	; 167
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN7Stepper8motorOffEv>
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	83 ed       	ldi	r24, 0xD3	; 211
     82e:	90 e3       	ldi	r25, 0x30	; 48
     830:	21 50       	subi	r18, 0x01	; 1
     832:	80 40       	sbci	r24, 0x00	; 0
     834:	90 40       	sbci	r25, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <_Z10moveUpDowni+0x2a>
     838:	00 c0       	rjmp	.+0      	; 0x83a <_Z10moveUpDowni+0x34>
     83a:	00 00       	nop
	_delay_ms(1000);
	readVoltage();
     83c:	0e 94 96 03 	call	0x72c	; 0x72c <_Z11readVoltagev>
     840:	08 95       	ret

00000842 <_Z15readVoltageLitev>:
}

double readVoltageLite(){
	
	double voltage=0;
	voltage= myADS1115.readVoltage();
     842:	84 ea       	ldi	r24, 0xA4	; 164
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN7ADS111511readVoltageEv>
	return voltage;
}
     84a:	08 95       	ret

0000084c <_Z5resetv>:

void reset(){
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	2c 97       	sbiw	r28, 0x0c	; 12
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
	    double presentVol= readVoltageLite();
     868:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
		double downLimit= 0.7;
		double upperLimit=4.0;
		
		//Move with big steps
		if (presentVol>downLimit)
     870:	23 e3       	ldi	r18, 0x33	; 51
     872:	33 e3       	ldi	r19, 0x33	; 51
     874:	43 e3       	ldi	r20, 0x33	; 51
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__gesf2>
     87c:	18 16       	cp	r1, r24
     87e:	64 f5       	brge	.+88     	; 0x8d8 <_Z5resetv+0x8c>
		{
			int tempStep= ((presentVol-0.7)/0.026)*STEP_TO_DOWN;
     880:	23 e3       	ldi	r18, 0x33	; 51
     882:	33 e3       	ldi	r19, 0x33	; 51
     884:	43 e3       	ldi	r20, 0x33	; 51
     886:	5f e3       	ldi	r21, 0x3F	; 63
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	0e 94 9f 08 	call	0x113e	; 0x113e <__subsf3>
     890:	24 ef       	ldi	r18, 0xF4	; 244
     892:	3d ef       	ldi	r19, 0xFD	; 253
     894:	44 ed       	ldi	r20, 0xD4	; 212
     896:	5c e3       	ldi	r21, 0x3C	; 60
     898:	0e 94 08 09 	call	0x1210	; 0x1210 <__divsf3>
     89c:	6b 01       	movw	r12, r22
     89e:	7c 01       	movw	r14, r24
     8a0:	60 91 00 01 	lds	r22, 0x0100
     8a4:	70 91 01 01 	lds	r23, 0x0101
     8a8:	88 27       	eor	r24, r24
     8aa:	77 fd       	sbrc	r23, 7
     8ac:	80 95       	com	r24
     8ae:	98 2f       	mov	r25, r24
     8b0:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     8c0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fixsfsi>
			moveUpDownLite(tempStep);
     8c4:	cb 01       	movw	r24, r22
     8c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <_Z5resetv+0x8c>
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
		{
			moveUpDownLite(STEP_TO_DOWN_4);
     8cc:	80 91 04 01 	lds	r24, 0x0104
     8d0:	90 91 05 01 	lds	r25, 0x0105
     8d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
			int tempStep= ((presentVol-0.7)/0.026)*STEP_TO_DOWN;
			moveUpDownLite(tempStep);
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
     8d8:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     8dc:	23 e3       	ldi	r18, 0x33	; 51
     8de:	33 e3       	ldi	r19, 0x33	; 51
     8e0:	43 e3       	ldi	r20, 0x33	; 51
     8e2:	5f e3       	ldi	r21, 0x3F	; 63
     8e4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__gesf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	84 f3       	brlt	.-32     	; 0x8cc <_Z5resetv+0x80>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
		}
		
		double initVolt=readVoltageLite();
     8ec:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     8f0:	ab 01       	movw	r20, r22
     8f2:	bc 01       	movw	r22, r24
		myVolTodB.setInitVoltage(initVolt);
     8f4:	83 ea       	ldi	r24, 0xA3	; 163
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7VolTodB14setInitVoltageEd>
		
		//Finish reset
		char msg[]="Reset down!";
     8fc:	8c e0       	ldi	r24, 0x0C	; 12
     8fe:	e2 e8       	ldi	r30, 0x82	; 130
     900:	f3 e0       	ldi	r31, 0x03	; 3
     902:	de 01       	movw	r26, r28
     904:	11 96       	adiw	r26, 0x01	; 1
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	8a 95       	dec	r24
     90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0x7>
		readVoltage();
     90e:	0e 94 96 03 	call	0x72c	; 0x72c <_Z11readVoltagev>
		myUART.uart_transmit_string(msg);
     912:	be 01       	movw	r22, r28
     914:	6f 5f       	subi	r22, 0xFF	; 255
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	86 ea       	ldi	r24, 0xA6	; 166
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
}
     920:	2c 96       	adiw	r28, 0x0c	; 12
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	08 95       	ret

0000093a <_Z13goToTargetVold>:

void goToTargetVol(double targetVoltage){
     93a:	8f 92       	push	r8
     93c:	9f 92       	push	r9
     93e:	af 92       	push	r10
     940:	bf 92       	push	r11
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	6b 01       	movw	r12, r22
     94c:	7c 01       	movw	r14, r24
	double presentVoltage= readVoltageLite();
     94e:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     952:	4b 01       	movw	r8, r22
     954:	5c 01       	movw	r10, r24
	if (targetVoltage<0.6||targetVoltage>29)
     956:	2a e9       	ldi	r18, 0x9A	; 154
     958:	39 e9       	ldi	r19, 0x99	; 153
     95a:	49 e1       	ldi	r20, 0x19	; 25
     95c:	5f e3       	ldi	r21, 0x3F	; 63
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     966:	88 23       	and	r24, r24
     968:	0c f4       	brge	.+2      	; 0x96c <_Z13goToTargetVold+0x32>
     96a:	7c c0       	rjmp	.+248    	; 0xa64 <_Z13goToTargetVold+0x12a>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	48 ee       	ldi	r20, 0xE8	; 232
     972:	51 e4       	ldi	r21, 0x41	; 65
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__gesf2>
     97c:	18 16       	cp	r1, r24
     97e:	0c f4       	brge	.+2      	; 0x982 <_Z13goToTargetVold+0x48>
     980:	71 c0       	rjmp	.+226    	; 0xa64 <_Z13goToTargetVold+0x12a>
	{
	}
	else{
	if (targetVoltage>presentVoltage)
     982:	a7 01       	movw	r20, r14
     984:	96 01       	movw	r18, r12
     986:	c5 01       	movw	r24, r10
     988:	b4 01       	movw	r22, r8
     98a:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     98e:	88 23       	and	r24, r24
     990:	ac f5       	brge	.+106    	; 0x9fc <_Z13goToTargetVold+0xc2>
	{
		int tempStep= ((targetVoltage-presentVoltage)/0.026)*STEP_TO_UP;
     992:	a5 01       	movw	r20, r10
     994:	94 01       	movw	r18, r8
     996:	c7 01       	movw	r24, r14
     998:	b6 01       	movw	r22, r12
     99a:	0e 94 9f 08 	call	0x113e	; 0x113e <__subsf3>
     99e:	24 ef       	ldi	r18, 0xF4	; 244
     9a0:	3d ef       	ldi	r19, 0xFD	; 253
     9a2:	44 ed       	ldi	r20, 0xD4	; 212
     9a4:	5c e3       	ldi	r21, 0x3C	; 60
     9a6:	0e 94 08 09 	call	0x1210	; 0x1210 <__divsf3>
     9aa:	4b 01       	movw	r8, r22
     9ac:	5c 01       	movw	r10, r24
     9ae:	60 91 02 01 	lds	r22, 0x0102
     9b2:	70 91 03 01 	lds	r23, 0x0103
     9b6:	88 27       	eor	r24, r24
     9b8:	77 fd       	sbrc	r23, 7
     9ba:	80 95       	com	r24
     9bc:	98 2f       	mov	r25, r24
     9be:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	c5 01       	movw	r24, r10
     9c8:	b4 01       	movw	r22, r8
     9ca:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     9ce:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fixsfsi>
		moveUpDownLite(tempStep);
     9d2:	cb 01       	movw	r24, r22
     9d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
		
		while (readVoltageLite()<(targetVoltage))
     9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <_Z13goToTargetVold+0xac>
		{
			moveUpDownLite(STEP_TO_UP_4);
     9da:	80 91 06 01 	lds	r24, 0x0106
     9de:	90 91 07 01 	lds	r25, 0x0107
     9e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
	if (targetVoltage>presentVoltage)
	{
		int tempStep= ((targetVoltage-presentVoltage)/0.026)*STEP_TO_UP;
		moveUpDownLite(tempStep);
		
		while (readVoltageLite()<(targetVoltage))
     9e6:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__gesf2>
     9f6:	18 16       	cp	r1, r24
     9f8:	84 f3       	brlt	.-32     	; 0x9da <_Z13goToTargetVold+0xa0>
     9fa:	34 c0       	rjmp	.+104    	; 0xa64 <_Z13goToTargetVold+0x12a>
		}
		
		
	}
	else{
		int tempStep= ((presentVoltage-targetVoltage)/0.026)*STEP_TO_DOWN;
     9fc:	a7 01       	movw	r20, r14
     9fe:	96 01       	movw	r18, r12
     a00:	c5 01       	movw	r24, r10
     a02:	b4 01       	movw	r22, r8
     a04:	0e 94 9f 08 	call	0x113e	; 0x113e <__subsf3>
     a08:	24 ef       	ldi	r18, 0xF4	; 244
     a0a:	3d ef       	ldi	r19, 0xFD	; 253
     a0c:	44 ed       	ldi	r20, 0xD4	; 212
     a0e:	5c e3       	ldi	r21, 0x3C	; 60
     a10:	0e 94 08 09 	call	0x1210	; 0x1210 <__divsf3>
     a14:	4b 01       	movw	r8, r22
     a16:	5c 01       	movw	r10, r24
     a18:	60 91 00 01 	lds	r22, 0x0100
     a1c:	70 91 01 01 	lds	r23, 0x0101
     a20:	88 27       	eor	r24, r24
     a22:	77 fd       	sbrc	r23, 7
     a24:	80 95       	com	r24
     a26:	98 2f       	mov	r25, r24
     a28:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	c5 01       	movw	r24, r10
     a32:	b4 01       	movw	r22, r8
     a34:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     a38:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fixsfsi>
		moveUpDownLite(tempStep);
     a3c:	cb 01       	movw	r24, r22
     a3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
		
		while (readVoltageLite()>(targetVoltage))
     a42:	06 c0       	rjmp	.+12     	; 0xa50 <_Z13goToTargetVold+0x116>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
     a44:	80 91 04 01 	lds	r24, 0x0104
     a48:	90 91 05 01 	lds	r25, 0x0105
     a4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
	}
	else{
		int tempStep= ((presentVoltage-targetVoltage)/0.026)*STEP_TO_DOWN;
		moveUpDownLite(tempStep);
		
		while (readVoltageLite()>(targetVoltage))
     a50:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     a60:	88 23       	and	r24, r24
     a62:	84 f3       	brlt	.-32     	; 0xa44 <_Z13goToTargetVold+0x10a>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
		}
	}
	}
	readVoltage();
     a64:	0e 94 96 03 	call	0x72c	; 0x72c <_Z11readVoltagev>
}
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	08 95       	ret

00000a7a <__vector_18>:
		stepperStop();
}



ISR (USART_RX_vect){
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	2a 97       	sbiw	r28, 0x0a	; 10
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	cd bf       	out	0x3d, r28	; 61
	char userInput = UDR0;
     ab6:	e6 ec       	ldi	r30, 0xC6	; 198
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	20 81       	ld	r18, Z
	UDR0=userInput; // echo back
     abc:	20 83       	st	Z, r18
	
	if (userInput !=9) //tab - use to confirm the input
     abe:	29 30       	cpi	r18, 0x09	; 9
     ac0:	81 f0       	breq	.+32     	; 0xae2 <__vector_18+0x68>
	{
		userInputSub=userInput;//store the last input
     ac2:	20 93 98 03 	sts	0x0398, r18
		userInputString[userInputIdex]=userInput;//store the string input
     ac6:	80 91 96 03 	lds	r24, 0x0396
     aca:	90 91 97 03 	lds	r25, 0x0397
     ace:	fc 01       	movw	r30, r24
     ad0:	e7 56       	subi	r30, 0x67	; 103
     ad2:	fc 4f       	sbci	r31, 0xFC	; 252
     ad4:	20 83       	st	Z, r18
		userInputIdex++;
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	90 93 97 03 	sts	0x0397, r25
     adc:	80 93 96 03 	sts	0x0396, r24
     ae0:	b7 c0       	rjmp	.+366    	; 0xc50 <__vector_18+0x1d6>
	}
	
	else{
	
	//Setting the mode
	if (userInputSub=='A'||userInputSub=='a')
     ae2:	90 91 98 03 	lds	r25, 0x0398
     ae6:	89 2f       	mov	r24, r25
     ae8:	8f 7d       	andi	r24, 0xDF	; 223
     aea:	81 34       	cpi	r24, 0x41	; 65
     aec:	61 f4       	brne	.+24     	; 0xb06 <__vector_18+0x8c>
	{
		replyList(1);
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelA=true;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 95 03 	sts	0x0395, r24
		modelR=false;
     afc:	10 92 94 03 	sts	0x0394, r1
		modelT=false;
     b00:	10 92 93 03 	sts	0x0393, r1
     b04:	26 c0       	rjmp	.+76     	; 0xb52 <__vector_18+0xd8>
	}

	else if (userInputSub=='R'||userInputSub=='r') //reset to the minimum attenuation
     b06:	82 35       	cpi	r24, 0x52	; 82
     b08:	61 f4       	brne	.+24     	; 0xb22 <__vector_18+0xa8>
	{
		replyList(3);
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelR=true;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 94 03 	sts	0x0394, r24
		modelA=false;
     b18:	10 92 95 03 	sts	0x0395, r1
		modelT=false;
     b1c:	10 92 93 03 	sts	0x0393, r1
     b20:	18 c0       	rjmp	.+48     	; 0xb52 <__vector_18+0xd8>
		
	}
	else if (userInputSub=='T'||userInputSub=='t') //Target voltage mode
     b22:	84 35       	cpi	r24, 0x54	; 84
     b24:	61 f4       	brne	.+24     	; 0xb3e <__vector_18+0xc4>
	{
		replyList(4);
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelR=false;
     b2e:	10 92 94 03 	sts	0x0394, r1
		modelA=false;
     b32:	10 92 95 03 	sts	0x0395, r1
		modelT=true;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 93 03 	sts	0x0393, r24
     b3c:	0a c0       	rjmp	.+20     	; 0xb52 <__vector_18+0xd8>
		
	}
	else if (userInputSub==27)//ESC
     b3e:	9b 31       	cpi	r25, 0x1B	; 27
     b40:	41 f4       	brne	.+16     	; 0xb52 <__vector_18+0xd8>
	{
		menuStart();
     b42:	0e 94 0a 03 	call	0x614	; 0x614 <_Z9menuStartv>
		modelA=false;
     b46:	10 92 95 03 	sts	0x0395, r1
		modelR=false;
     b4a:	10 92 94 03 	sts	0x0394, r1
		modelT=false;
     b4e:	10 92 93 03 	sts	0x0393, r1
	}

	
	//Mode A: Move up or down step by step
	if (modelA)
     b52:	80 91 95 03 	lds	r24, 0x0395
     b56:	88 23       	and	r24, r24
     b58:	61 f1       	breq	.+88     	; 0xbb2 <__vector_18+0x138>
	{
		if (userInputSub=='w'||userInputSub=='W')
     b5a:	80 91 98 03 	lds	r24, 0x0398
     b5e:	8f 7d       	andi	r24, 0xDF	; 223
     b60:	87 35       	cpi	r24, 0x57	; 87
     b62:	91 f4       	brne	.+36     	; 0xb88 <__vector_18+0x10e>
		{
			if (readVoltageLite()<4.00)
     b64:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e8       	ldi	r20, 0x80	; 128
     b6e:	50 e4       	ldi	r21, 0x40	; 64
     b70:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     b74:	88 23       	and	r24, r24
     b76:	0c f0       	brlt	.+2      	; 0xb7a <__vector_18+0x100>
     b78:	65 c0       	rjmp	.+202    	; 0xc44 <__vector_18+0x1ca>
			{
				moveUpDown(STEP_TO_UP);//STEP_TO_UP_4
     b7a:	80 91 02 01 	lds	r24, 0x0102
     b7e:	90 91 03 01 	lds	r25, 0x0103
     b82:	0e 94 03 04 	call	0x806	; 0x806 <_Z10moveUpDowni>
     b86:	5e c0       	rjmp	.+188    	; 0xc44 <__vector_18+0x1ca>
			}
			
		}
		else if (userInputSub=='s'||userInputSub=='S')
     b88:	83 35       	cpi	r24, 0x53	; 83
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__vector_18+0x114>
     b8c:	5b c0       	rjmp	.+182    	; 0xc44 <__vector_18+0x1ca>
		{
			if (readVoltageLite()>0.2)
     b8e:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     b92:	2d ec       	ldi	r18, 0xCD	; 205
     b94:	3c ec       	ldi	r19, 0xCC	; 204
     b96:	4c e4       	ldi	r20, 0x4C	; 76
     b98:	5e e3       	ldi	r21, 0x3E	; 62
     b9a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__gesf2>
     b9e:	18 16       	cp	r1, r24
     ba0:	0c f0       	brlt	.+2      	; 0xba4 <__vector_18+0x12a>
     ba2:	50 c0       	rjmp	.+160    	; 0xc44 <__vector_18+0x1ca>
			{
				moveUpDown(STEP_TO_DOWN);//STEP_TO_DOWN_4
     ba4:	80 91 00 01 	lds	r24, 0x0100
     ba8:	90 91 01 01 	lds	r25, 0x0101
     bac:	0e 94 03 04 	call	0x806	; 0x806 <_Z10moveUpDowni>
     bb0:	49 c0       	rjmp	.+146    	; 0xc44 <__vector_18+0x1ca>
			}
			
		}
	}
	
	else if (modelR)
     bb2:	80 91 94 03 	lds	r24, 0x0394
     bb6:	88 23       	and	r24, r24
     bb8:	19 f0       	breq	.+6      	; 0xbc0 <__vector_18+0x146>
	{
		reset();
     bba:	0e 94 26 04 	call	0x84c	; 0x84c <_Z5resetv>
     bbe:	42 c0       	rjmp	.+132    	; 0xc44 <__vector_18+0x1ca>
	}
	
	else if (modelT)
     bc0:	80 91 93 03 	lds	r24, 0x0393
     bc4:	88 23       	and	r24, r24
     bc6:	09 f4       	brne	.+2      	; 0xbca <__vector_18+0x150>
     bc8:	3d c0       	rjmp	.+122    	; 0xc44 <__vector_18+0x1ca>
	{
		if (userInputSub=='T'||userInputSub=='t')
     bca:	80 91 98 03 	lds	r24, 0x0398
     bce:	8f 7d       	andi	r24, 0xDF	; 223
     bd0:	84 35       	cpi	r24, 0x54	; 84
     bd2:	c1 f1       	breq	.+112    	; 0xc44 <__vector_18+0x1ca>
		{ //do nothing
		}
		else{
		char bufferx[10];
		double dB= atof(userInputString);
     bd4:	89 e9       	ldi	r24, 0x99	; 153
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	0e 94 40 0b 	call	0x1680	; 0x1680 <atof>
     bdc:	6b 01       	movw	r12, r22
     bde:	7c 01       	movw	r14, r24
		if (dB>0&&dB<=26.5)
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	a9 01       	movw	r20, r18
     be6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__gesf2>
     bea:	18 16       	cp	r1, r24
     bec:	5c f5       	brge	.+86     	; 0xc44 <__vector_18+0x1ca>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	44 ed       	ldi	r20, 0xD4	; 212
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	c7 01       	movw	r24, r14
     bf8:	b6 01       	movw	r22, r12
     bfa:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     bfe:	18 16       	cp	r1, r24
     c00:	0c f1       	brlt	.+66     	; 0xc44 <__vector_18+0x1ca>
		{
			double targetVol=myVolTodB.getVoltage(dB);
     c02:	b7 01       	movw	r22, r14
     c04:	a6 01       	movw	r20, r12
     c06:	83 ea       	ldi	r24, 0xA3	; 163
     c08:	93 e0       	ldi	r25, 0x03	; 3
     c0a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN7VolTodB10getVoltageEd>
     c0e:	6b 01       	movw	r12, r22
     c10:	7c 01       	movw	r14, r24
			if(targetVol!=0){
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	a9 01       	movw	r20, r18
     c18:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     c1c:	88 23       	and	r24, r24
     c1e:	91 f0       	breq	.+36     	; 0xc44 <__vector_18+0x1ca>
			dtostrf(targetVol,4,2,bufferx);
     c20:	8e 01       	movw	r16, r28
     c22:	0f 5f       	subi	r16, 0xFF	; 255
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	22 e0       	ldi	r18, 0x02	; 2
     c28:	44 e0       	ldi	r20, 0x04	; 4
     c2a:	c7 01       	movw	r24, r14
     c2c:	b6 01       	movw	r22, r12
     c2e:	0e 94 1f 0b 	call	0x163e	; 0x163e <dtostrf>
			myUART.uart_transmit_string(bufferx);
     c32:	b8 01       	movw	r22, r16
     c34:	86 ea       	ldi	r24, 0xA6	; 166
     c36:	93 e0       	ldi	r25, 0x03	; 3
     c38:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN8UARTtool20uart_transmit_stringEPc>
			goToTargetVol(targetVol);
     c3c:	c7 01       	movw	r24, r14
     c3e:	b6 01       	movw	r22, r12
     c40:	0e 94 9d 04 	call	0x93a	; 0x93a <_Z13goToTargetVold>
			}
		}
		}
	}
	
	strcpy(userInputString,"");
     c44:	10 92 99 03 	sts	0x0399, r1
	userInputIdex=0;
     c48:	10 92 97 03 	sts	0x0397, r1
     c4c:	10 92 96 03 	sts	0x0396, r1
	}
	

	
	
}
     c50:	2a 96       	adiw	r28, 0x0a	; 10
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <_GLOBAL__sub_I_myStepper>:
#include "ADC.h"
#include "UARTtool.h"
#include "Menu.h"
#include "VolTodB.h"

Stepper  myStepper;
     c8e:	87 ea       	ldi	r24, 0xA7	; 167
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN7StepperC1Ev>
UARTtool myUART;
     c96:	86 ea       	ldi	r24, 0xA6	; 166
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	0e 94 57 08 	call	0x10ae	; 0x10ae <_ZN8UARTtoolC1Ev>
ADC2     myADC;
     c9e:	85 ea       	ldi	r24, 0xA5	; 165
     ca0:	93 e0       	ldi	r25, 0x03	; 3
     ca2:	0e 94 05 01 	call	0x20a	; 0x20a <_ZN4ADC2C1Ev>
ADS1115  myADS1115;
     ca6:	84 ea       	ldi	r24, 0xA4	; 164
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	0e 94 12 01 	call	0x224	; 0x224 <_ZN7ADS1115C1Ev>
VolTodB  myVolTodB;
     cae:	83 ea       	ldi	r24, 0xA3	; 163
     cb0:	93 e0       	ldi	r25, 0x03	; 3
     cb2:	0e 94 89 01 	call	0x312	; 0x312 <_ZN7VolTodBC1Ev>
     cb6:	08 95       	ret

00000cb8 <_ZN6MillisC1Ev>:
uint64_t _millis = 0;
uint16_t _1000us = 0;
uint64_t old_millis = 0;
	

Millis::Millis(void){
     cb8:	08 95       	ret

00000cba <__vector_16>:
	;
	}

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
     cba:	1f 92       	push	r1
     cbc:	0f 92       	push	r0
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	0f 92       	push	r0
     cc2:	11 24       	eor	r1, r1
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
	_1000us += 128;
     cda:	e0 91 bb 03 	lds	r30, 0x03BB
     cde:	f0 91 bc 03 	lds	r31, 0x03BC
     ce2:	e0 58       	subi	r30, 0x80	; 128
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	f0 93 bc 03 	sts	0x03BC, r31
     cea:	e0 93 bb 03 	sts	0x03BB, r30
	while (_1000us > 1000) {
     cee:	e9 3e       	cpi	r30, 0xE9	; 233
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	f8 07       	cpc	r31, r24
     cf4:	68 f1       	brcs	.+90     	; 0xd50 <__vector_16+0x96>
     cf6:	20 91 bd 03 	lds	r18, 0x03BD
     cfa:	30 91 be 03 	lds	r19, 0x03BE
     cfe:	40 91 bf 03 	lds	r20, 0x03BF
     d02:	50 91 c0 03 	lds	r21, 0x03C0
     d06:	60 91 c1 03 	lds	r22, 0x03C1
     d0a:	70 91 c2 03 	lds	r23, 0x03C2
     d0e:	80 91 c3 03 	lds	r24, 0x03C3
     d12:	90 91 c4 03 	lds	r25, 0x03C4
		_millis++;
     d16:	a1 e0       	ldi	r26, 0x01	; 1
     d18:	0e 94 df 0a 	call	0x15be	; 0x15be <__adddi3_s8>
		_1000us -= 1000;
     d1c:	e8 5e       	subi	r30, 0xE8	; 232
     d1e:	f3 40       	sbci	r31, 0x03	; 3

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
	_1000us += 128;
	while (_1000us > 1000) {
     d20:	e9 3e       	cpi	r30, 0xE9	; 233
     d22:	a3 e0       	ldi	r26, 0x03	; 3
     d24:	fa 07       	cpc	r31, r26
     d26:	b8 f7       	brcc	.-18     	; 0xd16 <__vector_16+0x5c>
     d28:	20 93 bd 03 	sts	0x03BD, r18
     d2c:	30 93 be 03 	sts	0x03BE, r19
     d30:	40 93 bf 03 	sts	0x03BF, r20
     d34:	50 93 c0 03 	sts	0x03C0, r21
     d38:	60 93 c1 03 	sts	0x03C1, r22
     d3c:	70 93 c2 03 	sts	0x03C2, r23
     d40:	80 93 c3 03 	sts	0x03C3, r24
     d44:	90 93 c4 03 	sts	0x03C4, r25
     d48:	f0 93 bc 03 	sts	0x03BC, r31
     d4c:	e0 93 bb 03 	sts	0x03BB, r30
		_millis++;
		_1000us -= 1000;
	}
}
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <_ZN6Millis6millisEv>:

// safe access to millis counter
uint64_t Millis::millis() {
	uint64_t m;
	cli();
     d70:	f8 94       	cli
	m = _millis;
     d72:	20 91 bd 03 	lds	r18, 0x03BD
     d76:	30 91 be 03 	lds	r19, 0x03BE
     d7a:	40 91 bf 03 	lds	r20, 0x03BF
     d7e:	50 91 c0 03 	lds	r21, 0x03C0
     d82:	60 91 c1 03 	lds	r22, 0x03C1
     d86:	70 91 c2 03 	lds	r23, 0x03C2
     d8a:	80 91 c3 03 	lds	r24, 0x03C3
     d8e:	90 91 c4 03 	lds	r25, 0x03C4
	sei();
     d92:	78 94       	sei
	return m;
}
     d94:	08 95       	ret

00000d96 <_ZN6Millis5setupEv>:
	//PORTB |= _BV(PB3); // turn the LED on

	/* interrup setup */
	// prescale timer0 to 1/8th the clock rate
	// overflow timer0 every 0.256 ms
	TCCR0B |= (1<<CS01);
     d96:	85 b5       	in	r24, 0x25	; 37
     d98:	82 60       	ori	r24, 0x02	; 2
     d9a:	85 bd       	out	0x25, r24	; 37
	// enable timer overflow interrupt
	TIMSK0  |= 1<<TOIE0;
     d9c:	ee e6       	ldi	r30, 0x6E	; 110
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
     da6:	78 94       	sei
     da8:	08 95       	ret

00000daa <_Z9pin_setupv>:
   }
	
}

void pin_setup(){
	DDRD &= !_BV(5); //PD5  T1
     daa:	8a b1       	in	r24, 0x0a	; 10
     dac:	1a b8       	out	0x0a, r1	; 10
	//DDRD &= !_BV(3); //INT1
	DDRD |= _BV(7);
     dae:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= _BV(7); //Used to enable the L293D
     db0:	5f 9a       	sbi	0x0b, 7	; 11
     db2:	08 95       	ret

00000db4 <_Z14register_setupv>:
	
}

void register_setup(){
	//Enable T1
	TCCR1B |= _BV(CS10) | _BV(CS11) | _BV(CS12);
     db4:	e1 e8       	ldi	r30, 0x81	; 129
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	87 60       	ori	r24, 0x07	; 7
     dbc:	80 83       	st	Z, r24
     dbe:	08 95       	ret

00000dc0 <main>:
Menu     myMenu;


int main(void)
{
	pin_setup();
     dc0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_Z9pin_setupv>
	register_setup();
     dc4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_Z14register_setupv>
	sei();
     dc8:	78 94       	sei
	myMenu.MenuStart();
     dca:	85 ec       	ldi	r24, 0xC5	; 197
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	0e 94 89 03 	call	0x712	; 0x712 <_ZN4Menu9MenuStartEv>
     dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <main+0x12>

00000dd4 <_GLOBAL__sub_I_myMenu>:
#include "Menu.h"

void pin_setup();
void register_setup();

Menu     myMenu;
     dd4:	85 ec       	ldi	r24, 0xC5	; 197
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4MenuC1Ev>
     ddc:	08 95       	ret

00000dde <_ZN7StepperC1Ev>:
 *   Sets which wires should control the motor.
 */

Millis myMillis;

Stepper::Stepper()
     dde:	fc 01       	movw	r30, r24
{
  step_number = 0;      // which step the motor is on
     de0:	15 86       	std	Z+13, r1	; 0x0d
     de2:	14 86       	std	Z+12, r1	; 0x0c
  speed = 0;        // the motor speed, in revolutions per minute
     de4:	13 82       	std	Z+3, r1	; 0x03
     de6:	12 82       	std	Z+2, r1	; 0x02
  direction = 0;      // motor direction
     de8:	11 82       	std	Z+1, r1	; 0x01
     dea:	10 82       	st	Z, r1
  last_step_time = 0;    // time stamp in ms of the last step taken
     dec:	10 8a       	std	Z+16, r1	; 0x10
     dee:	11 8a       	std	Z+17, r1	; 0x11
     df0:	12 8a       	std	Z+18, r1	; 0x12
     df2:	13 8a       	std	Z+19, r1	; 0x13
  number_of_steps = 1024;
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	94 e0       	ldi	r25, 0x04	; 4
     df8:	91 87       	std	Z+9, r25	; 0x09
     dfa:	80 87       	std	Z+8, r24	; 0x08
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);
  */
  
  DDRB= 0X0F;
     dfc:	8f e0       	ldi	r24, 0x0F	; 15
     dfe:	84 b9       	out	0x04, r24	; 4
  PORTB &= !_BV(0);
     e00:	85 b1       	in	r24, 0x05	; 5
     e02:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(1);
     e04:	85 b1       	in	r24, 0x05	; 5
     e06:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(2);
     e08:	85 b1       	in	r24, 0x05	; 5
     e0a:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(3);
     e0c:	85 b1       	in	r24, 0x05	; 5
     e0e:	15 b8       	out	0x05, r1	; 5
  
  // pin_count is used by the stepMotor() method:  
  pin_count = 4; 
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	93 87       	std	Z+11, r25	; 0x0b
     e16:	82 87       	std	Z+10, r24	; 0x0a
  
  //Initialize the milis
  
  myMillis.setup();
     e18:	86 ec       	ldi	r24, 0xC6	; 198
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN6Millis5setupEv>
     e20:	08 95       	ret

00000e22 <_ZN7Stepper8setSpeedEl>:
/*
  Sets the speed in revs per minute

*/
void Stepper::setSpeed(long whatSpeed)
{
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
     e30:	6a 01       	movw	r12, r20
     e32:	7b 01       	movw	r14, r22
  step_delay = 60L * 1000L / this->number_of_steps / whatSpeed;
     e34:	28 85       	ldd	r18, Y+8	; 0x08
     e36:	39 85       	ldd	r19, Y+9	; 0x09
     e38:	44 27       	eor	r20, r20
     e3a:	37 fd       	sbrc	r19, 7
     e3c:	40 95       	com	r20
     e3e:	54 2f       	mov	r21, r20
     e40:	60 e6       	ldi	r22, 0x60	; 96
     e42:	7a ee       	ldi	r23, 0xEA	; 234
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divmodsi4>
     e4c:	ca 01       	movw	r24, r20
     e4e:	b9 01       	movw	r22, r18
     e50:	a7 01       	movw	r20, r14
     e52:	96 01       	movw	r18, r12
     e54:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divmodsi4>
     e58:	2c 83       	std	Y+4, r18	; 0x04
     e5a:	3d 83       	std	Y+5, r19	; 0x05
     e5c:	4e 83       	std	Y+6, r20	; 0x06
     e5e:	5f 83       	std	Y+7, r21	; 0x07
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	08 95       	ret

00000e6e <_ZN7Stepper9stepMotorEi>:
		PORTB |= _BV(3);
		PORTB &= !_BV(3);
		
	*/
   
	   switch (thisStep) {
     e6e:	68 30       	cpi	r22, 0x08	; 8
     e70:	71 05       	cpc	r23, r1
     e72:	08 f0       	brcs	.+2      	; 0xe76 <_ZN7Stepper9stepMotorEi+0x8>
     e74:	40 c0       	rjmp	.+128    	; 0xef6 <_ZN7Stepper9stepMotorEi+0x88>
     e76:	fb 01       	movw	r30, r22
     e78:	ec 5c       	subi	r30, 0xCC	; 204
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__tablejump2__>
		   
		   case 0:    // 0011
		   PORTB &= !_BV(0);
     e80:	85 b1       	in	r24, 0x05	; 5
     e82:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     e84:	85 b1       	in	r24, 0x05	; 5
     e86:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(3);
     e88:	2b 9a       	sbi	0x05, 3	; 5
		   PORTB |= _BV(2);
     e8a:	2a 9a       	sbi	0x05, 2	; 5
		   break;
     e8c:	08 95       	ret
		   
		   case 1:    // 0001
		   PORTB &= !_BV(0);
     e8e:	85 b1       	in	r24, 0x05	; 5
     e90:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     e92:	85 b1       	in	r24, 0x05	; 5
     e94:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     e96:	85 b1       	in	r24, 0x05	; 5
     e98:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(3);
     e9a:	2b 9a       	sbi	0x05, 3	; 5
		   break;
     e9c:	08 95       	ret
		   
		   case 2:    // 0101
           PORTB &= !_BV(0);
     e9e:	85 b1       	in	r24, 0x05	; 5
     ea0:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     ea2:	85 b1       	in	r24, 0x05	; 5
     ea4:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(1);
     ea6:	29 9a       	sbi	0x05, 1	; 5
		   PORTB |= _BV(3);
     ea8:	2b 9a       	sbi	0x05, 3	; 5
		   break;
     eaa:	08 95       	ret
		   
		   case 3:    // 0100
           PORTB &= !_BV(0);
     eac:	85 b1       	in	r24, 0x05	; 5
     eae:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     eb0:	85 b1       	in	r24, 0x05	; 5
     eb2:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     eb4:	85 b1       	in	r24, 0x05	; 5
     eb6:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(1);
     eb8:	29 9a       	sbi	0x05, 1	; 5
		   break;
     eba:	08 95       	ret
		   
		   case 4:    //1100
		   PORTB &= !_BV(2);
     ebc:	85 b1       	in	r24, 0x05	; 5
     ebe:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     ec0:	85 b1       	in	r24, 0x05	; 5
     ec2:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(0);
     ec4:	28 9a       	sbi	0x05, 0	; 5
		   PORTB |= _BV(1);
     ec6:	29 9a       	sbi	0x05, 1	; 5
		   break;
     ec8:	08 95       	ret
		   
		   case 5:    //1000
		   PORTB &= !_BV(2);
     eca:	85 b1       	in	r24, 0x05	; 5
     ecc:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     ece:	85 b1       	in	r24, 0x05	; 5
     ed0:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     ed2:	85 b1       	in	r24, 0x05	; 5
     ed4:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(0);
     ed6:	28 9a       	sbi	0x05, 0	; 5
		   break;
     ed8:	08 95       	ret
		   
		   case 6:    //0010
		   PORTB &= !_BV(3);
     eda:	85 b1       	in	r24, 0x05	; 5
     edc:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     ede:	85 b1       	in	r24, 0x05	; 5
     ee0:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(2);
     ee2:	2a 9a       	sbi	0x05, 2	; 5
		   PORTB |= _BV(0);
     ee4:	28 9a       	sbi	0x05, 0	; 5
		   break;
     ee6:	08 95       	ret
		   
		   case 7:    //1010
		   PORTB &= !_BV(3);
     ee8:	85 b1       	in	r24, 0x05	; 5
     eea:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     eec:	85 b1       	in	r24, 0x05	; 5
     eee:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(0);
     ef0:	85 b1       	in	r24, 0x05	; 5
     ef2:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(2);
     ef4:	2a 9a       	sbi	0x05, 2	; 5
     ef6:	08 95       	ret

00000ef8 <_ZN7Stepper4stepEi>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
   the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{  
     ef8:	2f 92       	push	r2
     efa:	3f 92       	push	r3
     efc:	4f 92       	push	r4
     efe:	5f 92       	push	r5
     f00:	6f 92       	push	r6
     f02:	7f 92       	push	r7
     f04:	8f 92       	push	r8
     f06:	9f 92       	push	r9
     f08:	af 92       	push	r10
     f0a:	bf 92       	push	r11
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <_ZN7Stepper4stepEi+0x26>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <_ZN7Stepper4stepEi+0x28>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
  int steps_left = abs(steps_to_move);  // how many steps to take
     f28:	4b 01       	movw	r8, r22
     f2a:	77 23       	and	r23, r23
     f2c:	24 f4       	brge	.+8      	; 0xf36 <_ZN7Stepper4stepEi+0x3e>
     f2e:	88 24       	eor	r8, r8
     f30:	99 24       	eor	r9, r9
     f32:	86 1a       	sub	r8, r22
     f34:	97 0a       	sbc	r9, r23
     f36:	9a 82       	std	Y+2, r9	; 0x02
     f38:	89 82       	std	Y+1, r8	; 0x01
  
  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) {direction = 1;}
     f3a:	16 16       	cp	r1, r22
     f3c:	17 06       	cpc	r1, r23
     f3e:	34 f4       	brge	.+12     	; 0xf4c <_ZN7Stepper4stepEi+0x54>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	ab 81       	ldd	r26, Y+3	; 0x03
     f46:	bc 81       	ldd	r27, Y+4	; 0x04
     f48:	8d 93       	st	X+, r24
     f4a:	9c 93       	st	X, r25
  if (steps_to_move < 0) {direction = 0;}
     f4c:	77 23       	and	r23, r23
     f4e:	0c f0       	brlt	.+2      	; 0xf52 <_ZN7Stepper4stepEi+0x5a>
     f50:	83 c0       	rjmp	.+262    	; 0x1058 <_ZN7Stepper4stepEi+0x160>
     f52:	eb 81       	ldd	r30, Y+3	; 0x03
     f54:	fc 81       	ldd	r31, Y+4	; 0x04
     f56:	11 82       	std	Z+1, r1	; 0x01
     f58:	10 82       	st	Z, r1
     f5a:	7e c0       	rjmp	.+252    	; 0x1058 <_ZN7Stepper4stepEi+0x160>
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
  // move only if the appropriate delay has passed:
  if (myMillis.millis() - last_step_time >= step_delay) {//this->step_delay
     f5c:	86 ec       	ldi	r24, 0xC6	; 198
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6Millis6millisEv>
     f64:	ab 81       	ldd	r26, Y+3	; 0x03
     f66:	bc 81       	ldd	r27, Y+4	; 0x04
     f68:	50 96       	adiw	r26, 0x10	; 16
     f6a:	ed 90       	ld	r14, X+
     f6c:	fd 90       	ld	r15, X+
     f6e:	0d 91       	ld	r16, X+
     f70:	1c 91       	ld	r17, X
     f72:	53 97       	sbiw	r26, 0x13	; 19
     f74:	27 01       	movw	r4, r14
     f76:	38 01       	movw	r6, r16
     f78:	77 0c       	add	r7, r7
     f7a:	44 08       	sbc	r4, r4
     f7c:	54 2c       	mov	r5, r4
     f7e:	32 01       	movw	r6, r4
     f80:	ae 2c       	mov	r10, r14
     f82:	bf 2c       	mov	r11, r15
     f84:	c0 2e       	mov	r12, r16
     f86:	d1 2e       	mov	r13, r17
     f88:	e4 2c       	mov	r14, r4
     f8a:	f4 2c       	mov	r15, r4
     f8c:	04 2d       	mov	r16, r4
     f8e:	14 2d       	mov	r17, r4
     f90:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__subdi3>
     f94:	f2 2f       	mov	r31, r18
     f96:	e3 2f       	mov	r30, r19
     f98:	14 96       	adiw	r26, 0x04	; 4
     f9a:	0d 91       	ld	r16, X+
     f9c:	1d 91       	ld	r17, X+
     f9e:	2d 91       	ld	r18, X+
     fa0:	3c 91       	ld	r19, X
     fa2:	17 97       	sbiw	r26, 0x07	; 7
     fa4:	18 01       	movw	r2, r16
     fa6:	29 01       	movw	r4, r18
     fa8:	2f 2f       	mov	r18, r31
     faa:	3e 2f       	mov	r19, r30
     fac:	a2 2c       	mov	r10, r2
     fae:	b3 2c       	mov	r11, r3
     fb0:	c4 2c       	mov	r12, r4
     fb2:	d5 2c       	mov	r13, r5
     fb4:	e1 2c       	mov	r14, r1
     fb6:	f1 2c       	mov	r15, r1
     fb8:	00 e0       	ldi	r16, 0x00	; 0
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__cmpdi2>
     fc0:	68 f2       	brcs	.-102    	; 0xf5c <_ZN7Stepper4stepEi+0x64>
      // get the timeStamp of when you stepped:
      last_step_time = myMillis.millis();
     fc2:	86 ec       	ldi	r24, 0xC6	; 198
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6Millis6millisEv>
     fca:	eb 81       	ldd	r30, Y+3	; 0x03
     fcc:	fc 81       	ldd	r31, Y+4	; 0x04
     fce:	20 8b       	std	Z+16, r18	; 0x10
     fd0:	31 8b       	std	Z+17, r19	; 0x11
     fd2:	42 8b       	std	Z+18, r20	; 0x12
     fd4:	53 8b       	std	Z+19, r21	; 0x13
      // increment or decrement the step number,
      // depending on direction:
      if (direction == 1) {
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	69 f4       	brne	.+26     	; 0xff8 <_ZN7Stepper4stepEi+0x100>
		  step_number++;
     fde:	84 85       	ldd	r24, Z+12	; 0x0c
     fe0:	95 85       	ldd	r25, Z+13	; 0x0d
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	95 87       	std	Z+13, r25	; 0x0d
     fe6:	84 87       	std	Z+12, r24	; 0x0c
        if (step_number == number_of_steps) {
     fe8:	20 85       	ldd	r18, Z+8	; 0x08
     fea:	31 85       	ldd	r19, Z+9	; 0x09
     fec:	82 17       	cp	r24, r18
     fee:	93 07       	cpc	r25, r19
     ff0:	d1 f4       	brne	.+52     	; 0x1026 <_ZN7Stepper4stepEi+0x12e>
          step_number = 0;
     ff2:	15 86       	std	Z+13, r1	; 0x0d
     ff4:	14 86       	std	Z+12, r1	; 0x0c
     ff6:	17 c0       	rjmp	.+46     	; 0x1026 <_ZN7Stepper4stepEi+0x12e>
        }
      } 
      else { 
        if (step_number == 0) {
     ff8:	ab 81       	ldd	r26, Y+3	; 0x03
     ffa:	bc 81       	ldd	r27, Y+4	; 0x04
     ffc:	1c 96       	adiw	r26, 0x0c	; 12
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	1d 97       	sbiw	r26, 0x0d	; 13
    1004:	89 2b       	or	r24, r25
    1006:	41 f4       	brne	.+16     	; 0x1018 <_ZN7Stepper4stepEi+0x120>
         step_number = number_of_steps;
    1008:	18 96       	adiw	r26, 0x08	; 8
    100a:	8d 91       	ld	r24, X+
    100c:	9c 91       	ld	r25, X
    100e:	19 97       	sbiw	r26, 0x09	; 9
    1010:	1d 96       	adiw	r26, 0x0d	; 13
    1012:	9c 93       	st	X, r25
    1014:	8e 93       	st	-X, r24
    1016:	1c 97       	sbiw	r26, 0x0c	; 12
        }
        step_number--;
    1018:	eb 81       	ldd	r30, Y+3	; 0x03
    101a:	fc 81       	ldd	r31, Y+4	; 0x04
    101c:	84 85       	ldd	r24, Z+12	; 0x0c
    101e:	95 85       	ldd	r25, Z+13	; 0x0d
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	95 87       	std	Z+13, r25	; 0x0d
    1024:	84 87       	std	Z+12, r24	; 0x0c
      }
      // decrement the steps left:
      steps_left--;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 8);
    1030:	ab 81       	ldd	r26, Y+3	; 0x03
    1032:	bc 81       	ldd	r27, Y+4	; 0x04
    1034:	1c 96       	adiw	r26, 0x0c	; 12
    1036:	6d 91       	ld	r22, X+
    1038:	7c 91       	ld	r23, X
    103a:	1d 97       	sbiw	r26, 0x0d	; 13
    103c:	67 70       	andi	r22, 0x07	; 7
    103e:	70 78       	andi	r23, 0x80	; 128
    1040:	77 23       	and	r23, r23
    1042:	34 f4       	brge	.+12     	; 0x1050 <_ZN7Stepper4stepEi+0x158>
    1044:	61 50       	subi	r22, 0x01	; 1
    1046:	71 09       	sbc	r23, r1
    1048:	68 6f       	ori	r22, 0xF8	; 248
    104a:	7f 6f       	ori	r23, 0xFF	; 255
    104c:	6f 5f       	subi	r22, 0xFF	; 255
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN7Stepper9stepMotorEi>
  if (steps_to_move > 0) {direction = 1;}
  if (steps_to_move < 0) {direction = 0;}
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	1e 16       	cp	r1, r30
    105e:	1f 06       	cpc	r1, r31
    1060:	0c f4       	brge	.+2      	; 0x1064 <_ZN7Stepper4stepEi+0x16c>
    1062:	7c cf       	rjmp	.-264    	; 0xf5c <_ZN7Stepper4stepEi+0x64>
      steps_left--;
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 8);
    }
  }
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	9f 90       	pop	r9
    1082:	8f 90       	pop	r8
    1084:	7f 90       	pop	r7
    1086:	6f 90       	pop	r6
    1088:	5f 90       	pop	r5
    108a:	4f 90       	pop	r4
    108c:	3f 90       	pop	r3
    108e:	2f 90       	pop	r2
    1090:	08 95       	ret

00001092 <_ZN7Stepper8motorOffEv>:
{
     //digitalWrite(motor_pin_1, LOW);
     //digitalWrite(motor_pin_2, LOW);
     //digitalWrite(motor_pin_3, LOW);
     //digitalWrite(motor_pin_4, LOW);
	  PORTB &= !_BV(0);
    1092:	85 b1       	in	r24, 0x05	; 5
    1094:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(1);
    1096:	85 b1       	in	r24, 0x05	; 5
    1098:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(2);
    109a:	85 b1       	in	r24, 0x05	; 5
    109c:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(3);
    109e:	85 b1       	in	r24, 0x05	; 5
    10a0:	15 b8       	out	0x05, r1	; 5
    10a2:	08 95       	ret

000010a4 <_GLOBAL__sub_I_myMillis>:
/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */

Millis myMillis;
    10a4:	86 ec       	ldi	r24, 0xC6	; 198
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN6MillisC1Ev>
    10ac:	08 95       	ret

000010ae <_ZN8UARTtoolC1Ev>:
#include "UARTtool.h"
#include <avr/io.h>
#include <string.h>

UARTtool::UARTtool(){
	UBRR0H = (BAUDRATE>>8);                      // shift the register right by 8 bits
    10ae:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;                           // set baud rate
    10b2:	87 e6       	ldi	r24, 0x67	; 103
    10b4:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B|= (1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);                // enable receiver and transmitter
    10b8:	e1 ec       	ldi	r30, 0xC1	; 193
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 69       	ori	r24, 0x98	; 152
    10c0:	80 83       	st	Z, r24
	UCSR0C|= (0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);   // 8bit data format
    10c2:	e2 ec       	ldi	r30, 0xC2	; 194
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	86 60       	ori	r24, 0x06	; 6
    10ca:	80 83       	st	Z, r24
    10cc:	08 95       	ret

000010ce <_ZN8UARTtool13uart_transmitEc>:
	
}

void UARTtool::uart_transmit (char data){
	while (!( UCSR0A & (1<<UDRE0)));                // wait while register is free
    10ce:	e0 ec       	ldi	r30, 0xC0	; 192
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	85 ff       	sbrs	r24, 5
    10d6:	fd cf       	rjmp	.-6      	; 0x10d2 <_ZN8UARTtool13uart_transmitEc+0x4>
	UDR0 = data;
    10d8:	60 93 c6 00 	sts	0x00C6, r22
    10dc:	08 95       	ret

000010de <_ZN8UARTtool20uart_transmit_stringEPc>:
}

void UARTtool::uart_transmit_string(char data[]){
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	7c 01       	movw	r14, r24
	
	int i= strlen(data);
    10f0:	fb 01       	movw	r30, r22
    10f2:	01 90       	ld	r0, Z+
    10f4:	00 20       	and	r0, r0
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <_ZN8UARTtool20uart_transmit_stringEPc+0x14>
    10f8:	31 97       	sbiw	r30, 0x01	; 1
    10fa:	6f 01       	movw	r12, r30
    10fc:	c6 1a       	sub	r12, r22
    10fe:	d7 0a       	sbc	r13, r23
	for (int j=0;j<=i;j++)
    1100:	6a f0       	brmi	.+26     	; 0x111c <_ZN8UARTtool20uart_transmit_stringEPc+0x3e>
    1102:	8b 01       	movw	r16, r22
    1104:	c0 e0       	ldi	r28, 0x00	; 0
    1106:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uart_transmit(data[j]);
    1108:	f8 01       	movw	r30, r16
    110a:	61 91       	ld	r22, Z+
    110c:	8f 01       	movw	r16, r30
    110e:	c7 01       	movw	r24, r14
    1110:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN8UARTtool13uart_transmitEc>
}

void UARTtool::uart_transmit_string(char data[]){
	
	int i= strlen(data);
	for (int j=0;j<=i;j++)
    1114:	21 96       	adiw	r28, 0x01	; 1
    1116:	cc 16       	cp	r12, r28
    1118:	dd 06       	cpc	r13, r29
    111a:	b4 f7       	brge	.-20     	; 0x1108 <_ZN8UARTtool20uart_transmit_stringEPc+0x2a>
	{
		uart_transmit(data[j]);
		
	}
	uart_transmit(0x0A);
    111c:	6a e0       	ldi	r22, 0x0A	; 10
    111e:	c7 01       	movw	r24, r14
    1120:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN8UARTtool13uart_transmitEc>
	uart_transmit(0x0D);//newline
    1124:	6d e0       	ldi	r22, 0x0D	; 13
    1126:	c7 01       	movw	r24, r14
    1128:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN8UARTtool13uart_transmitEc>
	
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	08 95       	ret

0000113e <__subsf3>:
    113e:	50 58       	subi	r21, 0x80	; 128

00001140 <__addsf3>:
    1140:	bb 27       	eor	r27, r27
    1142:	aa 27       	eor	r26, r26
    1144:	0e d0       	rcall	.+28     	; 0x1162 <__addsf3x>
    1146:	75 c1       	rjmp	.+746    	; 0x1432 <__fp_round>
    1148:	66 d1       	rcall	.+716    	; 0x1416 <__fp_pscA>
    114a:	30 f0       	brcs	.+12     	; 0x1158 <__addsf3+0x18>
    114c:	6b d1       	rcall	.+726    	; 0x1424 <__fp_pscB>
    114e:	20 f0       	brcs	.+8      	; 0x1158 <__addsf3+0x18>
    1150:	31 f4       	brne	.+12     	; 0x115e <__addsf3+0x1e>
    1152:	9f 3f       	cpi	r25, 0xFF	; 255
    1154:	11 f4       	brne	.+4      	; 0x115a <__addsf3+0x1a>
    1156:	1e f4       	brtc	.+6      	; 0x115e <__addsf3+0x1e>
    1158:	5b c1       	rjmp	.+694    	; 0x1410 <__fp_nan>
    115a:	0e f4       	brtc	.+2      	; 0x115e <__addsf3+0x1e>
    115c:	e0 95       	com	r30
    115e:	e7 fb       	bst	r30, 7
    1160:	51 c1       	rjmp	.+674    	; 0x1404 <__fp_inf>

00001162 <__addsf3x>:
    1162:	e9 2f       	mov	r30, r25
    1164:	77 d1       	rcall	.+750    	; 0x1454 <__fp_split3>
    1166:	80 f3       	brcs	.-32     	; 0x1148 <__addsf3+0x8>
    1168:	ba 17       	cp	r27, r26
    116a:	62 07       	cpc	r22, r18
    116c:	73 07       	cpc	r23, r19
    116e:	84 07       	cpc	r24, r20
    1170:	95 07       	cpc	r25, r21
    1172:	18 f0       	brcs	.+6      	; 0x117a <__addsf3x+0x18>
    1174:	71 f4       	brne	.+28     	; 0x1192 <__addsf3x+0x30>
    1176:	9e f5       	brtc	.+102    	; 0x11de <__addsf3x+0x7c>
    1178:	8f c1       	rjmp	.+798    	; 0x1498 <__fp_zero>
    117a:	0e f4       	brtc	.+2      	; 0x117e <__addsf3x+0x1c>
    117c:	e0 95       	com	r30
    117e:	0b 2e       	mov	r0, r27
    1180:	ba 2f       	mov	r27, r26
    1182:	a0 2d       	mov	r26, r0
    1184:	0b 01       	movw	r0, r22
    1186:	b9 01       	movw	r22, r18
    1188:	90 01       	movw	r18, r0
    118a:	0c 01       	movw	r0, r24
    118c:	ca 01       	movw	r24, r20
    118e:	a0 01       	movw	r20, r0
    1190:	11 24       	eor	r1, r1
    1192:	ff 27       	eor	r31, r31
    1194:	59 1b       	sub	r21, r25
    1196:	99 f0       	breq	.+38     	; 0x11be <__addsf3x+0x5c>
    1198:	59 3f       	cpi	r21, 0xF9	; 249
    119a:	50 f4       	brcc	.+20     	; 0x11b0 <__addsf3x+0x4e>
    119c:	50 3e       	cpi	r21, 0xE0	; 224
    119e:	68 f1       	brcs	.+90     	; 0x11fa <__addsf3x+0x98>
    11a0:	1a 16       	cp	r1, r26
    11a2:	f0 40       	sbci	r31, 0x00	; 0
    11a4:	a2 2f       	mov	r26, r18
    11a6:	23 2f       	mov	r18, r19
    11a8:	34 2f       	mov	r19, r20
    11aa:	44 27       	eor	r20, r20
    11ac:	58 5f       	subi	r21, 0xF8	; 248
    11ae:	f3 cf       	rjmp	.-26     	; 0x1196 <__addsf3x+0x34>
    11b0:	46 95       	lsr	r20
    11b2:	37 95       	ror	r19
    11b4:	27 95       	ror	r18
    11b6:	a7 95       	ror	r26
    11b8:	f0 40       	sbci	r31, 0x00	; 0
    11ba:	53 95       	inc	r21
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__addsf3x+0x4e>
    11be:	7e f4       	brtc	.+30     	; 0x11de <__addsf3x+0x7c>
    11c0:	1f 16       	cp	r1, r31
    11c2:	ba 0b       	sbc	r27, r26
    11c4:	62 0b       	sbc	r22, r18
    11c6:	73 0b       	sbc	r23, r19
    11c8:	84 0b       	sbc	r24, r20
    11ca:	ba f0       	brmi	.+46     	; 0x11fa <__addsf3x+0x98>
    11cc:	91 50       	subi	r25, 0x01	; 1
    11ce:	a1 f0       	breq	.+40     	; 0x11f8 <__addsf3x+0x96>
    11d0:	ff 0f       	add	r31, r31
    11d2:	bb 1f       	adc	r27, r27
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	c2 f7       	brpl	.-16     	; 0x11cc <__addsf3x+0x6a>
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <__addsf3x+0x98>
    11de:	ba 0f       	add	r27, r26
    11e0:	62 1f       	adc	r22, r18
    11e2:	73 1f       	adc	r23, r19
    11e4:	84 1f       	adc	r24, r20
    11e6:	48 f4       	brcc	.+18     	; 0x11fa <__addsf3x+0x98>
    11e8:	87 95       	ror	r24
    11ea:	77 95       	ror	r23
    11ec:	67 95       	ror	r22
    11ee:	b7 95       	ror	r27
    11f0:	f7 95       	ror	r31
    11f2:	9e 3f       	cpi	r25, 0xFE	; 254
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <__addsf3x+0x96>
    11f6:	b3 cf       	rjmp	.-154    	; 0x115e <__addsf3+0x1e>
    11f8:	93 95       	inc	r25
    11fa:	88 0f       	add	r24, r24
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <__addsf3x+0x9e>
    11fe:	99 27       	eor	r25, r25
    1200:	ee 0f       	add	r30, r30
    1202:	97 95       	ror	r25
    1204:	87 95       	ror	r24
    1206:	08 95       	ret

00001208 <__cmpsf2>:
    1208:	d9 d0       	rcall	.+434    	; 0x13bc <__fp_cmp>
    120a:	08 f4       	brcc	.+2      	; 0x120e <__cmpsf2+0x6>
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	08 95       	ret

00001210 <__divsf3>:
    1210:	0c d0       	rcall	.+24     	; 0x122a <__divsf3x>
    1212:	0f c1       	rjmp	.+542    	; 0x1432 <__fp_round>
    1214:	07 d1       	rcall	.+526    	; 0x1424 <__fp_pscB>
    1216:	40 f0       	brcs	.+16     	; 0x1228 <__divsf3+0x18>
    1218:	fe d0       	rcall	.+508    	; 0x1416 <__fp_pscA>
    121a:	30 f0       	brcs	.+12     	; 0x1228 <__divsf3+0x18>
    121c:	21 f4       	brne	.+8      	; 0x1226 <__divsf3+0x16>
    121e:	5f 3f       	cpi	r21, 0xFF	; 255
    1220:	19 f0       	breq	.+6      	; 0x1228 <__divsf3+0x18>
    1222:	f0 c0       	rjmp	.+480    	; 0x1404 <__fp_inf>
    1224:	51 11       	cpse	r21, r1
    1226:	39 c1       	rjmp	.+626    	; 0x149a <__fp_szero>
    1228:	f3 c0       	rjmp	.+486    	; 0x1410 <__fp_nan>

0000122a <__divsf3x>:
    122a:	14 d1       	rcall	.+552    	; 0x1454 <__fp_split3>
    122c:	98 f3       	brcs	.-26     	; 0x1214 <__divsf3+0x4>

0000122e <__divsf3_pse>:
    122e:	99 23       	and	r25, r25
    1230:	c9 f3       	breq	.-14     	; 0x1224 <__divsf3+0x14>
    1232:	55 23       	and	r21, r21
    1234:	b1 f3       	breq	.-20     	; 0x1222 <__divsf3+0x12>
    1236:	95 1b       	sub	r25, r21
    1238:	55 0b       	sbc	r21, r21
    123a:	bb 27       	eor	r27, r27
    123c:	aa 27       	eor	r26, r26
    123e:	62 17       	cp	r22, r18
    1240:	73 07       	cpc	r23, r19
    1242:	84 07       	cpc	r24, r20
    1244:	38 f0       	brcs	.+14     	; 0x1254 <__divsf3_pse+0x26>
    1246:	9f 5f       	subi	r25, 0xFF	; 255
    1248:	5f 4f       	sbci	r21, 0xFF	; 255
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	44 1f       	adc	r20, r20
    1250:	aa 1f       	adc	r26, r26
    1252:	a9 f3       	breq	.-22     	; 0x123e <__divsf3_pse+0x10>
    1254:	33 d0       	rcall	.+102    	; 0x12bc <__divsf3_pse+0x8e>
    1256:	0e 2e       	mov	r0, r30
    1258:	3a f0       	brmi	.+14     	; 0x1268 <__divsf3_pse+0x3a>
    125a:	e0 e8       	ldi	r30, 0x80	; 128
    125c:	30 d0       	rcall	.+96     	; 0x12be <__divsf3_pse+0x90>
    125e:	91 50       	subi	r25, 0x01	; 1
    1260:	50 40       	sbci	r21, 0x00	; 0
    1262:	e6 95       	lsr	r30
    1264:	00 1c       	adc	r0, r0
    1266:	ca f7       	brpl	.-14     	; 0x125a <__divsf3_pse+0x2c>
    1268:	29 d0       	rcall	.+82     	; 0x12bc <__divsf3_pse+0x8e>
    126a:	fe 2f       	mov	r31, r30
    126c:	27 d0       	rcall	.+78     	; 0x12bc <__divsf3_pse+0x8e>
    126e:	66 0f       	add	r22, r22
    1270:	77 1f       	adc	r23, r23
    1272:	88 1f       	adc	r24, r24
    1274:	bb 1f       	adc	r27, r27
    1276:	26 17       	cp	r18, r22
    1278:	37 07       	cpc	r19, r23
    127a:	48 07       	cpc	r20, r24
    127c:	ab 07       	cpc	r26, r27
    127e:	b0 e8       	ldi	r27, 0x80	; 128
    1280:	09 f0       	breq	.+2      	; 0x1284 <__divsf3_pse+0x56>
    1282:	bb 0b       	sbc	r27, r27
    1284:	80 2d       	mov	r24, r0
    1286:	bf 01       	movw	r22, r30
    1288:	ff 27       	eor	r31, r31
    128a:	93 58       	subi	r25, 0x83	; 131
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	2a f0       	brmi	.+10     	; 0x129a <__divsf3_pse+0x6c>
    1290:	9e 3f       	cpi	r25, 0xFE	; 254
    1292:	51 05       	cpc	r21, r1
    1294:	68 f0       	brcs	.+26     	; 0x12b0 <__divsf3_pse+0x82>
    1296:	b6 c0       	rjmp	.+364    	; 0x1404 <__fp_inf>
    1298:	00 c1       	rjmp	.+512    	; 0x149a <__fp_szero>
    129a:	5f 3f       	cpi	r21, 0xFF	; 255
    129c:	ec f3       	brlt	.-6      	; 0x1298 <__divsf3_pse+0x6a>
    129e:	98 3e       	cpi	r25, 0xE8	; 232
    12a0:	dc f3       	brlt	.-10     	; 0x1298 <__divsf3_pse+0x6a>
    12a2:	86 95       	lsr	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	b7 95       	ror	r27
    12aa:	f7 95       	ror	r31
    12ac:	9f 5f       	subi	r25, 0xFF	; 255
    12ae:	c9 f7       	brne	.-14     	; 0x12a2 <__divsf3_pse+0x74>
    12b0:	88 0f       	add	r24, r24
    12b2:	91 1d       	adc	r25, r1
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	97 f9       	bld	r25, 7
    12ba:	08 95       	ret
    12bc:	e1 e0       	ldi	r30, 0x01	; 1
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	bb 1f       	adc	r27, r27
    12c6:	62 17       	cp	r22, r18
    12c8:	73 07       	cpc	r23, r19
    12ca:	84 07       	cpc	r24, r20
    12cc:	ba 07       	cpc	r27, r26
    12ce:	20 f0       	brcs	.+8      	; 0x12d8 <__divsf3_pse+0xaa>
    12d0:	62 1b       	sub	r22, r18
    12d2:	73 0b       	sbc	r23, r19
    12d4:	84 0b       	sbc	r24, r20
    12d6:	ba 0b       	sbc	r27, r26
    12d8:	ee 1f       	adc	r30, r30
    12da:	88 f7       	brcc	.-30     	; 0x12be <__divsf3_pse+0x90>
    12dc:	e0 95       	com	r30
    12de:	08 95       	ret

000012e0 <__fixsfsi>:
    12e0:	04 d0       	rcall	.+8      	; 0x12ea <__fixunssfsi>
    12e2:	68 94       	set
    12e4:	b1 11       	cpse	r27, r1
    12e6:	d9 c0       	rjmp	.+434    	; 0x149a <__fp_szero>
    12e8:	08 95       	ret

000012ea <__fixunssfsi>:
    12ea:	bc d0       	rcall	.+376    	; 0x1464 <__fp_splitA>
    12ec:	88 f0       	brcs	.+34     	; 0x1310 <__fixunssfsi+0x26>
    12ee:	9f 57       	subi	r25, 0x7F	; 127
    12f0:	90 f0       	brcs	.+36     	; 0x1316 <__fixunssfsi+0x2c>
    12f2:	b9 2f       	mov	r27, r25
    12f4:	99 27       	eor	r25, r25
    12f6:	b7 51       	subi	r27, 0x17	; 23
    12f8:	a0 f0       	brcs	.+40     	; 0x1322 <__fixunssfsi+0x38>
    12fa:	d1 f0       	breq	.+52     	; 0x1330 <__fixunssfsi+0x46>
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	88 1f       	adc	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	1a f0       	brmi	.+6      	; 0x130c <__fixunssfsi+0x22>
    1306:	ba 95       	dec	r27
    1308:	c9 f7       	brne	.-14     	; 0x12fc <__fixunssfsi+0x12>
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <__fixunssfsi+0x46>
    130c:	b1 30       	cpi	r27, 0x01	; 1
    130e:	81 f0       	breq	.+32     	; 0x1330 <__fixunssfsi+0x46>
    1310:	c3 d0       	rcall	.+390    	; 0x1498 <__fp_zero>
    1312:	b1 e0       	ldi	r27, 0x01	; 1
    1314:	08 95       	ret
    1316:	c0 c0       	rjmp	.+384    	; 0x1498 <__fp_zero>
    1318:	67 2f       	mov	r22, r23
    131a:	78 2f       	mov	r23, r24
    131c:	88 27       	eor	r24, r24
    131e:	b8 5f       	subi	r27, 0xF8	; 248
    1320:	39 f0       	breq	.+14     	; 0x1330 <__fixunssfsi+0x46>
    1322:	b9 3f       	cpi	r27, 0xF9	; 249
    1324:	cc f3       	brlt	.-14     	; 0x1318 <__fixunssfsi+0x2e>
    1326:	86 95       	lsr	r24
    1328:	77 95       	ror	r23
    132a:	67 95       	ror	r22
    132c:	b3 95       	inc	r27
    132e:	d9 f7       	brne	.-10     	; 0x1326 <__fixunssfsi+0x3c>
    1330:	3e f4       	brtc	.+14     	; 0x1340 <__fixunssfsi+0x56>
    1332:	90 95       	com	r25
    1334:	80 95       	com	r24
    1336:	70 95       	com	r23
    1338:	61 95       	neg	r22
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	8f 4f       	sbci	r24, 0xFF	; 255
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	08 95       	ret

00001342 <__floatunsisf>:
    1342:	e8 94       	clt
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <__floatsisf+0x12>

00001346 <__floatsisf>:
    1346:	97 fb       	bst	r25, 7
    1348:	3e f4       	brtc	.+14     	; 0x1358 <__floatsisf+0x12>
    134a:	90 95       	com	r25
    134c:	80 95       	com	r24
    134e:	70 95       	com	r23
    1350:	61 95       	neg	r22
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	8f 4f       	sbci	r24, 0xFF	; 255
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	99 23       	and	r25, r25
    135a:	a9 f0       	breq	.+42     	; 0x1386 <__floatsisf+0x40>
    135c:	f9 2f       	mov	r31, r25
    135e:	96 e9       	ldi	r25, 0x96	; 150
    1360:	bb 27       	eor	r27, r27
    1362:	93 95       	inc	r25
    1364:	f6 95       	lsr	r31
    1366:	87 95       	ror	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	b7 95       	ror	r27
    136e:	f1 11       	cpse	r31, r1
    1370:	f8 cf       	rjmp	.-16     	; 0x1362 <__floatsisf+0x1c>
    1372:	fa f4       	brpl	.+62     	; 0x13b2 <__floatsisf+0x6c>
    1374:	bb 0f       	add	r27, r27
    1376:	11 f4       	brne	.+4      	; 0x137c <__floatsisf+0x36>
    1378:	60 ff       	sbrs	r22, 0
    137a:	1b c0       	rjmp	.+54     	; 0x13b2 <__floatsisf+0x6c>
    137c:	6f 5f       	subi	r22, 0xFF	; 255
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	8f 4f       	sbci	r24, 0xFF	; 255
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	16 c0       	rjmp	.+44     	; 0x13b2 <__floatsisf+0x6c>
    1386:	88 23       	and	r24, r24
    1388:	11 f0       	breq	.+4      	; 0x138e <__floatsisf+0x48>
    138a:	96 e9       	ldi	r25, 0x96	; 150
    138c:	11 c0       	rjmp	.+34     	; 0x13b0 <__floatsisf+0x6a>
    138e:	77 23       	and	r23, r23
    1390:	21 f0       	breq	.+8      	; 0x139a <__floatsisf+0x54>
    1392:	9e e8       	ldi	r25, 0x8E	; 142
    1394:	87 2f       	mov	r24, r23
    1396:	76 2f       	mov	r23, r22
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <__floatsisf+0x5e>
    139a:	66 23       	and	r22, r22
    139c:	71 f0       	breq	.+28     	; 0x13ba <__floatsisf+0x74>
    139e:	96 e8       	ldi	r25, 0x86	; 134
    13a0:	86 2f       	mov	r24, r22
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	2a f0       	brmi	.+10     	; 0x13b2 <__floatsisf+0x6c>
    13a8:	9a 95       	dec	r25
    13aa:	66 0f       	add	r22, r22
    13ac:	77 1f       	adc	r23, r23
    13ae:	88 1f       	adc	r24, r24
    13b0:	da f7       	brpl	.-10     	; 0x13a8 <__floatsisf+0x62>
    13b2:	88 0f       	add	r24, r24
    13b4:	96 95       	lsr	r25
    13b6:	87 95       	ror	r24
    13b8:	97 f9       	bld	r25, 7
    13ba:	08 95       	ret

000013bc <__fp_cmp>:
    13bc:	99 0f       	add	r25, r25
    13be:	00 08       	sbc	r0, r0
    13c0:	55 0f       	add	r21, r21
    13c2:	aa 0b       	sbc	r26, r26
    13c4:	e0 e8       	ldi	r30, 0x80	; 128
    13c6:	fe ef       	ldi	r31, 0xFE	; 254
    13c8:	16 16       	cp	r1, r22
    13ca:	17 06       	cpc	r1, r23
    13cc:	e8 07       	cpc	r30, r24
    13ce:	f9 07       	cpc	r31, r25
    13d0:	c0 f0       	brcs	.+48     	; 0x1402 <__fp_cmp+0x46>
    13d2:	12 16       	cp	r1, r18
    13d4:	13 06       	cpc	r1, r19
    13d6:	e4 07       	cpc	r30, r20
    13d8:	f5 07       	cpc	r31, r21
    13da:	98 f0       	brcs	.+38     	; 0x1402 <__fp_cmp+0x46>
    13dc:	62 1b       	sub	r22, r18
    13de:	73 0b       	sbc	r23, r19
    13e0:	84 0b       	sbc	r24, r20
    13e2:	95 0b       	sbc	r25, r21
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <__fp_cmp+0x38>
    13e6:	0a 26       	eor	r0, r26
    13e8:	61 f0       	breq	.+24     	; 0x1402 <__fp_cmp+0x46>
    13ea:	23 2b       	or	r18, r19
    13ec:	24 2b       	or	r18, r20
    13ee:	25 2b       	or	r18, r21
    13f0:	21 f4       	brne	.+8      	; 0x13fa <__fp_cmp+0x3e>
    13f2:	08 95       	ret
    13f4:	0a 26       	eor	r0, r26
    13f6:	09 f4       	brne	.+2      	; 0x13fa <__fp_cmp+0x3e>
    13f8:	a1 40       	sbci	r26, 0x01	; 1
    13fa:	a6 95       	lsr	r26
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	81 1d       	adc	r24, r1
    1400:	81 1d       	adc	r24, r1
    1402:	08 95       	ret

00001404 <__fp_inf>:
    1404:	97 f9       	bld	r25, 7
    1406:	9f 67       	ori	r25, 0x7F	; 127
    1408:	80 e8       	ldi	r24, 0x80	; 128
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	08 95       	ret

00001410 <__fp_nan>:
    1410:	9f ef       	ldi	r25, 0xFF	; 255
    1412:	80 ec       	ldi	r24, 0xC0	; 192
    1414:	08 95       	ret

00001416 <__fp_pscA>:
    1416:	00 24       	eor	r0, r0
    1418:	0a 94       	dec	r0
    141a:	16 16       	cp	r1, r22
    141c:	17 06       	cpc	r1, r23
    141e:	18 06       	cpc	r1, r24
    1420:	09 06       	cpc	r0, r25
    1422:	08 95       	ret

00001424 <__fp_pscB>:
    1424:	00 24       	eor	r0, r0
    1426:	0a 94       	dec	r0
    1428:	12 16       	cp	r1, r18
    142a:	13 06       	cpc	r1, r19
    142c:	14 06       	cpc	r1, r20
    142e:	05 06       	cpc	r0, r21
    1430:	08 95       	ret

00001432 <__fp_round>:
    1432:	09 2e       	mov	r0, r25
    1434:	03 94       	inc	r0
    1436:	00 0c       	add	r0, r0
    1438:	11 f4       	brne	.+4      	; 0x143e <__fp_round+0xc>
    143a:	88 23       	and	r24, r24
    143c:	52 f0       	brmi	.+20     	; 0x1452 <__fp_round+0x20>
    143e:	bb 0f       	add	r27, r27
    1440:	40 f4       	brcc	.+16     	; 0x1452 <__fp_round+0x20>
    1442:	bf 2b       	or	r27, r31
    1444:	11 f4       	brne	.+4      	; 0x144a <__fp_round+0x18>
    1446:	60 ff       	sbrs	r22, 0
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <__fp_round+0x20>
    144a:	6f 5f       	subi	r22, 0xFF	; 255
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	8f 4f       	sbci	r24, 0xFF	; 255
    1450:	9f 4f       	sbci	r25, 0xFF	; 255
    1452:	08 95       	ret

00001454 <__fp_split3>:
    1454:	57 fd       	sbrc	r21, 7
    1456:	90 58       	subi	r25, 0x80	; 128
    1458:	44 0f       	add	r20, r20
    145a:	55 1f       	adc	r21, r21
    145c:	59 f0       	breq	.+22     	; 0x1474 <__fp_splitA+0x10>
    145e:	5f 3f       	cpi	r21, 0xFF	; 255
    1460:	71 f0       	breq	.+28     	; 0x147e <__fp_splitA+0x1a>
    1462:	47 95       	ror	r20

00001464 <__fp_splitA>:
    1464:	88 0f       	add	r24, r24
    1466:	97 fb       	bst	r25, 7
    1468:	99 1f       	adc	r25, r25
    146a:	61 f0       	breq	.+24     	; 0x1484 <__fp_splitA+0x20>
    146c:	9f 3f       	cpi	r25, 0xFF	; 255
    146e:	79 f0       	breq	.+30     	; 0x148e <__fp_splitA+0x2a>
    1470:	87 95       	ror	r24
    1472:	08 95       	ret
    1474:	12 16       	cp	r1, r18
    1476:	13 06       	cpc	r1, r19
    1478:	14 06       	cpc	r1, r20
    147a:	55 1f       	adc	r21, r21
    147c:	f2 cf       	rjmp	.-28     	; 0x1462 <__fp_split3+0xe>
    147e:	46 95       	lsr	r20
    1480:	f1 df       	rcall	.-30     	; 0x1464 <__fp_splitA>
    1482:	08 c0       	rjmp	.+16     	; 0x1494 <__fp_splitA+0x30>
    1484:	16 16       	cp	r1, r22
    1486:	17 06       	cpc	r1, r23
    1488:	18 06       	cpc	r1, r24
    148a:	99 1f       	adc	r25, r25
    148c:	f1 cf       	rjmp	.-30     	; 0x1470 <__fp_splitA+0xc>
    148e:	86 95       	lsr	r24
    1490:	71 05       	cpc	r23, r1
    1492:	61 05       	cpc	r22, r1
    1494:	08 94       	sec
    1496:	08 95       	ret

00001498 <__fp_zero>:
    1498:	e8 94       	clt

0000149a <__fp_szero>:
    149a:	bb 27       	eor	r27, r27
    149c:	66 27       	eor	r22, r22
    149e:	77 27       	eor	r23, r23
    14a0:	cb 01       	movw	r24, r22
    14a2:	97 f9       	bld	r25, 7
    14a4:	08 95       	ret

000014a6 <__gesf2>:
    14a6:	8a df       	rcall	.-236    	; 0x13bc <__fp_cmp>
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <__gesf2+0x6>
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	08 95       	ret

000014ae <__mulsf3>:
    14ae:	0b d0       	rcall	.+22     	; 0x14c6 <__mulsf3x>
    14b0:	c0 cf       	rjmp	.-128    	; 0x1432 <__fp_round>
    14b2:	b1 df       	rcall	.-158    	; 0x1416 <__fp_pscA>
    14b4:	28 f0       	brcs	.+10     	; 0x14c0 <__mulsf3+0x12>
    14b6:	b6 df       	rcall	.-148    	; 0x1424 <__fp_pscB>
    14b8:	18 f0       	brcs	.+6      	; 0x14c0 <__mulsf3+0x12>
    14ba:	95 23       	and	r25, r21
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <__mulsf3+0x12>
    14be:	a2 cf       	rjmp	.-188    	; 0x1404 <__fp_inf>
    14c0:	a7 cf       	rjmp	.-178    	; 0x1410 <__fp_nan>
    14c2:	11 24       	eor	r1, r1
    14c4:	ea cf       	rjmp	.-44     	; 0x149a <__fp_szero>

000014c6 <__mulsf3x>:
    14c6:	c6 df       	rcall	.-116    	; 0x1454 <__fp_split3>
    14c8:	a0 f3       	brcs	.-24     	; 0x14b2 <__mulsf3+0x4>

000014ca <__mulsf3_pse>:
    14ca:	95 9f       	mul	r25, r21
    14cc:	d1 f3       	breq	.-12     	; 0x14c2 <__mulsf3+0x14>
    14ce:	95 0f       	add	r25, r21
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	55 1f       	adc	r21, r21
    14d4:	62 9f       	mul	r22, r18
    14d6:	f0 01       	movw	r30, r0
    14d8:	72 9f       	mul	r23, r18
    14da:	bb 27       	eor	r27, r27
    14dc:	f0 0d       	add	r31, r0
    14de:	b1 1d       	adc	r27, r1
    14e0:	63 9f       	mul	r22, r19
    14e2:	aa 27       	eor	r26, r26
    14e4:	f0 0d       	add	r31, r0
    14e6:	b1 1d       	adc	r27, r1
    14e8:	aa 1f       	adc	r26, r26
    14ea:	64 9f       	mul	r22, r20
    14ec:	66 27       	eor	r22, r22
    14ee:	b0 0d       	add	r27, r0
    14f0:	a1 1d       	adc	r26, r1
    14f2:	66 1f       	adc	r22, r22
    14f4:	82 9f       	mul	r24, r18
    14f6:	22 27       	eor	r18, r18
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	62 1f       	adc	r22, r18
    14fe:	73 9f       	mul	r23, r19
    1500:	b0 0d       	add	r27, r0
    1502:	a1 1d       	adc	r26, r1
    1504:	62 1f       	adc	r22, r18
    1506:	83 9f       	mul	r24, r19
    1508:	a0 0d       	add	r26, r0
    150a:	61 1d       	adc	r22, r1
    150c:	22 1f       	adc	r18, r18
    150e:	74 9f       	mul	r23, r20
    1510:	33 27       	eor	r19, r19
    1512:	a0 0d       	add	r26, r0
    1514:	61 1d       	adc	r22, r1
    1516:	23 1f       	adc	r18, r19
    1518:	84 9f       	mul	r24, r20
    151a:	60 0d       	add	r22, r0
    151c:	21 1d       	adc	r18, r1
    151e:	82 2f       	mov	r24, r18
    1520:	76 2f       	mov	r23, r22
    1522:	6a 2f       	mov	r22, r26
    1524:	11 24       	eor	r1, r1
    1526:	9f 57       	subi	r25, 0x7F	; 127
    1528:	50 40       	sbci	r21, 0x00	; 0
    152a:	8a f0       	brmi	.+34     	; 0x154e <__mulsf3_pse+0x84>
    152c:	e1 f0       	breq	.+56     	; 0x1566 <__mulsf3_pse+0x9c>
    152e:	88 23       	and	r24, r24
    1530:	4a f0       	brmi	.+18     	; 0x1544 <__mulsf3_pse+0x7a>
    1532:	ee 0f       	add	r30, r30
    1534:	ff 1f       	adc	r31, r31
    1536:	bb 1f       	adc	r27, r27
    1538:	66 1f       	adc	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	50 40       	sbci	r21, 0x00	; 0
    1542:	a9 f7       	brne	.-22     	; 0x152e <__mulsf3_pse+0x64>
    1544:	9e 3f       	cpi	r25, 0xFE	; 254
    1546:	51 05       	cpc	r21, r1
    1548:	70 f0       	brcs	.+28     	; 0x1566 <__mulsf3_pse+0x9c>
    154a:	5c cf       	rjmp	.-328    	; 0x1404 <__fp_inf>
    154c:	a6 cf       	rjmp	.-180    	; 0x149a <__fp_szero>
    154e:	5f 3f       	cpi	r21, 0xFF	; 255
    1550:	ec f3       	brlt	.-6      	; 0x154c <__mulsf3_pse+0x82>
    1552:	98 3e       	cpi	r25, 0xE8	; 232
    1554:	dc f3       	brlt	.-10     	; 0x154c <__mulsf3_pse+0x82>
    1556:	86 95       	lsr	r24
    1558:	77 95       	ror	r23
    155a:	67 95       	ror	r22
    155c:	b7 95       	ror	r27
    155e:	f7 95       	ror	r31
    1560:	e7 95       	ror	r30
    1562:	9f 5f       	subi	r25, 0xFF	; 255
    1564:	c1 f7       	brne	.-16     	; 0x1556 <__mulsf3_pse+0x8c>
    1566:	fe 2b       	or	r31, r30
    1568:	88 0f       	add	r24, r24
    156a:	91 1d       	adc	r25, r1
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	97 f9       	bld	r25, 7
    1572:	08 95       	ret

00001574 <__divmodsi4>:
    1574:	05 2e       	mov	r0, r21
    1576:	97 fb       	bst	r25, 7
    1578:	1e f4       	brtc	.+6      	; 0x1580 <__divmodsi4+0xc>
    157a:	00 94       	com	r0
    157c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__negsi2>
    1580:	57 fd       	sbrc	r21, 7
    1582:	07 d0       	rcall	.+14     	; 0x1592 <__divmodsi4_neg2>
    1584:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__udivmodsi4>
    1588:	07 fc       	sbrc	r0, 7
    158a:	03 d0       	rcall	.+6      	; 0x1592 <__divmodsi4_neg2>
    158c:	4e f4       	brtc	.+18     	; 0x15a0 <__divmodsi4_exit>
    158e:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__negsi2>

00001592 <__divmodsi4_neg2>:
    1592:	50 95       	com	r21
    1594:	40 95       	com	r20
    1596:	30 95       	com	r19
    1598:	21 95       	neg	r18
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	4f 4f       	sbci	r20, 0xFF	; 255
    159e:	5f 4f       	sbci	r21, 0xFF	; 255

000015a0 <__divmodsi4_exit>:
    15a0:	08 95       	ret

000015a2 <__negsi2>:
    15a2:	90 95       	com	r25
    15a4:	80 95       	com	r24
    15a6:	70 95       	com	r23
    15a8:	61 95       	neg	r22
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	8f 4f       	sbci	r24, 0xFF	; 255
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	08 95       	ret

000015b2 <__tablejump2__>:
    15b2:	ee 0f       	add	r30, r30
    15b4:	ff 1f       	adc	r31, r31

000015b6 <__tablejump__>:
    15b6:	05 90       	lpm	r0, Z+
    15b8:	f4 91       	lpm	r31, Z
    15ba:	e0 2d       	mov	r30, r0
    15bc:	09 94       	ijmp

000015be <__adddi3_s8>:
    15be:	00 24       	eor	r0, r0
    15c0:	a7 fd       	sbrc	r26, 7
    15c2:	00 94       	com	r0
    15c4:	2a 0f       	add	r18, r26
    15c6:	30 1d       	adc	r19, r0
    15c8:	40 1d       	adc	r20, r0
    15ca:	50 1d       	adc	r21, r0
    15cc:	60 1d       	adc	r22, r0
    15ce:	70 1d       	adc	r23, r0
    15d0:	80 1d       	adc	r24, r0
    15d2:	90 1d       	adc	r25, r0
    15d4:	08 95       	ret

000015d6 <__subdi3>:
    15d6:	2a 19       	sub	r18, r10
    15d8:	3b 09       	sbc	r19, r11
    15da:	4c 09       	sbc	r20, r12
    15dc:	5d 09       	sbc	r21, r13
    15de:	6e 09       	sbc	r22, r14
    15e0:	7f 09       	sbc	r23, r15
    15e2:	80 0b       	sbc	r24, r16
    15e4:	91 0b       	sbc	r25, r17
    15e6:	08 95       	ret

000015e8 <__cmpdi2>:
    15e8:	2a 15       	cp	r18, r10
    15ea:	3b 05       	cpc	r19, r11
    15ec:	4c 05       	cpc	r20, r12
    15ee:	5d 05       	cpc	r21, r13
    15f0:	6e 05       	cpc	r22, r14
    15f2:	7f 05       	cpc	r23, r15
    15f4:	80 07       	cpc	r24, r16
    15f6:	91 07       	cpc	r25, r17
    15f8:	08 95       	ret

000015fa <__udivmodsi4>:
    15fa:	a1 e2       	ldi	r26, 0x21	; 33
    15fc:	1a 2e       	mov	r1, r26
    15fe:	aa 1b       	sub	r26, r26
    1600:	bb 1b       	sub	r27, r27
    1602:	fd 01       	movw	r30, r26
    1604:	0d c0       	rjmp	.+26     	; 0x1620 <__udivmodsi4_ep>

00001606 <__udivmodsi4_loop>:
    1606:	aa 1f       	adc	r26, r26
    1608:	bb 1f       	adc	r27, r27
    160a:	ee 1f       	adc	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	a2 17       	cp	r26, r18
    1610:	b3 07       	cpc	r27, r19
    1612:	e4 07       	cpc	r30, r20
    1614:	f5 07       	cpc	r31, r21
    1616:	20 f0       	brcs	.+8      	; 0x1620 <__udivmodsi4_ep>
    1618:	a2 1b       	sub	r26, r18
    161a:	b3 0b       	sbc	r27, r19
    161c:	e4 0b       	sbc	r30, r20
    161e:	f5 0b       	sbc	r31, r21

00001620 <__udivmodsi4_ep>:
    1620:	66 1f       	adc	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	88 1f       	adc	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	1a 94       	dec	r1
    162a:	69 f7       	brne	.-38     	; 0x1606 <__udivmodsi4_loop>
    162c:	60 95       	com	r22
    162e:	70 95       	com	r23
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	9b 01       	movw	r18, r22
    1636:	ac 01       	movw	r20, r24
    1638:	bd 01       	movw	r22, r26
    163a:	cf 01       	movw	r24, r30
    163c:	08 95       	ret

0000163e <dtostrf>:
    163e:	ef 92       	push	r14
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	e8 01       	movw	r28, r16
    164a:	47 ff       	sbrs	r20, 7
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <dtostrf+0x14>
    164e:	34 e1       	ldi	r19, 0x14	; 20
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <dtostrf+0x16>
    1652:	34 e0       	ldi	r19, 0x04	; 4
    1654:	e4 2f       	mov	r30, r20
    1656:	ff 27       	eor	r31, r31
    1658:	e7 fd       	sbrc	r30, 7
    165a:	f0 95       	com	r31
    165c:	f7 ff       	sbrs	r31, 7
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <dtostrf+0x28>
    1660:	f1 95       	neg	r31
    1662:	e1 95       	neg	r30
    1664:	f1 09       	sbc	r31, r1
    1666:	e3 2e       	mov	r14, r19
    1668:	02 2f       	mov	r16, r18
    166a:	2e 2f       	mov	r18, r30
    166c:	ae 01       	movw	r20, r28
    166e:	0e 94 44 0b 	call	0x1688	; 0x1688 <dtoa_prf>
    1672:	ce 01       	movw	r24, r28
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ef 90       	pop	r14
    167e:	08 95       	ret

00001680 <atof>:
    1680:	66 27       	eor	r22, r22
    1682:	77 27       	eor	r23, r23
    1684:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <strtod>

00001688 <dtoa_prf>:
    1688:	6f 92       	push	r6
    168a:	7f 92       	push	r7
    168c:	9f 92       	push	r9
    168e:	af 92       	push	r10
    1690:	bf 92       	push	r11
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	29 97       	sbiw	r28, 0x09	; 9
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	6a 01       	movw	r12, r20
    16b4:	b2 2e       	mov	r11, r18
    16b6:	10 2f       	mov	r17, r16
    16b8:	0c 33       	cpi	r16, 0x3C	; 60
    16ba:	20 f4       	brcc	.+8      	; 0x16c4 <dtoa_prf+0x3c>
    16bc:	ff 24       	eor	r15, r15
    16be:	f3 94       	inc	r15
    16c0:	f0 0e       	add	r15, r16
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <dtoa_prf+0x40>
    16c4:	4c e3       	ldi	r20, 0x3C	; 60
    16c6:	f4 2e       	mov	r15, r20
    16c8:	0f 2d       	mov	r16, r15
    16ca:	27 e0       	ldi	r18, 0x07	; 7
    16cc:	ae 01       	movw	r20, r28
    16ce:	4f 5f       	subi	r20, 0xFF	; 255
    16d0:	5f 4f       	sbci	r21, 0xFF	; 255
    16d2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__ftoa_engine>
    16d6:	79 81       	ldd	r23, Y+1	; 0x01
    16d8:	27 2f       	mov	r18, r23
    16da:	29 70       	andi	r18, 0x09	; 9
    16dc:	21 30       	cpi	r18, 0x01	; 1
    16de:	31 f0       	breq	.+12     	; 0x16ec <dtoa_prf+0x64>
    16e0:	e1 fc       	sbrc	r14, 1
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <dtoa_prf+0x68>
    16e4:	e0 fc       	sbrc	r14, 0
    16e6:	06 c0       	rjmp	.+12     	; 0x16f4 <dtoa_prf+0x6c>
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <dtoa_prf+0x6e>
    16ec:	6d e2       	ldi	r22, 0x2D	; 45
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <dtoa_prf+0x6e>
    16f0:	6b e2       	ldi	r22, 0x2B	; 43
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <dtoa_prf+0x6e>
    16f4:	60 e2       	ldi	r22, 0x20	; 32
    16f6:	ae 2d       	mov	r26, r14
    16f8:	a0 71       	andi	r26, 0x10	; 16
    16fa:	73 ff       	sbrs	r23, 3
    16fc:	36 c0       	rjmp	.+108    	; 0x176a <dtoa_prf+0xe2>
    16fe:	66 23       	and	r22, r22
    1700:	11 f0       	breq	.+4      	; 0x1706 <dtoa_prf+0x7e>
    1702:	84 e0       	ldi	r24, 0x04	; 4
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <dtoa_prf+0x80>
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	8b 15       	cp	r24, r11
    170a:	10 f4       	brcc	.+4      	; 0x1710 <dtoa_prf+0x88>
    170c:	b8 1a       	sub	r11, r24
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <dtoa_prf+0x8a>
    1710:	b1 2c       	mov	r11, r1
    1712:	a1 11       	cpse	r26, r1
    1714:	0b c0       	rjmp	.+22     	; 0x172c <dtoa_prf+0xa4>
    1716:	f6 01       	movw	r30, r12
    1718:	8b 2d       	mov	r24, r11
    171a:	90 e2       	ldi	r25, 0x20	; 32
    171c:	88 23       	and	r24, r24
    171e:	19 f0       	breq	.+6      	; 0x1726 <dtoa_prf+0x9e>
    1720:	91 93       	st	Z+, r25
    1722:	81 50       	subi	r24, 0x01	; 1
    1724:	fb cf       	rjmp	.-10     	; 0x171c <dtoa_prf+0x94>
    1726:	cb 0c       	add	r12, r11
    1728:	d1 1c       	adc	r13, r1
    172a:	b1 2c       	mov	r11, r1
    172c:	66 23       	and	r22, r22
    172e:	31 f0       	breq	.+12     	; 0x173c <dtoa_prf+0xb4>
    1730:	f6 01       	movw	r30, r12
    1732:	60 83       	st	Z, r22
    1734:	96 01       	movw	r18, r12
    1736:	2f 5f       	subi	r18, 0xFF	; 255
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	69 01       	movw	r12, r18
    173c:	c6 01       	movw	r24, r12
    173e:	03 96       	adiw	r24, 0x03	; 3
    1740:	e2 fe       	sbrs	r14, 2
    1742:	05 c0       	rjmp	.+10     	; 0x174e <dtoa_prf+0xc6>
    1744:	2e e4       	ldi	r18, 0x4E	; 78
    1746:	f6 01       	movw	r30, r12
    1748:	20 83       	st	Z, r18
    174a:	31 e4       	ldi	r19, 0x41	; 65
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <dtoa_prf+0xce>
    174e:	2e e6       	ldi	r18, 0x6E	; 110
    1750:	f6 01       	movw	r30, r12
    1752:	20 83       	st	Z, r18
    1754:	31 e6       	ldi	r19, 0x61	; 97
    1756:	31 83       	std	Z+1, r19	; 0x01
    1758:	22 83       	std	Z+2, r18	; 0x02
    175a:	fc 01       	movw	r30, r24
    175c:	2b 2d       	mov	r18, r11
    175e:	30 e2       	ldi	r19, 0x20	; 32
    1760:	22 23       	and	r18, r18
    1762:	f1 f1       	breq	.+124    	; 0x17e0 <dtoa_prf+0x158>
    1764:	31 93       	st	Z+, r19
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	fb cf       	rjmp	.-10     	; 0x1760 <dtoa_prf+0xd8>
    176a:	72 ff       	sbrs	r23, 2
    176c:	40 c0       	rjmp	.+128    	; 0x17ee <dtoa_prf+0x166>
    176e:	66 23       	and	r22, r22
    1770:	11 f0       	breq	.+4      	; 0x1776 <dtoa_prf+0xee>
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <dtoa_prf+0xf0>
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	8b 15       	cp	r24, r11
    177a:	10 f4       	brcc	.+4      	; 0x1780 <dtoa_prf+0xf8>
    177c:	b8 1a       	sub	r11, r24
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <dtoa_prf+0xfa>
    1780:	b1 2c       	mov	r11, r1
    1782:	a1 11       	cpse	r26, r1
    1784:	0b c0       	rjmp	.+22     	; 0x179c <dtoa_prf+0x114>
    1786:	f6 01       	movw	r30, r12
    1788:	8b 2d       	mov	r24, r11
    178a:	90 e2       	ldi	r25, 0x20	; 32
    178c:	88 23       	and	r24, r24
    178e:	19 f0       	breq	.+6      	; 0x1796 <dtoa_prf+0x10e>
    1790:	91 93       	st	Z+, r25
    1792:	81 50       	subi	r24, 0x01	; 1
    1794:	fb cf       	rjmp	.-10     	; 0x178c <dtoa_prf+0x104>
    1796:	cb 0c       	add	r12, r11
    1798:	d1 1c       	adc	r13, r1
    179a:	b1 2c       	mov	r11, r1
    179c:	66 23       	and	r22, r22
    179e:	31 f0       	breq	.+12     	; 0x17ac <dtoa_prf+0x124>
    17a0:	f6 01       	movw	r30, r12
    17a2:	60 83       	st	Z, r22
    17a4:	96 01       	movw	r18, r12
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	69 01       	movw	r12, r18
    17ac:	c6 01       	movw	r24, r12
    17ae:	03 96       	adiw	r24, 0x03	; 3
    17b0:	e2 fe       	sbrs	r14, 2
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <dtoa_prf+0x13a>
    17b4:	29 e4       	ldi	r18, 0x49	; 73
    17b6:	f6 01       	movw	r30, r12
    17b8:	20 83       	st	Z, r18
    17ba:	2e e4       	ldi	r18, 0x4E	; 78
    17bc:	21 83       	std	Z+1, r18	; 0x01
    17be:	26 e4       	ldi	r18, 0x46	; 70
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <dtoa_prf+0x146>
    17c2:	29 e6       	ldi	r18, 0x69	; 105
    17c4:	f6 01       	movw	r30, r12
    17c6:	20 83       	st	Z, r18
    17c8:	2e e6       	ldi	r18, 0x6E	; 110
    17ca:	21 83       	std	Z+1, r18	; 0x01
    17cc:	26 e6       	ldi	r18, 0x66	; 102
    17ce:	22 83       	std	Z+2, r18	; 0x02
    17d0:	fc 01       	movw	r30, r24
    17d2:	2b 2d       	mov	r18, r11
    17d4:	30 e2       	ldi	r19, 0x20	; 32
    17d6:	22 23       	and	r18, r18
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <dtoa_prf+0x158>
    17da:	31 93       	st	Z+, r19
    17dc:	21 50       	subi	r18, 0x01	; 1
    17de:	fb cf       	rjmp	.-10     	; 0x17d6 <dtoa_prf+0x14e>
    17e0:	fc 01       	movw	r30, r24
    17e2:	eb 0d       	add	r30, r11
    17e4:	f1 1d       	adc	r31, r1
    17e6:	10 82       	st	Z, r1
    17e8:	8e ef       	ldi	r24, 0xFE	; 254
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	b7 c0       	rjmp	.+366    	; 0x195c <dtoa_prf+0x2d4>
    17ee:	b1 e0       	ldi	r27, 0x01	; 1
    17f0:	61 11       	cpse	r22, r1
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <dtoa_prf+0x16e>
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	4b 2f       	mov	r20, r27
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	18 16       	cp	r1, r24
    17fc:	19 06       	cpc	r1, r25
    17fe:	24 f4       	brge	.+8      	; 0x1808 <dtoa_prf+0x180>
    1800:	9c 01       	movw	r18, r24
    1802:	2f 5f       	subi	r18, 0xFF	; 255
    1804:	3f 4f       	sbci	r19, 0xFF	; 255
    1806:	02 c0       	rjmp	.+4      	; 0x180c <dtoa_prf+0x184>
    1808:	21 e0       	ldi	r18, 0x01	; 1
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	24 0f       	add	r18, r20
    180e:	35 1f       	adc	r19, r21
    1810:	11 23       	and	r17, r17
    1812:	29 f0       	breq	.+10     	; 0x181e <dtoa_prf+0x196>
    1814:	41 2f       	mov	r20, r17
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	4f 5f       	subi	r20, 0xFF	; 255
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <dtoa_prf+0x19a>
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	42 0f       	add	r20, r18
    1824:	53 1f       	adc	r21, r19
    1826:	2b 2d       	mov	r18, r11
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	42 17       	cp	r20, r18
    182c:	53 07       	cpc	r21, r19
    182e:	14 f4       	brge	.+4      	; 0x1834 <dtoa_prf+0x1ac>
    1830:	b4 1a       	sub	r11, r20
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <dtoa_prf+0x1ae>
    1834:	b1 2c       	mov	r11, r1
    1836:	2e 2d       	mov	r18, r14
    1838:	28 71       	andi	r18, 0x18	; 24
    183a:	59 f4       	brne	.+22     	; 0x1852 <dtoa_prf+0x1ca>
    183c:	f6 01       	movw	r30, r12
    183e:	2b 2d       	mov	r18, r11
    1840:	30 e2       	ldi	r19, 0x20	; 32
    1842:	22 23       	and	r18, r18
    1844:	19 f0       	breq	.+6      	; 0x184c <dtoa_prf+0x1c4>
    1846:	31 93       	st	Z+, r19
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	fb cf       	rjmp	.-10     	; 0x1842 <dtoa_prf+0x1ba>
    184c:	cb 0c       	add	r12, r11
    184e:	d1 1c       	adc	r13, r1
    1850:	b1 2c       	mov	r11, r1
    1852:	bb 23       	and	r27, r27
    1854:	31 f0       	breq	.+12     	; 0x1862 <dtoa_prf+0x1da>
    1856:	f6 01       	movw	r30, r12
    1858:	60 83       	st	Z, r22
    185a:	96 01       	movw	r18, r12
    185c:	2f 5f       	subi	r18, 0xFF	; 255
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	69 01       	movw	r12, r18
    1862:	a1 11       	cpse	r26, r1
    1864:	0b c0       	rjmp	.+22     	; 0x187c <dtoa_prf+0x1f4>
    1866:	f6 01       	movw	r30, r12
    1868:	2b 2d       	mov	r18, r11
    186a:	30 e3       	ldi	r19, 0x30	; 48
    186c:	22 23       	and	r18, r18
    186e:	19 f0       	breq	.+6      	; 0x1876 <dtoa_prf+0x1ee>
    1870:	31 93       	st	Z+, r19
    1872:	21 50       	subi	r18, 0x01	; 1
    1874:	fb cf       	rjmp	.-10     	; 0x186c <dtoa_prf+0x1e4>
    1876:	cb 0c       	add	r12, r11
    1878:	d1 1c       	adc	r13, r1
    187a:	b1 2c       	mov	r11, r1
    187c:	f8 0e       	add	r15, r24
    187e:	0a 81       	ldd	r16, Y+2	; 0x02
    1880:	37 2f       	mov	r19, r23
    1882:	30 71       	andi	r19, 0x10	; 16
    1884:	a3 2e       	mov	r10, r19
    1886:	74 ff       	sbrs	r23, 4
    1888:	03 c0       	rjmp	.+6      	; 0x1890 <dtoa_prf+0x208>
    188a:	01 33       	cpi	r16, 0x31	; 49
    188c:	09 f4       	brne	.+2      	; 0x1890 <dtoa_prf+0x208>
    188e:	fa 94       	dec	r15
    1890:	1f 14       	cp	r1, r15
    1892:	2c f4       	brge	.+10     	; 0x189e <dtoa_prf+0x216>
    1894:	2f 2d       	mov	r18, r15
    1896:	29 30       	cpi	r18, 0x09	; 9
    1898:	18 f0       	brcs	.+6      	; 0x18a0 <dtoa_prf+0x218>
    189a:	28 e0       	ldi	r18, 0x08	; 8
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <dtoa_prf+0x218>
    189e:	21 e0       	ldi	r18, 0x01	; 1
    18a0:	68 2f       	mov	r22, r24
    18a2:	39 2f       	mov	r19, r25
    18a4:	97 ff       	sbrs	r25, 7
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <dtoa_prf+0x224>
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	46 2f       	mov	r20, r22
    18ae:	53 2f       	mov	r21, r19
    18b0:	61 2c       	mov	r6, r1
    18b2:	71 2c       	mov	r7, r1
    18b4:	3e e2       	ldi	r19, 0x2E	; 46
    18b6:	93 2e       	mov	r9, r19
    18b8:	bc 01       	movw	r22, r24
    18ba:	62 1b       	sub	r22, r18
    18bc:	71 09       	sbc	r23, r1
    18be:	9b 01       	movw	r18, r22
    18c0:	dc 01       	movw	r26, r24
    18c2:	a4 1b       	sub	r26, r20
    18c4:	b5 0b       	sbc	r27, r21
    18c6:	e1 e0       	ldi	r30, 0x01	; 1
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	ec 0f       	add	r30, r28
    18cc:	fd 1f       	adc	r31, r29
    18ce:	ae 0f       	add	r26, r30
    18d0:	bf 1f       	adc	r27, r31
    18d2:	e1 2e       	mov	r14, r17
    18d4:	f1 2c       	mov	r15, r1
    18d6:	f1 94       	neg	r15
    18d8:	e1 94       	neg	r14
    18da:	f1 08       	sbc	r15, r1
    18dc:	4f 3f       	cpi	r20, 0xFF	; 255
    18de:	ff ef       	ldi	r31, 0xFF	; 255
    18e0:	5f 07       	cpc	r21, r31
    18e2:	31 f4       	brne	.+12     	; 0x18f0 <dtoa_prf+0x268>
    18e4:	f6 01       	movw	r30, r12
    18e6:	90 82       	st	Z, r9
    18e8:	b6 01       	movw	r22, r12
    18ea:	6f 5f       	subi	r22, 0xFF	; 255
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	6b 01       	movw	r12, r22
    18f0:	84 17       	cp	r24, r20
    18f2:	95 07       	cpc	r25, r21
    18f4:	4c f0       	brlt	.+18     	; 0x1908 <dtoa_prf+0x280>
    18f6:	24 17       	cp	r18, r20
    18f8:	35 07       	cpc	r19, r21
    18fa:	34 f4       	brge	.+12     	; 0x1908 <dtoa_prf+0x280>
    18fc:	bd 01       	movw	r22, r26
    18fe:	66 0d       	add	r22, r6
    1900:	77 1d       	adc	r23, r7
    1902:	fb 01       	movw	r30, r22
    1904:	11 81       	ldd	r17, Z+1	; 0x01
    1906:	01 c0       	rjmp	.+2      	; 0x190a <dtoa_prf+0x282>
    1908:	10 e3       	ldi	r17, 0x30	; 48
    190a:	41 50       	subi	r20, 0x01	; 1
    190c:	51 09       	sbc	r21, r1
    190e:	ff ef       	ldi	r31, 0xFF	; 255
    1910:	6f 1a       	sub	r6, r31
    1912:	7f 0a       	sbc	r7, r31
    1914:	b6 01       	movw	r22, r12
    1916:	6f 5f       	subi	r22, 0xFF	; 255
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	4e 15       	cp	r20, r14
    191c:	5f 05       	cpc	r21, r15
    191e:	24 f0       	brlt	.+8      	; 0x1928 <dtoa_prf+0x2a0>
    1920:	f6 01       	movw	r30, r12
    1922:	10 83       	st	Z, r17
    1924:	6b 01       	movw	r12, r22
    1926:	da cf       	rjmp	.-76     	; 0x18dc <dtoa_prf+0x254>
    1928:	48 17       	cp	r20, r24
    192a:	59 07       	cpc	r21, r25
    192c:	39 f4       	brne	.+14     	; 0x193c <dtoa_prf+0x2b4>
    192e:	06 33       	cpi	r16, 0x36	; 54
    1930:	20 f4       	brcc	.+8      	; 0x193a <dtoa_prf+0x2b2>
    1932:	05 33       	cpi	r16, 0x35	; 53
    1934:	19 f4       	brne	.+6      	; 0x193c <dtoa_prf+0x2b4>
    1936:	a1 10       	cpse	r10, r1
    1938:	01 c0       	rjmp	.+2      	; 0x193c <dtoa_prf+0x2b4>
    193a:	11 e3       	ldi	r17, 0x31	; 49
    193c:	f6 01       	movw	r30, r12
    193e:	10 83       	st	Z, r17
    1940:	fb 01       	movw	r30, r22
    1942:	8b 2d       	mov	r24, r11
    1944:	90 e2       	ldi	r25, 0x20	; 32
    1946:	88 23       	and	r24, r24
    1948:	19 f0       	breq	.+6      	; 0x1950 <dtoa_prf+0x2c8>
    194a:	91 93       	st	Z+, r25
    194c:	81 50       	subi	r24, 0x01	; 1
    194e:	fb cf       	rjmp	.-10     	; 0x1946 <dtoa_prf+0x2be>
    1950:	fb 01       	movw	r30, r22
    1952:	eb 0d       	add	r30, r11
    1954:	f1 1d       	adc	r31, r1
    1956:	10 82       	st	Z, r1
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	29 96       	adiw	r28, 0x09	; 9
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	9f 90       	pop	r9
    197e:	7f 90       	pop	r7
    1980:	6f 90       	pop	r6
    1982:	08 95       	ret

00001984 <strtod>:
    1984:	a0 e0       	ldi	r26, 0x00	; 0
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e8 ec       	ldi	r30, 0xC8	; 200
    198a:	fc e0       	ldi	r31, 0x0C	; 12
    198c:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__prologue_saves__+0xc>
    1990:	8b 01       	movw	r16, r22
    1992:	61 15       	cp	r22, r1
    1994:	71 05       	cpc	r23, r1
    1996:	21 f0       	breq	.+8      	; 0x19a0 <strtod+0x1c>
    1998:	db 01       	movw	r26, r22
    199a:	8c 93       	st	X, r24
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	9c 93       	st	X, r25
    19a0:	ec 01       	movw	r28, r24
    19a2:	5e 01       	movw	r10, r28
    19a4:	bf ef       	ldi	r27, 0xFF	; 255
    19a6:	ab 1a       	sub	r10, r27
    19a8:	bb 0a       	sbc	r11, r27
    19aa:	75 01       	movw	r14, r10
    19ac:	c8 80       	ld	r12, Y
    19ae:	8c 2d       	mov	r24, r12
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <isspace>
    19b6:	89 2b       	or	r24, r25
    19b8:	11 f0       	breq	.+4      	; 0x19be <strtod+0x3a>
    19ba:	e5 01       	movw	r28, r10
    19bc:	f2 cf       	rjmp	.-28     	; 0x19a2 <strtod+0x1e>
    19be:	ed e2       	ldi	r30, 0x2D	; 45
    19c0:	ce 12       	cpse	r12, r30
    19c2:	08 c0       	rjmp	.+16     	; 0x19d4 <strtod+0x50>
    19c4:	7e 01       	movw	r14, r28
    19c6:	f2 e0       	ldi	r31, 0x02	; 2
    19c8:	ef 0e       	add	r14, r31
    19ca:	f1 1c       	adc	r15, r1
    19cc:	c9 80       	ldd	r12, Y+1	; 0x01
    19ce:	dd 24       	eor	r13, r13
    19d0:	d3 94       	inc	r13
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <strtod+0x62>
    19d4:	2b e2       	ldi	r18, 0x2B	; 43
    19d6:	c2 12       	cpse	r12, r18
    19d8:	05 c0       	rjmp	.+10     	; 0x19e4 <strtod+0x60>
    19da:	7e 01       	movw	r14, r28
    19dc:	42 e0       	ldi	r20, 0x02	; 2
    19de:	e4 0e       	add	r14, r20
    19e0:	f1 1c       	adc	r15, r1
    19e2:	c9 80       	ldd	r12, Y+1	; 0x01
    19e4:	d1 2c       	mov	r13, r1
    19e6:	e7 01       	movw	r28, r14
    19e8:	21 97       	sbiw	r28, 0x01	; 1
    19ea:	43 e0       	ldi	r20, 0x03	; 3
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	60 e8       	ldi	r22, 0x80	; 128
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	ce 01       	movw	r24, r28
    19f4:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <strncasecmp_P>
    19f8:	89 2b       	or	r24, r25
    19fa:	c1 f4       	brne	.+48     	; 0x1a2c <strtod+0xa8>
    19fc:	23 96       	adiw	r28, 0x03	; 3
    19fe:	45 e0       	ldi	r20, 0x05	; 5
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	6b e7       	ldi	r22, 0x7B	; 123
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	ce 01       	movw	r24, r28
    1a08:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <strncasecmp_P>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <strtod+0x8e>
    1a10:	25 96       	adiw	r28, 0x05	; 5
    1a12:	01 15       	cp	r16, r1
    1a14:	11 05       	cpc	r17, r1
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <strtod+0x9a>
    1a18:	d8 01       	movw	r26, r16
    1a1a:	cd 93       	st	X+, r28
    1a1c:	dc 93       	st	X, r29
    1a1e:	d1 10       	cpse	r13, r1
    1a20:	06 c1       	rjmp	.+524    	; 0x1c2e <strtod+0x2aa>
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	80 e8       	ldi	r24, 0x80	; 128
    1a28:	9f e7       	ldi	r25, 0x7F	; 127
    1a2a:	0a c1       	rjmp	.+532    	; 0x1c40 <strtod+0x2bc>
    1a2c:	43 e0       	ldi	r20, 0x03	; 3
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	68 e7       	ldi	r22, 0x78	; 120
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	ce 01       	movw	r24, r28
    1a36:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <strncasecmp_P>
    1a3a:	89 2b       	or	r24, r25
    1a3c:	59 f4       	brne	.+22     	; 0x1a54 <strtod+0xd0>
    1a3e:	01 15       	cp	r16, r1
    1a40:	11 05       	cpc	r17, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <strtod+0xc2>
    1a44:	f9 c0       	rjmp	.+498    	; 0x1c38 <strtod+0x2b4>
    1a46:	b2 e0       	ldi	r27, 0x02	; 2
    1a48:	eb 0e       	add	r14, r27
    1a4a:	f1 1c       	adc	r15, r1
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	f1 82       	std	Z+1, r15	; 0x01
    1a50:	e0 82       	st	Z, r14
    1a52:	f2 c0       	rjmp	.+484    	; 0x1c38 <strtod+0x2b4>
    1a54:	f7 01       	movw	r30, r14
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	c0 e0       	ldi	r28, 0x00	; 0
    1a5e:	d0 e0       	ldi	r29, 0x00	; 0
    1a60:	7f 01       	movw	r14, r30
    1a62:	a0 ed       	ldi	r26, 0xD0	; 208
    1a64:	aa 2e       	mov	r10, r26
    1a66:	ac 0c       	add	r10, r12
    1a68:	29 e0       	ldi	r18, 0x09	; 9
    1a6a:	2a 15       	cp	r18, r10
    1a6c:	30 f1       	brcs	.+76     	; 0x1aba <strtod+0x136>
    1a6e:	4d 2d       	mov	r20, r13
    1a70:	42 60       	ori	r20, 0x02	; 2
    1a72:	b4 2e       	mov	r11, r20
    1a74:	2d 2d       	mov	r18, r13
    1a76:	28 70       	andi	r18, 0x08	; 8
    1a78:	d2 fe       	sbrs	r13, 2
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <strtod+0x100>
    1a7c:	21 11       	cpse	r18, r1
    1a7e:	25 c0       	rjmp	.+74     	; 0x1aca <strtod+0x146>
    1a80:	21 96       	adiw	r28, 0x01	; 1
    1a82:	23 c0       	rjmp	.+70     	; 0x1aca <strtod+0x146>
    1a84:	21 11       	cpse	r18, r1
    1a86:	21 97       	sbiw	r28, 0x01	; 1
    1a88:	a5 e0       	ldi	r26, 0x05	; 5
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	9b 01       	movw	r18, r22
    1a8e:	ac 01       	movw	r20, r24
    1a90:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__muluhisi3>
    1a94:	66 0f       	add	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	6a 0d       	add	r22, r10
    1a9e:	71 1d       	adc	r23, r1
    1aa0:	81 1d       	adc	r24, r1
    1aa2:	91 1d       	adc	r25, r1
    1aa4:	68 39       	cpi	r22, 0x98	; 152
    1aa6:	a9 e9       	ldi	r26, 0x99	; 153
    1aa8:	7a 07       	cpc	r23, r26
    1aaa:	8a 07       	cpc	r24, r26
    1aac:	a9 e1       	ldi	r26, 0x19	; 25
    1aae:	9a 07       	cpc	r25, r26
    1ab0:	60 f0       	brcs	.+24     	; 0x1aca <strtod+0x146>
    1ab2:	bd 2d       	mov	r27, r13
    1ab4:	b6 60       	ori	r27, 0x06	; 6
    1ab6:	bb 2e       	mov	r11, r27
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <strtod+0x146>
    1aba:	2e ef       	ldi	r18, 0xFE	; 254
    1abc:	a2 12       	cpse	r10, r18
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <strtod+0x150>
    1ac0:	d3 fc       	sbrc	r13, 3
    1ac2:	50 c0       	rjmp	.+160    	; 0x1b64 <strtod+0x1e0>
    1ac4:	4d 2d       	mov	r20, r13
    1ac6:	48 60       	ori	r20, 0x08	; 8
    1ac8:	b4 2e       	mov	r11, r20
    1aca:	31 96       	adiw	r30, 0x01	; 1
    1acc:	d7 01       	movw	r26, r14
    1ace:	cc 90       	ld	r12, X
    1ad0:	db 2c       	mov	r13, r11
    1ad2:	c6 cf       	rjmp	.-116    	; 0x1a60 <strtod+0xdc>
    1ad4:	2c 2d       	mov	r18, r12
    1ad6:	2f 7d       	andi	r18, 0xDF	; 223
    1ad8:	25 34       	cpi	r18, 0x45	; 69
    1ada:	09 f0       	breq	.+2      	; 0x1ade <strtod+0x15a>
    1adc:	43 c0       	rjmp	.+134    	; 0x1b64 <strtod+0x1e0>
    1ade:	a0 81       	ld	r26, Z
    1ae0:	ad 32       	cpi	r26, 0x2D	; 45
    1ae2:	41 f4       	brne	.+16     	; 0x1af4 <strtod+0x170>
    1ae4:	bd 2d       	mov	r27, r13
    1ae6:	b0 61       	ori	r27, 0x10	; 16
    1ae8:	db 2e       	mov	r13, r27
    1aea:	7f 01       	movw	r14, r30
    1aec:	22 e0       	ldi	r18, 0x02	; 2
    1aee:	e2 0e       	add	r14, r18
    1af0:	f1 1c       	adc	r15, r1
    1af2:	0c c0       	rjmp	.+24     	; 0x1b0c <strtod+0x188>
    1af4:	7f 01       	movw	r14, r30
    1af6:	ab 32       	cpi	r26, 0x2B	; 43
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <strtod+0x182>
    1afa:	4f ef       	ldi	r20, 0xFF	; 255
    1afc:	e4 1a       	sub	r14, r20
    1afe:	f4 0a       	sbc	r15, r20
    1b00:	21 e0       	ldi	r18, 0x01	; 1
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	06 c0       	rjmp	.+12     	; 0x1b12 <strtod+0x18e>
    1b06:	a2 e0       	ldi	r26, 0x02	; 2
    1b08:	ea 0e       	add	r14, r26
    1b0a:	f1 1c       	adc	r15, r1
    1b0c:	a1 81       	ldd	r26, Z+1	; 0x01
    1b0e:	22 e0       	ldi	r18, 0x02	; 2
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	a0 53       	subi	r26, 0x30	; 48
    1b14:	aa 30       	cpi	r26, 0x0A	; 10
    1b16:	18 f0       	brcs	.+6      	; 0x1b1e <strtod+0x19a>
    1b18:	e2 1a       	sub	r14, r18
    1b1a:	f3 0a       	sbc	r15, r19
    1b1c:	23 c0       	rjmp	.+70     	; 0x1b64 <strtod+0x1e0>
    1b1e:	f7 01       	movw	r30, r14
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	20 38       	cpi	r18, 0x80	; 128
    1b26:	bc e0       	ldi	r27, 0x0C	; 12
    1b28:	3b 07       	cpc	r19, r27
    1b2a:	5c f4       	brge	.+22     	; 0x1b42 <strtod+0x1be>
    1b2c:	a9 01       	movw	r20, r18
    1b2e:	44 0f       	add	r20, r20
    1b30:	55 1f       	adc	r21, r21
    1b32:	44 0f       	add	r20, r20
    1b34:	55 1f       	adc	r21, r21
    1b36:	24 0f       	add	r18, r20
    1b38:	35 1f       	adc	r19, r21
    1b3a:	22 0f       	add	r18, r18
    1b3c:	33 1f       	adc	r19, r19
    1b3e:	2a 0f       	add	r18, r26
    1b40:	31 1d       	adc	r19, r1
    1b42:	af 01       	movw	r20, r30
    1b44:	4f 5f       	subi	r20, 0xFF	; 255
    1b46:	5f 4f       	sbci	r21, 0xFF	; 255
    1b48:	7a 01       	movw	r14, r20
    1b4a:	a0 81       	ld	r26, Z
    1b4c:	a0 53       	subi	r26, 0x30	; 48
    1b4e:	aa 30       	cpi	r26, 0x0A	; 10
    1b50:	10 f4       	brcc	.+4      	; 0x1b56 <strtod+0x1d2>
    1b52:	fa 01       	movw	r30, r20
    1b54:	e7 cf       	rjmp	.-50     	; 0x1b24 <strtod+0x1a0>
    1b56:	d4 fe       	sbrs	r13, 4
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <strtod+0x1dc>
    1b5a:	31 95       	neg	r19
    1b5c:	21 95       	neg	r18
    1b5e:	31 09       	sbc	r19, r1
    1b60:	c2 0f       	add	r28, r18
    1b62:	d3 1f       	adc	r29, r19
    1b64:	d1 fe       	sbrs	r13, 1
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <strtod+0x1f6>
    1b68:	01 15       	cp	r16, r1
    1b6a:	11 05       	cpc	r17, r1
    1b6c:	31 f0       	breq	.+12     	; 0x1b7a <strtod+0x1f6>
    1b6e:	e1 e0       	ldi	r30, 0x01	; 1
    1b70:	ee 1a       	sub	r14, r30
    1b72:	f1 08       	sbc	r15, r1
    1b74:	d8 01       	movw	r26, r16
    1b76:	ed 92       	st	X+, r14
    1b78:	fc 92       	st	X, r15
    1b7a:	0e 94 a1 09 	call	0x1342	; 0x1342 <__floatunsisf>
    1b7e:	2d 2d       	mov	r18, r13
    1b80:	23 70       	andi	r18, 0x03	; 3
    1b82:	23 30       	cpi	r18, 0x03	; 3
    1b84:	19 f0       	breq	.+6      	; 0x1b8c <strtod+0x208>
    1b86:	4b 01       	movw	r8, r22
    1b88:	5c 01       	movw	r10, r24
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <strtod+0x214>
    1b8c:	4b 01       	movw	r8, r22
    1b8e:	5c 01       	movw	r10, r24
    1b90:	b7 fa       	bst	r11, 7
    1b92:	b0 94       	com	r11
    1b94:	b7 f8       	bld	r11, 7
    1b96:	b0 94       	com	r11
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	a9 01       	movw	r20, r18
    1b9e:	c5 01       	movw	r24, r10
    1ba0:	b4 01       	movw	r22, r8
    1ba2:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <strtod+0x228>
    1baa:	3e c0       	rjmp	.+124    	; 0x1c28 <strtod+0x2a4>
    1bac:	d7 ff       	sbrs	r29, 7
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <strtod+0x238>
    1bb0:	d1 95       	neg	r29
    1bb2:	c1 95       	neg	r28
    1bb4:	d1 09       	sbc	r29, r1
    1bb6:	07 e9       	ldi	r16, 0x97	; 151
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <strtod+0x23c>
    1bbc:	0f ea       	ldi	r16, 0xAF	; 175
    1bbe:	10 e0       	ldi	r17, 0x00	; 0
    1bc0:	68 01       	movw	r12, r16
    1bc2:	b8 e1       	ldi	r27, 0x18	; 24
    1bc4:	cb 1a       	sub	r12, r27
    1bc6:	d1 08       	sbc	r13, r1
    1bc8:	90 e2       	ldi	r25, 0x20	; 32
    1bca:	e9 2e       	mov	r14, r25
    1bcc:	f1 2c       	mov	r15, r1
    1bce:	ce 15       	cp	r28, r14
    1bd0:	df 05       	cpc	r29, r15
    1bd2:	74 f0       	brlt	.+28     	; 0x1bf0 <strtod+0x26c>
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	25 91       	lpm	r18, Z+
    1bd8:	35 91       	lpm	r19, Z+
    1bda:	45 91       	lpm	r20, Z+
    1bdc:	54 91       	lpm	r21, Z
    1bde:	c5 01       	movw	r24, r10
    1be0:	b4 01       	movw	r22, r8
    1be2:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
    1be6:	4b 01       	movw	r8, r22
    1be8:	5c 01       	movw	r10, r24
    1bea:	ce 19       	sub	r28, r14
    1bec:	df 09       	sbc	r29, r15
    1bee:	ef cf       	rjmp	.-34     	; 0x1bce <strtod+0x24a>
    1bf0:	04 50       	subi	r16, 0x04	; 4
    1bf2:	11 09       	sbc	r17, r1
    1bf4:	f5 94       	asr	r15
    1bf6:	e7 94       	ror	r14
    1bf8:	0c 15       	cp	r16, r12
    1bfa:	1d 05       	cpc	r17, r13
    1bfc:	41 f7       	brne	.-48     	; 0x1bce <strtod+0x24a>
    1bfe:	8a 2d       	mov	r24, r10
    1c00:	88 0f       	add	r24, r24
    1c02:	8b 2d       	mov	r24, r11
    1c04:	88 1f       	adc	r24, r24
    1c06:	8f 3f       	cpi	r24, 0xFF	; 255
    1c08:	49 f0       	breq	.+18     	; 0x1c1c <strtod+0x298>
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	a9 01       	movw	r20, r18
    1c10:	c5 01       	movw	r24, r10
    1c12:	b4 01       	movw	r22, r8
    1c14:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
    1c18:	81 11       	cpse	r24, r1
    1c1a:	06 c0       	rjmp	.+12     	; 0x1c28 <strtod+0x2a4>
    1c1c:	82 e2       	ldi	r24, 0x22	; 34
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	90 93 c8 03 	sts	0x03C8, r25
    1c24:	80 93 c7 03 	sts	0x03C7, r24
    1c28:	c5 01       	movw	r24, r10
    1c2a:	b4 01       	movw	r22, r8
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <strtod+0x2bc>
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	80 e8       	ldi	r24, 0x80	; 128
    1c34:	9f ef       	ldi	r25, 0xFF	; 255
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <strtod+0x2bc>
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	80 ec       	ldi	r24, 0xC0	; 192
    1c3e:	9f e7       	ldi	r25, 0x7F	; 127
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	ec e0       	ldi	r30, 0x0C	; 12
    1c46:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__epilogue_restores__+0xc>

00001c4a <__ftoa_engine>:
    1c4a:	28 30       	cpi	r18, 0x08	; 8
    1c4c:	08 f0       	brcs	.+2      	; 0x1c50 <__ftoa_engine+0x6>
    1c4e:	27 e0       	ldi	r18, 0x07	; 7
    1c50:	33 27       	eor	r19, r19
    1c52:	da 01       	movw	r26, r20
    1c54:	99 0f       	add	r25, r25
    1c56:	31 1d       	adc	r19, r1
    1c58:	87 fd       	sbrc	r24, 7
    1c5a:	91 60       	ori	r25, 0x01	; 1
    1c5c:	00 96       	adiw	r24, 0x00	; 0
    1c5e:	61 05       	cpc	r22, r1
    1c60:	71 05       	cpc	r23, r1
    1c62:	39 f4       	brne	.+14     	; 0x1c72 <__ftoa_engine+0x28>
    1c64:	32 60       	ori	r19, 0x02	; 2
    1c66:	2e 5f       	subi	r18, 0xFE	; 254
    1c68:	3d 93       	st	X+, r19
    1c6a:	30 e3       	ldi	r19, 0x30	; 48
    1c6c:	2a 95       	dec	r18
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <__ftoa_engine+0x1e>
    1c70:	08 95       	ret
    1c72:	9f 3f       	cpi	r25, 0xFF	; 255
    1c74:	30 f0       	brcs	.+12     	; 0x1c82 <__ftoa_engine+0x38>
    1c76:	80 38       	cpi	r24, 0x80	; 128
    1c78:	71 05       	cpc	r23, r1
    1c7a:	61 05       	cpc	r22, r1
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <__ftoa_engine+0x36>
    1c7e:	3c 5f       	subi	r19, 0xFC	; 252
    1c80:	3c 5f       	subi	r19, 0xFC	; 252
    1c82:	3d 93       	st	X+, r19
    1c84:	91 30       	cpi	r25, 0x01	; 1
    1c86:	08 f0       	brcs	.+2      	; 0x1c8a <__ftoa_engine+0x40>
    1c88:	80 68       	ori	r24, 0x80	; 128
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	1f 93       	push	r17
    1c92:	0f 93       	push	r16
    1c94:	ff 92       	push	r15
    1c96:	ef 92       	push	r14
    1c98:	19 2f       	mov	r17, r25
    1c9a:	98 7f       	andi	r25, 0xF8	; 248
    1c9c:	96 95       	lsr	r25
    1c9e:	e9 2f       	mov	r30, r25
    1ca0:	96 95       	lsr	r25
    1ca2:	96 95       	lsr	r25
    1ca4:	e9 0f       	add	r30, r25
    1ca6:	ff 27       	eor	r31, r31
    1ca8:	e3 5f       	subi	r30, 0xF3	; 243
    1caa:	fe 4f       	sbci	r31, 0xFE	; 254
    1cac:	99 27       	eor	r25, r25
    1cae:	33 27       	eor	r19, r19
    1cb0:	ee 24       	eor	r14, r14
    1cb2:	ff 24       	eor	r15, r15
    1cb4:	a7 01       	movw	r20, r14
    1cb6:	e7 01       	movw	r28, r14
    1cb8:	05 90       	lpm	r0, Z+
    1cba:	08 94       	sec
    1cbc:	07 94       	ror	r0
    1cbe:	28 f4       	brcc	.+10     	; 0x1cca <__ftoa_engine+0x80>
    1cc0:	36 0f       	add	r19, r22
    1cc2:	e7 1e       	adc	r14, r23
    1cc4:	f8 1e       	adc	r15, r24
    1cc6:	49 1f       	adc	r20, r25
    1cc8:	51 1d       	adc	r21, r1
    1cca:	66 0f       	add	r22, r22
    1ccc:	77 1f       	adc	r23, r23
    1cce:	88 1f       	adc	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	06 94       	lsr	r0
    1cd4:	a1 f7       	brne	.-24     	; 0x1cbe <__ftoa_engine+0x74>
    1cd6:	05 90       	lpm	r0, Z+
    1cd8:	07 94       	ror	r0
    1cda:	28 f4       	brcc	.+10     	; 0x1ce6 <__ftoa_engine+0x9c>
    1cdc:	e7 0e       	add	r14, r23
    1cde:	f8 1e       	adc	r15, r24
    1ce0:	49 1f       	adc	r20, r25
    1ce2:	56 1f       	adc	r21, r22
    1ce4:	c1 1d       	adc	r28, r1
    1ce6:	77 0f       	add	r23, r23
    1ce8:	88 1f       	adc	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	66 1f       	adc	r22, r22
    1cee:	06 94       	lsr	r0
    1cf0:	a1 f7       	brne	.-24     	; 0x1cda <__ftoa_engine+0x90>
    1cf2:	05 90       	lpm	r0, Z+
    1cf4:	07 94       	ror	r0
    1cf6:	28 f4       	brcc	.+10     	; 0x1d02 <__ftoa_engine+0xb8>
    1cf8:	f8 0e       	add	r15, r24
    1cfa:	49 1f       	adc	r20, r25
    1cfc:	56 1f       	adc	r21, r22
    1cfe:	c7 1f       	adc	r28, r23
    1d00:	d1 1d       	adc	r29, r1
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	66 1f       	adc	r22, r22
    1d08:	77 1f       	adc	r23, r23
    1d0a:	06 94       	lsr	r0
    1d0c:	a1 f7       	brne	.-24     	; 0x1cf6 <__ftoa_engine+0xac>
    1d0e:	05 90       	lpm	r0, Z+
    1d10:	07 94       	ror	r0
    1d12:	20 f4       	brcc	.+8      	; 0x1d1c <__ftoa_engine+0xd2>
    1d14:	49 0f       	add	r20, r25
    1d16:	56 1f       	adc	r21, r22
    1d18:	c7 1f       	adc	r28, r23
    1d1a:	d8 1f       	adc	r29, r24
    1d1c:	99 0f       	add	r25, r25
    1d1e:	66 1f       	adc	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	88 1f       	adc	r24, r24
    1d24:	06 94       	lsr	r0
    1d26:	a9 f7       	brne	.-22     	; 0x1d12 <__ftoa_engine+0xc8>
    1d28:	84 91       	lpm	r24, Z
    1d2a:	10 95       	com	r17
    1d2c:	17 70       	andi	r17, 0x07	; 7
    1d2e:	41 f0       	breq	.+16     	; 0x1d40 <__ftoa_engine+0xf6>
    1d30:	d6 95       	lsr	r29
    1d32:	c7 95       	ror	r28
    1d34:	57 95       	ror	r21
    1d36:	47 95       	ror	r20
    1d38:	f7 94       	ror	r15
    1d3a:	e7 94       	ror	r14
    1d3c:	1a 95       	dec	r17
    1d3e:	c1 f7       	brne	.-16     	; 0x1d30 <__ftoa_engine+0xe6>
    1d40:	e3 eb       	ldi	r30, 0xB3	; 179
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	68 94       	set
    1d46:	15 90       	lpm	r1, Z+
    1d48:	15 91       	lpm	r17, Z+
    1d4a:	35 91       	lpm	r19, Z+
    1d4c:	65 91       	lpm	r22, Z+
    1d4e:	95 91       	lpm	r25, Z+
    1d50:	05 90       	lpm	r0, Z+
    1d52:	7f e2       	ldi	r23, 0x2F	; 47
    1d54:	73 95       	inc	r23
    1d56:	e1 18       	sub	r14, r1
    1d58:	f1 0a       	sbc	r15, r17
    1d5a:	43 0b       	sbc	r20, r19
    1d5c:	56 0b       	sbc	r21, r22
    1d5e:	c9 0b       	sbc	r28, r25
    1d60:	d0 09       	sbc	r29, r0
    1d62:	c0 f7       	brcc	.-16     	; 0x1d54 <__ftoa_engine+0x10a>
    1d64:	e1 0c       	add	r14, r1
    1d66:	f1 1e       	adc	r15, r17
    1d68:	43 1f       	adc	r20, r19
    1d6a:	56 1f       	adc	r21, r22
    1d6c:	c9 1f       	adc	r28, r25
    1d6e:	d0 1d       	adc	r29, r0
    1d70:	7e f4       	brtc	.+30     	; 0x1d90 <__ftoa_engine+0x146>
    1d72:	70 33       	cpi	r23, 0x30	; 48
    1d74:	11 f4       	brne	.+4      	; 0x1d7a <__ftoa_engine+0x130>
    1d76:	8a 95       	dec	r24
    1d78:	e6 cf       	rjmp	.-52     	; 0x1d46 <__ftoa_engine+0xfc>
    1d7a:	e8 94       	clt
    1d7c:	01 50       	subi	r16, 0x01	; 1
    1d7e:	30 f0       	brcs	.+12     	; 0x1d8c <__ftoa_engine+0x142>
    1d80:	08 0f       	add	r16, r24
    1d82:	0a f4       	brpl	.+2      	; 0x1d86 <__ftoa_engine+0x13c>
    1d84:	00 27       	eor	r16, r16
    1d86:	02 17       	cp	r16, r18
    1d88:	08 f4       	brcc	.+2      	; 0x1d8c <__ftoa_engine+0x142>
    1d8a:	20 2f       	mov	r18, r16
    1d8c:	23 95       	inc	r18
    1d8e:	02 2f       	mov	r16, r18
    1d90:	7a 33       	cpi	r23, 0x3A	; 58
    1d92:	28 f0       	brcs	.+10     	; 0x1d9e <__ftoa_engine+0x154>
    1d94:	79 e3       	ldi	r23, 0x39	; 57
    1d96:	7d 93       	st	X+, r23
    1d98:	2a 95       	dec	r18
    1d9a:	e9 f7       	brne	.-6      	; 0x1d96 <__ftoa_engine+0x14c>
    1d9c:	10 c0       	rjmp	.+32     	; 0x1dbe <__ftoa_engine+0x174>
    1d9e:	7d 93       	st	X+, r23
    1da0:	2a 95       	dec	r18
    1da2:	89 f6       	brne	.-94     	; 0x1d46 <__ftoa_engine+0xfc>
    1da4:	06 94       	lsr	r0
    1da6:	97 95       	ror	r25
    1da8:	67 95       	ror	r22
    1daa:	37 95       	ror	r19
    1dac:	17 95       	ror	r17
    1dae:	17 94       	ror	r1
    1db0:	e1 18       	sub	r14, r1
    1db2:	f1 0a       	sbc	r15, r17
    1db4:	43 0b       	sbc	r20, r19
    1db6:	56 0b       	sbc	r21, r22
    1db8:	c9 0b       	sbc	r28, r25
    1dba:	d0 09       	sbc	r29, r0
    1dbc:	98 f0       	brcs	.+38     	; 0x1de4 <__ftoa_engine+0x19a>
    1dbe:	23 95       	inc	r18
    1dc0:	7e 91       	ld	r23, -X
    1dc2:	73 95       	inc	r23
    1dc4:	7a 33       	cpi	r23, 0x3A	; 58
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <__ftoa_engine+0x180>
    1dc8:	70 e3       	ldi	r23, 0x30	; 48
    1dca:	7c 93       	st	X, r23
    1dcc:	20 13       	cpse	r18, r16
    1dce:	b8 f7       	brcc	.-18     	; 0x1dbe <__ftoa_engine+0x174>
    1dd0:	7e 91       	ld	r23, -X
    1dd2:	70 61       	ori	r23, 0x10	; 16
    1dd4:	7d 93       	st	X+, r23
    1dd6:	30 f0       	brcs	.+12     	; 0x1de4 <__ftoa_engine+0x19a>
    1dd8:	83 95       	inc	r24
    1dda:	71 e3       	ldi	r23, 0x31	; 49
    1ddc:	7d 93       	st	X+, r23
    1dde:	70 e3       	ldi	r23, 0x30	; 48
    1de0:	2a 95       	dec	r18
    1de2:	e1 f7       	brne	.-8      	; 0x1ddc <__ftoa_engine+0x192>
    1de4:	11 24       	eor	r1, r1
    1de6:	ef 90       	pop	r14
    1de8:	ff 90       	pop	r15
    1dea:	0f 91       	pop	r16
    1dec:	1f 91       	pop	r17
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	99 27       	eor	r25, r25
    1df4:	87 fd       	sbrc	r24, 7
    1df6:	90 95       	com	r25
    1df8:	08 95       	ret

00001dfa <isspace>:
    1dfa:	91 11       	cpse	r25, r1
    1dfc:	1e c0       	rjmp	.+60     	; 0x1e3a <__ctype_isfalse>
    1dfe:	80 32       	cpi	r24, 0x20	; 32
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <isspace+0xe>
    1e02:	89 50       	subi	r24, 0x09	; 9
    1e04:	85 50       	subi	r24, 0x05	; 5
    1e06:	d0 f7       	brcc	.-12     	; 0x1dfc <isspace+0x2>
    1e08:	08 95       	ret

00001e0a <strncasecmp_P>:
    1e0a:	fb 01       	movw	r30, r22
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	41 50       	subi	r20, 0x01	; 1
    1e10:	50 40       	sbci	r21, 0x00	; 0
    1e12:	88 f0       	brcs	.+34     	; 0x1e36 <strncasecmp_P+0x2c>
    1e14:	8d 91       	ld	r24, X+
    1e16:	81 34       	cpi	r24, 0x41	; 65
    1e18:	1c f0       	brlt	.+6      	; 0x1e20 <strncasecmp_P+0x16>
    1e1a:	8b 35       	cpi	r24, 0x5B	; 91
    1e1c:	0c f4       	brge	.+2      	; 0x1e20 <strncasecmp_P+0x16>
    1e1e:	80 5e       	subi	r24, 0xE0	; 224
    1e20:	65 91       	lpm	r22, Z+
    1e22:	61 34       	cpi	r22, 0x41	; 65
    1e24:	1c f0       	brlt	.+6      	; 0x1e2c <strncasecmp_P+0x22>
    1e26:	6b 35       	cpi	r22, 0x5B	; 91
    1e28:	0c f4       	brge	.+2      	; 0x1e2c <strncasecmp_P+0x22>
    1e2a:	60 5e       	subi	r22, 0xE0	; 224
    1e2c:	86 1b       	sub	r24, r22
    1e2e:	61 11       	cpse	r22, r1
    1e30:	71 f3       	breq	.-36     	; 0x1e0e <strncasecmp_P+0x4>
    1e32:	99 0b       	sbc	r25, r25
    1e34:	08 95       	ret
    1e36:	88 1b       	sub	r24, r24
    1e38:	fc cf       	rjmp	.-8      	; 0x1e32 <strncasecmp_P+0x28>

00001e3a <__ctype_isfalse>:
    1e3a:	99 27       	eor	r25, r25
    1e3c:	88 27       	eor	r24, r24

00001e3e <__ctype_istrue>:
    1e3e:	08 95       	ret

00001e40 <__muluhisi3>:
    1e40:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__umulhisi3>
    1e44:	a5 9f       	mul	r26, r21
    1e46:	90 0d       	add	r25, r0
    1e48:	b4 9f       	mul	r27, r20
    1e4a:	90 0d       	add	r25, r0
    1e4c:	a4 9f       	mul	r26, r20
    1e4e:	80 0d       	add	r24, r0
    1e50:	91 1d       	adc	r25, r1
    1e52:	11 24       	eor	r1, r1
    1e54:	08 95       	ret

00001e56 <__prologue_saves__>:
    1e56:	2f 92       	push	r2
    1e58:	3f 92       	push	r3
    1e5a:	4f 92       	push	r4
    1e5c:	5f 92       	push	r5
    1e5e:	6f 92       	push	r6
    1e60:	7f 92       	push	r7
    1e62:	8f 92       	push	r8
    1e64:	9f 92       	push	r9
    1e66:	af 92       	push	r10
    1e68:	bf 92       	push	r11
    1e6a:	cf 92       	push	r12
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	ca 1b       	sub	r28, r26
    1e80:	db 0b       	sbc	r29, r27
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	09 94       	ijmp

00001e8e <__epilogue_restores__>:
    1e8e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e90:	39 88       	ldd	r3, Y+17	; 0x11
    1e92:	48 88       	ldd	r4, Y+16	; 0x10
    1e94:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e96:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e98:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ea0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ea2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ea4:	df 80       	ldd	r13, Y+7	; 0x07
    1ea6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ea8:	fd 80       	ldd	r15, Y+5	; 0x05
    1eaa:	0c 81       	ldd	r16, Y+4	; 0x04
    1eac:	1b 81       	ldd	r17, Y+3	; 0x03
    1eae:	aa 81       	ldd	r26, Y+2	; 0x02
    1eb0:	b9 81       	ldd	r27, Y+1	; 0x01
    1eb2:	ce 0f       	add	r28, r30
    1eb4:	d1 1d       	adc	r29, r1
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	ed 01       	movw	r28, r26
    1ec2:	08 95       	ret

00001ec4 <__umulhisi3>:
    1ec4:	a2 9f       	mul	r26, r18
    1ec6:	b0 01       	movw	r22, r0
    1ec8:	b3 9f       	mul	r27, r19
    1eca:	c0 01       	movw	r24, r0
    1ecc:	a3 9f       	mul	r26, r19
    1ece:	70 0d       	add	r23, r0
    1ed0:	81 1d       	adc	r24, r1
    1ed2:	11 24       	eor	r1, r1
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	b2 9f       	mul	r27, r18
    1ed8:	70 0d       	add	r23, r0
    1eda:	81 1d       	adc	r24, r1
    1edc:	11 24       	eor	r1, r1
    1ede:	91 1d       	adc	r25, r1
    1ee0:	08 95       	ret

00001ee2 <_exit>:
    1ee2:	f8 94       	cli

00001ee4 <__stop_program>:
    1ee4:	ff cf       	rjmp	.-2      	; 0x1ee4 <__stop_program>
