
stepmotor0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800100  00001e9c  00001f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800392  00800392  000021c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021c2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cb4  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011bc  00000000  00000000  0000514a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aff  00000000  00000000  00006306  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b4  00000000  00000000  00006e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ad8  00000000  00000000  000074bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001928  00000000  00000000  00007f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  000098bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_16>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__vector_18>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	sbci	r20, 0x9E	; 158

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     10b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     11b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     12b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     13b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     14b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     15b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     16b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     17b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     18b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     19b:	3d 27 00                                            ='.

0000019e <__ctors_start>:
     19e:	7c 01       	movw	r14, r24
     1a0:	3d 06       	cpc	r3, r29
     1a2:	e0 06       	cpc	r14, r16
     1a4:	2d 08       	sbc	r2, r13

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	13 e0       	ldi	r17, 0x03	; 3
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	ec e9       	ldi	r30, 0x9C	; 156
     1ba:	fe e1       	ldi	r31, 0x1E	; 30
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a2 39       	cpi	r26, 0x92	; 146
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	23 e0       	ldi	r18, 0x03	; 3
     1ca:	a2 e9       	ldi	r26, 0x92	; 146
     1cc:	b3 e0       	ldi	r27, 0x03	; 3
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ad 3c       	cpi	r26, 0xCD	; 205
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>

000001d8 <__do_global_ctors>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	c6 ea       	ldi	r28, 0xA6	; 166
     1dc:	d1 e0       	ldi	r29, 0x01	; 1
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <__do_global_ctors+0x10>
     1e0:	22 97       	sbiw	r28, 0x02	; 2
     1e2:	fe 01       	movw	r30, r28
     1e4:	0e 94 b6 0a 	call	0x156c	; 0x156c <__tablejump__>
     1e8:	ce 39       	cpi	r28, 0x9E	; 158
     1ea:	d1 07       	cpc	r29, r17
     1ec:	c9 f7       	brne	.-14     	; 0x1e0 <__do_global_ctors+0x8>
     1ee:	0e 94 d6 06 	call	0xdac	; 0xdac <main>
     1f2:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <_ZN4ADC2C1Ev>:

ADC2::ADC2(){
	//Channel ADC0 is chosen
	//MUX3...0 =0000
	//Configure the PORTC0
	DDRC &= !_BV(0);
     1fa:	87 b1       	in	r24, 0x07	; 7
     1fc:	17 b8       	out	0x07, r1	; 7
	//Enable ADC with prescaller 128 (16000000/128=125000Hz)
	//Required 50K-200KHz
	ADCSRA |= _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
     1fe:	ea e7       	ldi	r30, 0x7A	; 122
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	87 68       	ori	r24, 0x87	; 135
     206:	80 83       	st	Z, r24
	//Internal 1.1V Voltage Reference with external capacitor at AREF pin 
	ADMUX |=  _BV(REFS0);//|_BV(REFS1);
     208:	ec e7       	ldi	r30, 0x7C	; 124
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	80 64       	ori	r24, 0x40	; 64
     210:	80 83       	st	Z, r24
     212:	08 95       	ret

00000214 <_ZN7ADS1115C1Ev>:


I2C ADS1115i2c;


ADS1115::ADS1115(){}
     214:	08 95       	ret

00000216 <_ZN7ADS111512init_ADS1115Ev>:

	
void ADS1115::init_ADS1115(){
	
	ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     216:	60 e9       	ldi	r22, 0x90	; 144
     218:	82 e9       	ldi	r24, 0x92	; 146
     21a:	93 e0       	ldi	r25, 0x03	; 3
     21c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN3I2C9i2c_startEh>
	ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONFIG); // set pointer to Config register
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	82 e9       	ldi	r24, 0x92	; 146
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0>>8)); // write MSB of the Config register
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	82 e9       	ldi	r24, 0x92	; 146
     22e:	93 e0       	ldi	r25, 0x03	; 3
     230:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0&0xFF)); // write LSB of the Config register
     234:	63 ee       	ldi	r22, 0xE3	; 227
     236:	82 e9       	ldi	r24, 0x92	; 146
     238:	93 e0       	ldi	r25, 0x03	; 3
     23a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_stop();
     23e:	82 e9       	ldi	r24, 0x92	; 146
     240:	93 e0       	ldi	r25, 0x03	; 3
     242:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN3I2C8i2c_stopEv>
     246:	08 95       	ret

00000248 <_ZN7ADS111511readADS1115Ev>:
	
}

uint16_t ADS1115::readADS1115(){
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
	 
	 int a=ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     24c:	60 e9       	ldi	r22, 0x90	; 144
     24e:	82 e9       	ldi	r24, 0x92	; 146
     250:	93 e0       	ldi	r25, 0x03	; 3
     252:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN3I2C9i2c_startEh>
	 if (a==1)
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	29 f0       	breq	.+10     	; 0x264 <_ZN7ADS111511readADS1115Ev+0x1c>
	 {
	 }
	 else{
		 ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONVERT); // set pointer to X axis MSB
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	82 e9       	ldi	r24, 0x92	; 146
     25e:	93 e0       	ldi	r25, 0x03	; 3
     260:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN3I2C9i2c_writeEh>
		 
	 }
	 ADS1115i2c.i2c_stop();
     264:	82 e9       	ldi	r24, 0x92	; 146
     266:	93 e0       	ldi	r25, 0x03	; 3
     268:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN3I2C8i2c_stopEv>

	 int b=ADS1115i2c.i2c_start((ADS1115_ADDRESS|0x01));
     26c:	61 e9       	ldi	r22, 0x91	; 145
     26e:	82 e9       	ldi	r24, 0x92	; 146
     270:	93 e0       	ldi	r25, 0x03	; 3
     272:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN3I2C9i2c_startEh>
	 if (b==1)
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	59 f0       	breq	.+22     	; 0x290 <_ZN7ADS111511readADS1115Ev+0x48>
	 {
	 }
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
     27a:	82 e9       	ldi	r24, 0x92	; 146
     27c:	93 e0       	ldi	r25, 0x03	; 3
     27e:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN3I2C12i2c_read_ackEv>
     282:	c8 2f       	mov	r28, r24
		 LSB = ADS1115i2c.i2c_read_ack();
     284:	82 e9       	ldi	r24, 0x92	; 146
     286:	93 e0       	ldi	r25, 0x03	; 3
     288:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN3I2C12i2c_read_ackEv>
     28c:	d8 2f       	mov	r29, r24
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_ZN7ADS111511readADS1115Ev+0x4c>
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
     290:	d0 e0       	ldi	r29, 0x00	; 0
	
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
     292:	c0 e0       	ldi	r28, 0x00	; 0
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
		 LSB = ADS1115i2c.i2c_read_ack();
		 
	 }
	 ADS1115i2c.i2c_stop();
     294:	82 e9       	ldi	r24, 0x92	; 146
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN3I2C8i2c_stopEv>

	 result =((MSB<<8)|LSB)>>4;
     29c:	2d 2f       	mov	r18, r29
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	c9 01       	movw	r24, r18
     2a2:	9c 2b       	or	r25, r28
	 return result;
}
     2a4:	95 95       	asr	r25
     2a6:	87 95       	ror	r24
     2a8:	95 95       	asr	r25
     2aa:	87 95       	ror	r24
     2ac:	95 95       	asr	r25
     2ae:	87 95       	ror	r24
     2b0:	95 95       	asr	r25
     2b2:	87 95       	ror	r24
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <_ZN7ADS111511readVoltageEv>:

double ADS1115::readVoltage(){
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
	init_ADS1115();
     2c0:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN7ADS111512init_ADS1115Ev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c4:	2f ef       	ldi	r18, 0xFF	; 255
     2c6:	89 ef       	ldi	r24, 0xF9	; 249
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	21 50       	subi	r18, 0x01	; 1
     2cc:	80 40       	sbci	r24, 0x00	; 0
     2ce:	90 40       	sbci	r25, 0x00	; 0
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <_ZN7ADS111511readVoltageEv+0x10>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_ZN7ADS111511readVoltageEv+0x1a>
     2d4:	00 00       	nop
	_delay_ms(20);
	uint16_t readResult= readADS1115();
     2d6:	ce 01       	movw	r24, r28
     2d8:	0e 94 24 01 	call	0x248	; 0x248 <_ZN7ADS111511readADS1115Ev>
	double voltage = 0.003*readResult;
     2dc:	bc 01       	movw	r22, r24
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__floatunsisf>
     2e6:	26 ea       	ldi	r18, 0xA6	; 166
     2e8:	3b e9       	ldi	r19, 0x9B	; 155
     2ea:	44 e4       	ldi	r20, 0x44	; 68
     2ec:	5b e3       	ldi	r21, 0x3B	; 59
     2ee:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3>
	return voltage;
	
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <_GLOBAL__sub_I_ADS1115i2c>:
#include <stdlib.h>
#include "ADS1115.h"
#include "i2c.h"


I2C ADS1115i2c;
     2f8:	82 e9       	ldi	r24, 0x92	; 146
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_ZN3I2CC1Ev>
     300:	08 95       	ret

00000302 <_ZN7VolTodBC1Ev>:
double static k[]={-8.4383,-9.0240,-9.3759,-8.8337,-8.8376,-8.2690,-7.2632,-6.8190,-6.7341,-5.8107,-8.6300, -9.3397, -8.9357,-8.6917, -9.4855,-8.3984,-9.0112, -8.3600,-7.6434,-8.1179, -8.0753,-8.7957,-9.1952,-9.1295,-9.2685,-9.6407, -11.3759, -10.0213};
double static t[]={5.7987,6.1970,6.4794,5.9629,5.9792,5.3368,4.0244,3.3762,3.2552,1.7153,6.8552,8.2216,7.3785,6.8769,8.6709,5.9893,7.5672,5.8135,3.7710,5.1349,5.0075,7.3585,8.6997,8.4799,9.0063,10.4154,16.9396,11.7330};
double static dBPoint[]={0,-1.05,-2.22,-3.345,-4.42,-5.44,-6.375,-7.24,-8.055,-8.8,-9.81,-10.955,-12.095,-13.21,-14.395,-15.515,-16.61,-17.675,-18.65,-19.675,-20.65,-21.71,-22.83,-23.98,-25.095,-26.29,-27.615,-28.925};
double initVolDifference=0;

VolTodB::VolTodB(){};
     302:	08 95       	ret

00000304 <_ZN7VolTodB5getdBEd>:
	
double VolTodB::getdB(double voltage){
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	6a 01       	movw	r12, r20
     316:	7b 01       	movw	r14, r22
     318:	cd e5       	ldi	r28, 0x5D	; 93
     31a:	d2 e0       	ldi	r29, 0x02	; 2
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     31c:	00 e0       	ldi	r16, 0x00	; 0
     31e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (voltage>voltagePoint[i]&&voltage<=voltagePoint[i+1])
     320:	69 91       	ld	r22, Y+
     322:	79 91       	ld	r23, Y+
     324:	89 91       	ld	r24, Y+
     326:	99 91       	ld	r25, Y+
     328:	a7 01       	movw	r20, r14
     32a:	96 01       	movw	r18, r12
     32c:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     330:	88 23       	and	r24, r24
     332:	6c f5       	brge	.+90     	; 0x38e <_ZN7VolTodB5getdBEd+0x8a>
     334:	28 81       	ld	r18, Y
     336:	39 81       	ldd	r19, Y+1	; 0x01
     338:	4a 81       	ldd	r20, Y+2	; 0x02
     33a:	5b 81       	ldd	r21, Y+3	; 0x03
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     344:	18 16       	cp	r1, r24
     346:	1c f1       	brlt	.+70     	; 0x38e <_ZN7VolTodB5getdBEd+0x8a>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
     348:	00 0f       	add	r16, r16
     34a:	11 1f       	adc	r17, r17
     34c:	00 0f       	add	r16, r16
     34e:	11 1f       	adc	r17, r17
     350:	e8 01       	movw	r28, r16
     352:	c3 51       	subi	r28, 0x13	; 19
     354:	de 4f       	sbci	r29, 0xFE	; 254
     356:	20 91 93 03 	lds	r18, 0x0393
     35a:	30 91 94 03 	lds	r19, 0x0394
     35e:	40 91 95 03 	lds	r20, 0x0395
     362:	50 91 96 03 	lds	r21, 0x0396
     366:	c7 01       	movw	r24, r14
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__subsf3>
     36e:	28 81       	ld	r18, Y
     370:	39 81       	ldd	r19, Y+1	; 0x01
     372:	4a 81       	ldd	r20, Y+2	; 0x02
     374:	5b 81       	ldd	r21, Y+3	; 0x03
     376:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3>
     37a:	f8 01       	movw	r30, r16
     37c:	e3 58       	subi	r30, 0x83	; 131
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	20 81       	ld	r18, Z
     382:	31 81       	ldd	r19, Z+1	; 0x01
     384:	42 81       	ldd	r20, Z+2	; 0x02
     386:	53 81       	ldd	r21, Z+3	; 0x03
     388:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__addsf3>
     38c:	03 c0       	rjmp	.+6      	; 0x394 <_ZN7VolTodB5getdBEd+0x90>
VolTodB::VolTodB(){};
	
double VolTodB::getdB(double voltage){
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     38e:	0f 5f       	subi	r16, 0xFF	; 255
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	c6 cf       	rjmp	.-116    	; 0x320 <_ZN7VolTodB5getdBEd+0x1c>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
		}
	}
	
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	08 95       	ret

000003a6 <_ZN7VolTodB14setInitVoltageEd>:

void VolTodB::setInitVoltage(double voltage){
     3a6:	cb 01       	movw	r24, r22
     3a8:	ba 01       	movw	r22, r20
	initVolDifference= voltage-0.687;
     3aa:	2b e3       	ldi	r18, 0x3B	; 59
     3ac:	3f ed       	ldi	r19, 0xDF	; 223
     3ae:	4f e2       	ldi	r20, 0x2F	; 47
     3b0:	5f e3       	ldi	r21, 0x3F	; 63
     3b2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__subsf3>
     3b6:	60 93 93 03 	sts	0x0393, r22
     3ba:	70 93 94 03 	sts	0x0394, r23
     3be:	80 93 95 03 	sts	0x0395, r24
     3c2:	90 93 96 03 	sts	0x0396, r25
     3c6:	08 95       	ret

000003c8 <_ZN7VolTodB10getVoltageEd>:
}

double VolTodB::getVoltage(double dB){
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
     3d8:	9a 01       	movw	r18, r20
     3da:	ab 01       	movw	r20, r22
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	cb 01       	movw	r24, r22
     3e2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__subsf3>
     3e6:	6b 01       	movw	r12, r22
     3e8:	7c 01       	movw	r14, r24
	double voltage=0;
	
	if (inv_dB==0)
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	a9 01       	movw	r20, r18
     3f0:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     3f4:	81 11       	cpse	r24, r1
     3f6:	13 c0       	rjmp	.+38     	; 0x41e <_ZN7VolTodB10getVoltageEd+0x56>
	{
		voltage=((inv_dB-t[0])/k[0]);
     3f8:	23 ef       	ldi	r18, 0xF3	; 243
     3fa:	3e e8       	ldi	r19, 0x8E	; 142
     3fc:	49 eb       	ldi	r20, 0xB9	; 185
     3fe:	50 e4       	ldi	r21, 0x40	; 64
     400:	c7 01       	movw	r24, r14
     402:	b6 01       	movw	r22, r12
     404:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__subsf3>
     408:	27 e4       	ldi	r18, 0x47	; 71
     40a:	33 e0       	ldi	r19, 0x03	; 3
     40c:	47 e0       	ldi	r20, 0x07	; 7
     40e:	51 ec       	ldi	r21, 0xC1	; 193
     410:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divsf3>
     414:	56 2f       	mov	r21, r22
     416:	47 2f       	mov	r20, r23
     418:	38 2f       	mov	r19, r24
     41a:	29 2f       	mov	r18, r25
     41c:	38 c0       	rjmp	.+112    	; 0x48e <_ZN7VolTodB10getVoltageEd+0xc6>
     41e:	cd e0       	ldi	r28, 0x0D	; 13
     420:	d1 e0       	ldi	r29, 0x01	; 1
double VolTodB::getVoltage(double dB){
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
	double voltage=0;
	
	if (inv_dB==0)
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	else{
	for (int i=0;i<size-1;i++)
	{
		if (inv_dB<dBPoint[i]&&inv_dB>=dBPoint[i+1])
     426:	29 91       	ld	r18, Y+
     428:	39 91       	ld	r19, Y+
     42a:	49 91       	ld	r20, Y+
     42c:	59 91       	ld	r21, Y+
     42e:	c7 01       	movw	r24, r14
     430:	b6 01       	movw	r22, r12
     432:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     436:	88 23       	and	r24, r24
     438:	3c f5       	brge	.+78     	; 0x488 <_ZN7VolTodB10getVoltageEd+0xc0>
     43a:	28 81       	ld	r18, Y
     43c:	39 81       	ldd	r19, Y+1	; 0x01
     43e:	4a 81       	ldd	r20, Y+2	; 0x02
     440:	5b 81       	ldd	r21, Y+3	; 0x03
     442:	c7 01       	movw	r24, r14
     444:	b6 01       	movw	r22, r12
     446:	0e 94 2e 0a 	call	0x145c	; 0x145c <__gesf2>
     44a:	88 23       	and	r24, r24
     44c:	ec f0       	brlt	.+58     	; 0x488 <_ZN7VolTodB10getVoltageEd+0xc0>
		{
			voltage= ((inv_dB-t[i])/k[i]);
     44e:	00 0f       	add	r16, r16
     450:	11 1f       	adc	r17, r17
     452:	00 0f       	add	r16, r16
     454:	11 1f       	adc	r17, r17
     456:	f8 01       	movw	r30, r16
     458:	e3 58       	subi	r30, 0x83	; 131
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	20 81       	ld	r18, Z
     45e:	31 81       	ldd	r19, Z+1	; 0x01
     460:	42 81       	ldd	r20, Z+2	; 0x02
     462:	53 81       	ldd	r21, Z+3	; 0x03
     464:	c7 01       	movw	r24, r14
     466:	b6 01       	movw	r22, r12
     468:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__subsf3>
     46c:	f8 01       	movw	r30, r16
     46e:	e3 51       	subi	r30, 0x13	; 19
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	20 81       	ld	r18, Z
     474:	31 81       	ldd	r19, Z+1	; 0x01
     476:	42 81       	ldd	r20, Z+2	; 0x02
     478:	53 81       	ldd	r21, Z+3	; 0x03
     47a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divsf3>
			return voltage;
     47e:	56 2f       	mov	r21, r22
     480:	47 2f       	mov	r20, r23
     482:	38 2f       	mov	r19, r24
     484:	29 2f       	mov	r18, r25
     486:	03 c0       	rjmp	.+6      	; 0x48e <_ZN7VolTodB10getVoltageEd+0xc6>
	{
		voltage=((inv_dB-t[0])/k[0]);
	}
	
	else{
	for (int i=0;i<size-1;i++)
     488:	0f 5f       	subi	r16, 0xFF	; 255
     48a:	1f 4f       	sbci	r17, 0xFF	; 255
     48c:	cc cf       	rjmp	.-104    	; 0x426 <_ZN7VolTodB10getVoltageEd+0x5e>
		}
	}
	}
	return voltage;
	
}
     48e:	65 2f       	mov	r22, r21
     490:	74 2f       	mov	r23, r20
     492:	83 2f       	mov	r24, r19
     494:	92 2f       	mov	r25, r18
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	08 95       	ret

000004a8 <_ZN3I2CC1Ev>:

I2C::I2C(){ i2c_init();}
	
void I2C::i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     4a8:	88 e4       	ldi	r24, 0x48	; 72
     4aa:	80 93 b8 00 	sts	0x00B8, r24
     4ae:	08 95       	ret

000004b0 <_ZN3I2C9i2c_startEh>:
}

uint8_t I2C::i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     4b0:	ec eb       	ldi	r30, 0xBC	; 188
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     4b6:	84 ea       	ldi	r24, 0xA4	; 164
     4b8:	80 83       	st	Z, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4ba:	80 81       	ld	r24, Z
     4bc:	88 23       	and	r24, r24
     4be:	ec f7       	brge	.-6      	; 0x4ba <_ZN3I2C9i2c_startEh+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     4c0:	80 91 b9 00 	lds	r24, 0x00B9
     4c4:	88 7f       	andi	r24, 0xF8	; 248
     4c6:	88 30       	cpi	r24, 0x08	; 8
     4c8:	a1 f4       	brne	.+40     	; 0x4f2 <_ZN3I2C9i2c_startEh+0x42>
	
	// load slave address into data register
	TWDR = address;
     4ca:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     4ce:	84 e8       	ldi	r24, 0x84	; 132
     4d0:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4d4:	ec eb       	ldi	r30, 0xBC	; 188
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	88 23       	and	r24, r24
     4dc:	ec f7       	brge	.-6      	; 0x4d8 <_ZN3I2C9i2c_startEh+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     4de:	90 91 b9 00 	lds	r25, 0x00B9
     4e2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     4e4:	98 31       	cpi	r25, 0x18	; 24
     4e6:	39 f0       	breq	.+14     	; 0x4f6 <_ZN3I2C9i2c_startEh+0x46>
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 34       	cpi	r25, 0x40	; 64
     4ec:	29 f4       	brne	.+10     	; 0x4f8 <_ZN3I2C9i2c_startEh+0x48>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
}
     4f8:	08 95       	ret

000004fa <_ZN3I2C9i2c_writeEh>:

uint8_t I2C::i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     4fa:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     4fe:	84 e8       	ldi	r24, 0x84	; 132
     500:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     504:	ec eb       	ldi	r30, 0xBC	; 188
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	88 23       	and	r24, r24
     50c:	ec f7       	brge	.-6      	; 0x508 <_ZN3I2C9i2c_writeEh+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     50e:	90 91 b9 00 	lds	r25, 0x00B9
     512:	98 7f       	andi	r25, 0xF8	; 248
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	98 32       	cpi	r25, 0x28	; 40
     518:	09 f4       	brne	.+2      	; 0x51c <_ZN3I2C9i2c_writeEh+0x22>
     51a:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     51c:	08 95       	ret

0000051e <_ZN3I2C12i2c_read_ackEv>:

uint8_t I2C::i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     51e:	84 ec       	ldi	r24, 0xC4	; 196
     520:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     524:	ec eb       	ldi	r30, 0xBC	; 188
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	88 23       	and	r24, r24
     52c:	ec f7       	brge	.-6      	; 0x528 <_ZN3I2C12i2c_read_ackEv+0xa>
	// return received data from TWDR
	return TWDR;
     52e:	80 91 bb 00 	lds	r24, 0x00BB
}
     532:	08 95       	ret

00000534 <_ZN3I2C8i2c_stopEv>:
}

void I2C::i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     534:	84 e9       	ldi	r24, 0x94	; 148
     536:	80 93 bc 00 	sts	0x00BC, r24
     53a:	08 95       	ret

0000053c <_ZN4MenuC1Ev>:
bool modelR=false;
bool modelT=false;


	
Menu::Menu(){
     53c:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN8UARTtoolC1Ev>
     540:	08 95       	ret

00000542 <_Z9replyListi>:
	

	
	
}
void replyList(int index){
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	a8 97       	sbiw	r28, 0x28	; 40
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
	
	
		if (index==1)
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	91 05       	cpc	r25, r1
     55a:	89 f4       	brne	.+34     	; 0x57e <_Z9replyListi+0x3c>
		{
			char testmsg1[]="Mode A: W + or S -";
     55c:	83 e1       	ldi	r24, 0x13	; 19
     55e:	ed ec       	ldi	r30, 0xCD	; 205
     560:	f2 e0       	ldi	r31, 0x02	; 2
     562:	de 01       	movw	r26, r28
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	8a 95       	dec	r24
     56c:	e1 f7       	brne	.-8      	; 0x566 <_Z9replyListi+0x24>
			myUART.uart_transmit_string(testmsg1);
     56e:	be 01       	movw	r22, r28
     570:	6f 5f       	subi	r22, 0xFF	; 255
     572:	7f 4f       	sbci	r23, 0xFF	; 255
     574:	8a ea       	ldi	r24, 0xAA	; 170
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
     57c:	3a c0       	rjmp	.+116    	; 0x5f2 <_Z9replyListi+0xb0>
		}
		else if (index==2)
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	91 05       	cpc	r25, r1
     582:	89 f4       	brne	.+34     	; 0x5a6 <_Z9replyListi+0x64>
		{
			char testmsg2[]="Mode B: Input target voltage: 0.80-4.20";
     584:	88 e2       	ldi	r24, 0x28	; 40
     586:	e0 ee       	ldi	r30, 0xE0	; 224
     588:	f2 e0       	ldi	r31, 0x02	; 2
     58a:	de 01       	movw	r26, r28
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	8a 95       	dec	r24
     594:	e1 f7       	brne	.-8      	; 0x58e <_Z9replyListi+0x4c>
			myUART.uart_transmit_string(testmsg2);
     596:	be 01       	movw	r22, r28
     598:	6f 5f       	subi	r22, 0xFF	; 255
     59a:	7f 4f       	sbci	r23, 0xFF	; 255
     59c:	8a ea       	ldi	r24, 0xAA	; 170
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
     5a4:	26 c0       	rjmp	.+76     	; 0x5f2 <_Z9replyListi+0xb0>
		}
		
		else if (index==3)
     5a6:	83 30       	cpi	r24, 0x03	; 3
     5a8:	91 05       	cpc	r25, r1
     5aa:	89 f4       	brne	.+34     	; 0x5ce <_Z9replyListi+0x8c>
		{
			char testmsg3[]="Reset to 0 dB";
     5ac:	8e e0       	ldi	r24, 0x0E	; 14
     5ae:	e8 e0       	ldi	r30, 0x08	; 8
     5b0:	f3 e0       	ldi	r31, 0x03	; 3
     5b2:	de 01       	movw	r26, r28
     5b4:	11 96       	adiw	r26, 0x01	; 1
     5b6:	01 90       	ld	r0, Z+
     5b8:	0d 92       	st	X+, r0
     5ba:	8a 95       	dec	r24
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <_Z9replyListi+0x74>
			myUART.uart_transmit_string(testmsg3);
     5be:	be 01       	movw	r22, r28
     5c0:	6f 5f       	subi	r22, 0xFF	; 255
     5c2:	7f 4f       	sbci	r23, 0xFF	; 255
     5c4:	8a ea       	ldi	r24, 0xAA	; 170
     5c6:	93 e0       	ldi	r25, 0x03	; 3
     5c8:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
     5cc:	12 c0       	rjmp	.+36     	; 0x5f2 <_Z9replyListi+0xb0>
		}
		
		else if (index==4)
     5ce:	04 97       	sbiw	r24, 0x04	; 4
     5d0:	81 f4       	brne	.+32     	; 0x5f2 <_Z9replyListi+0xb0>
		{
			char testmsg4[]="Input target dB: 0.0-(-28.5)";
     5d2:	8d e1       	ldi	r24, 0x1D	; 29
     5d4:	e6 e1       	ldi	r30, 0x16	; 22
     5d6:	f3 e0       	ldi	r31, 0x03	; 3
     5d8:	de 01       	movw	r26, r28
     5da:	11 96       	adiw	r26, 0x01	; 1
     5dc:	01 90       	ld	r0, Z+
     5de:	0d 92       	st	X+, r0
     5e0:	8a 95       	dec	r24
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <_Z9replyListi+0x9a>
			myUART.uart_transmit_string(testmsg4);
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	8a ea       	ldi	r24, 0xAA	; 170
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
		}
		
}
     5f2:	a8 96       	adiw	r28, 0x28	; 40
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <_Z9menuStartv>:


void menuStart(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	c3 55       	subi	r28, 0x53	; 83
     60e:	d1 09       	sbc	r29, r1
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
			char msg1[]="Welcome";
     61a:	88 e0       	ldi	r24, 0x08	; 8
     61c:	e3 e3       	ldi	r30, 0x33	; 51
     61e:	f3 e0       	ldi	r31, 0x03	; 3
     620:	de 01       	movw	r26, r28
     622:	a4 5b       	subi	r26, 0xB4	; 180
     624:	bf 4f       	sbci	r27, 0xFF	; 255
     626:	01 90       	ld	r0, Z+
     628:	0d 92       	st	X+, r0
     62a:	8a 95       	dec	r24
     62c:	e1 f7       	brne	.-8      	; 0x626 <_Z9menuStartv+0x22>
			char msg2[]="========= Menu =========";
     62e:	89 e1       	ldi	r24, 0x19	; 25
     630:	eb e3       	ldi	r30, 0x3B	; 59
     632:	f3 e0       	ldi	r31, 0x03	; 3
     634:	de 01       	movw	r26, r28
     636:	5d 96       	adiw	r26, 0x1d	; 29
     638:	01 90       	ld	r0, Z+
     63a:	0d 92       	st	X+, r0
     63c:	8a 95       	dec	r24
     63e:	e1 f7       	brne	.-8      	; 0x638 <_Z9menuStartv+0x34>
			char msg3[]="A. Step by step: W+ and S-.";
     640:	8c e1       	ldi	r24, 0x1C	; 28
     642:	e4 e5       	ldi	r30, 0x54	; 84
     644:	f3 e0       	ldi	r31, 0x03	; 3
     646:	de 01       	movw	r26, r28
     648:	11 96       	adiw	r26, 0x01	; 1
     64a:	01 90       	ld	r0, Z+
     64c:	0d 92       	st	X+, r0
     64e:	8a 95       	dec	r24
     650:	e1 f7       	brne	.-8      	; 0x64a <_Z9menuStartv+0x46>
			char msg4[]="R. Reset";
     652:	89 e0       	ldi	r24, 0x09	; 9
     654:	e0 e7       	ldi	r30, 0x70	; 112
     656:	f3 e0       	ldi	r31, 0x03	; 3
     658:	de 01       	movw	r26, r28
     65a:	ad 5b       	subi	r26, 0xBD	; 189
     65c:	bf 4f       	sbci	r27, 0xFF	; 255
     65e:	01 90       	ld	r0, Z+
     660:	0d 92       	st	X+, r0
     662:	8a 95       	dec	r24
     664:	e1 f7       	brne	.-8      	; 0x65e <_Z9menuStartv+0x5a>
			char msg5[]="T. Target dB";
     666:	8d e0       	ldi	r24, 0x0D	; 13
     668:	e9 e7       	ldi	r30, 0x79	; 121
     66a:	f3 e0       	ldi	r31, 0x03	; 3
     66c:	de 01       	movw	r26, r28
     66e:	d6 96       	adiw	r26, 0x36	; 54
     670:	01 90       	ld	r0, Z+
     672:	0d 92       	st	X+, r0
     674:	8a 95       	dec	r24
     676:	e1 f7       	brne	.-8      	; 0x670 <_Z9menuStartv+0x6c>
			
			myUART.uart_transmit_string(msg1);
     678:	be 01       	movw	r22, r28
     67a:	64 5b       	subi	r22, 0xB4	; 180
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8a ea       	ldi	r24, 0xAA	; 170
     680:	93 e0       	ldi	r25, 0x03	; 3
     682:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg2);
     686:	be 01       	movw	r22, r28
     688:	63 5e       	subi	r22, 0xE3	; 227
     68a:	7f 4f       	sbci	r23, 0xFF	; 255
     68c:	8a ea       	ldi	r24, 0xAA	; 170
     68e:	93 e0       	ldi	r25, 0x03	; 3
     690:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg3);
     694:	be 01       	movw	r22, r28
     696:	6f 5f       	subi	r22, 0xFF	; 255
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	8a ea       	ldi	r24, 0xAA	; 170
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg4);
     6a2:	be 01       	movw	r22, r28
     6a4:	6d 5b       	subi	r22, 0xBD	; 189
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	8a ea       	ldi	r24, 0xAA	; 170
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg5);
     6b0:	be 01       	movw	r22, r28
     6b2:	6a 5c       	subi	r22, 0xCA	; 202
     6b4:	7f 4f       	sbci	r23, 0xFF	; 255
     6b6:	8a ea       	ldi	r24, 0xAA	; 170
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
		
}
     6be:	cd 5a       	subi	r28, 0xAD	; 173
     6c0:	df 4f       	sbci	r29, 0xFF	; 255
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <_Z14moveUpDownLitei>:
	
}

void moveUpDownLite(int stepdown){
	
	myStepper.step(stepdown);
     6d2:	bc 01       	movw	r22, r24
     6d4:	8b ea       	ldi	r24, 0xAB	; 171
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN7Stepper4stepEi>
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	89 e6       	ldi	r24, 0x69	; 105
     6e0:	98 e1       	ldi	r25, 0x18	; 24
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <_Z14moveUpDownLitei+0x10>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <_Z14moveUpDownLitei+0x1a>
     6ec:	00 00       	nop
	_delay_ms(500);
	myStepper.motorOff();
     6ee:	8b ea       	ldi	r24, 0xAB	; 171
     6f0:	93 e0       	ldi	r25, 0x03	; 3
     6f2:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN7Stepper8motorOffEv>
     6f6:	08 95       	ret

000006f8 <_Z11stepperStopv>:
}

void stepperStop(){
	myStepper.motorOff();
     6f8:	8b ea       	ldi	r24, 0xAB	; 171
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN7Stepper8motorOffEv>
     700:	08 95       	ret

00000702 <_ZN4Menu9MenuStartEv>:
Menu::Menu(){
	
}

void Menu::MenuStart(){
		menuStart();
     702:	0e 94 02 03 	call	0x604	; 0x604 <_Z9menuStartv>
		myStepper.setSpeed(1);//Set the speed of the stepper
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	8b ea       	ldi	r24, 0xAB	; 171
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN7Stepper8setSpeedEl>
		stepperStop();
     716:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z11stepperStopv>
     71a:	08 95       	ret

0000071c <_Z11readVoltagev>:
void stepperStop(){
	myStepper.motorOff();
}


double readVoltage(){
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	2d 97       	sbiw	r28, 0x0d	; 13
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	00 e1       	ldi	r16, 0x10	; 16
     73e:	10 e0       	ldi	r17, 0x00	; 0
	
	double voltage=0;
	double voltageSum=0;
     740:	c1 2c       	mov	r12, r1
     742:	d1 2c       	mov	r13, r1
     744:	76 01       	movw	r14, r12
	for (int i=0;i<16;i++)
	{
		 voltage= myADS1115.readVoltage();
     746:	88 ea       	ldi	r24, 0xA8	; 168
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_ZN7ADS111511readVoltageEv>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
		 voltageSum=voltageSum+voltage;
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__addsf3>
     75a:	6b 01       	movw	r12, r22
     75c:	7c 01       	movw	r14, r24
     75e:	01 50       	subi	r16, 0x01	; 1
     760:	11 09       	sbc	r17, r1

double readVoltage(){
	
	double voltage=0;
	double voltageSum=0;
	for (int i=0;i<16;i++)
     762:	01 15       	cp	r16, r1
     764:	11 05       	cpc	r17, r1
     766:	79 f7       	brne	.-34     	; 0x746 <_Z11readVoltagev+0x2a>
	{
		 voltage= myADS1115.readVoltage();
		 voltageSum=voltageSum+voltage;
	}
	voltage = voltageSum/16;
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e8       	ldi	r20, 0x80	; 128
     76e:	5d e3       	ldi	r21, 0x3D	; 61
     770:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3>
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
	char buffer0[10];
	//Convert double to stringw
	dtostrf(voltage, 6, 3, buffer0);
     778:	8e 01       	movw	r16, r28
     77a:	0f 5f       	subi	r16, 0xFF	; 255
     77c:	1f 4f       	sbci	r17, 0xFF	; 255
     77e:	23 e0       	ldi	r18, 0x03	; 3
     780:	46 e0       	ldi	r20, 0x06	; 6
     782:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <dtostrf>
	//dtostrf(voltagePot,4,2,buffer1);
	myUART.uart_transmit_string(wiperv_msg);
     786:	64 e0       	ldi	r22, 0x04	; 4
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	8a ea       	ldi	r24, 0xAA	; 170
     78c:	93 e0       	ldi	r25, 0x03	; 3
     78e:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     792:	b8 01       	movw	r22, r16
     794:	8a ea       	ldi	r24, 0xAA	; 170
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
	
	//get dB
	double dB = myVolTodB.getdB(voltage);
     79c:	b7 01       	movw	r22, r14
     79e:	a6 01       	movw	r20, r12
     7a0:	87 ea       	ldi	r24, 0xA7	; 167
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7VolTodB5getdBEd>
	dtostrf(dB, 6, 3, buffer0);
     7a8:	23 e0       	ldi	r18, 0x03	; 3
     7aa:	46 e0       	ldi	r20, 0x06	; 6
     7ac:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <dtostrf>
	char temp_msg[]="dB";
     7b0:	84 e6       	ldi	r24, 0x64	; 100
     7b2:	92 e4       	ldi	r25, 0x42	; 66
     7b4:	a0 e0       	ldi	r26, 0x00	; 0
     7b6:	8b 87       	std	Y+11, r24	; 0x0b
     7b8:	9c 87       	std	Y+12, r25	; 0x0c
     7ba:	ad 87       	std	Y+13, r26	; 0x0d
	myUART.uart_transmit_string(temp_msg);
     7bc:	be 01       	movw	r22, r28
     7be:	65 5f       	subi	r22, 0xF5	; 245
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	8a ea       	ldi	r24, 0xAA	; 170
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     7ca:	b8 01       	movw	r22, r16
     7cc:	8a ea       	ldi	r24, 0xAA	; 170
     7ce:	93 e0       	ldi	r25, 0x03	; 3
     7d0:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
	
	return voltage;
}
     7d4:	c7 01       	movw	r24, r14
     7d6:	b6 01       	movw	r22, r12
     7d8:	2d 96       	adiw	r28, 0x0d	; 13
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	08 95       	ret

000007f6 <_Z10moveUpDowni>:
		
}

void moveUpDown(int stepup){
	
	myStepper.step(stepup);
     7f6:	bc 01       	movw	r22, r24
     7f8:	8b ea       	ldi	r24, 0xAB	; 171
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN7Stepper4stepEi>
     800:	2f ef       	ldi	r18, 0xFF	; 255
     802:	83 ec       	ldi	r24, 0xC3	; 195
     804:	99 e0       	ldi	r25, 0x09	; 9
     806:	21 50       	subi	r18, 0x01	; 1
     808:	80 40       	sbci	r24, 0x00	; 0
     80a:	90 40       	sbci	r25, 0x00	; 0
     80c:	e1 f7       	brne	.-8      	; 0x806 <_Z10moveUpDowni+0x10>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <_Z10moveUpDowni+0x1a>
     810:	00 00       	nop
	_delay_ms(200);
	myStepper.motorOff();
     812:	8b ea       	ldi	r24, 0xAB	; 171
     814:	93 e0       	ldi	r25, 0x03	; 3
     816:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN7Stepper8motorOffEv>
     81a:	2f ef       	ldi	r18, 0xFF	; 255
     81c:	83 ed       	ldi	r24, 0xD3	; 211
     81e:	90 e3       	ldi	r25, 0x30	; 48
     820:	21 50       	subi	r18, 0x01	; 1
     822:	80 40       	sbci	r24, 0x00	; 0
     824:	90 40       	sbci	r25, 0x00	; 0
     826:	e1 f7       	brne	.-8      	; 0x820 <_Z10moveUpDowni+0x2a>
     828:	00 c0       	rjmp	.+0      	; 0x82a <_Z10moveUpDowni+0x34>
     82a:	00 00       	nop
	_delay_ms(1000);
	readVoltage();
     82c:	0e 94 8e 03 	call	0x71c	; 0x71c <_Z11readVoltagev>
     830:	08 95       	ret

00000832 <_Z15readVoltageLitev>:
}

double readVoltageLite(){
	
	double voltage=0;
	voltage= myADS1115.readVoltage();
     832:	88 ea       	ldi	r24, 0xA8	; 168
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_ZN7ADS111511readVoltageEv>
	return voltage;
}
     83a:	08 95       	ret

0000083c <_Z5resetv>:

void reset(){
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	2c 97       	sbiw	r28, 0x0c	; 12
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
	    double presentVol= readVoltageLite();
     858:	0e 94 19 04 	call	0x832	; 0x832 <_Z15readVoltageLitev>
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
		double downLimit= 0.7;
		double upperLimit=4.0;
		
		//Move with big steps
		if (presentVol>downLimit)
     860:	23 e3       	ldi	r18, 0x33	; 51
     862:	33 e3       	ldi	r19, 0x33	; 51
     864:	43 e3       	ldi	r20, 0x33	; 51
     866:	5f e3       	ldi	r21, 0x3F	; 63
     868:	0e 94 2e 0a 	call	0x145c	; 0x145c <__gesf2>
     86c:	18 16       	cp	r1, r24
     86e:	64 f5       	brge	.+88     	; 0x8c8 <_Z5resetv+0x8c>
		{
			int tempStep= ((presentVol-0.7)/0.028)*STEP_TO_DOWN;
     870:	23 e3       	ldi	r18, 0x33	; 51
     872:	33 e3       	ldi	r19, 0x33	; 51
     874:	43 e3       	ldi	r20, 0x33	; 51
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	c7 01       	movw	r24, r14
     87a:	b6 01       	movw	r22, r12
     87c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__subsf3>
     880:	22 e4       	ldi	r18, 0x42	; 66
     882:	30 e6       	ldi	r19, 0x60	; 96
     884:	45 ee       	ldi	r20, 0xE5	; 229
     886:	5c e3       	ldi	r21, 0x3C	; 60
     888:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divsf3>
     88c:	6b 01       	movw	r12, r22
     88e:	7c 01       	movw	r14, r24
     890:	60 91 00 01 	lds	r22, 0x0100
     894:	70 91 01 01 	lds	r23, 0x0101
     898:	88 27       	eor	r24, r24
     89a:	77 fd       	sbrc	r23, 7
     89c:	80 95       	com	r24
     89e:	98 2f       	mov	r25, r24
     8a0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__floatsisf>
     8a4:	9b 01       	movw	r18, r22
     8a6:	ac 01       	movw	r20, r24
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3>
     8b0:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fixsfsi>
			moveUpDownLite(tempStep);
     8b4:	cb 01       	movw	r24, r22
     8b6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14moveUpDownLitei>
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <_Z5resetv+0x8c>
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
		{
			moveUpDownLite(STEP_TO_DOWN);
     8bc:	80 91 00 01 	lds	r24, 0x0100
     8c0:	90 91 01 01 	lds	r25, 0x0101
     8c4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14moveUpDownLitei>
			int tempStep= ((presentVol-0.7)/0.028)*STEP_TO_DOWN;
			moveUpDownLite(tempStep);
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
     8c8:	0e 94 19 04 	call	0x832	; 0x832 <_Z15readVoltageLitev>
     8cc:	23 e3       	ldi	r18, 0x33	; 51
     8ce:	33 e3       	ldi	r19, 0x33	; 51
     8d0:	43 e3       	ldi	r20, 0x33	; 51
     8d2:	5f e3       	ldi	r21, 0x3F	; 63
     8d4:	0e 94 2e 0a 	call	0x145c	; 0x145c <__gesf2>
     8d8:	18 16       	cp	r1, r24
     8da:	84 f3       	brlt	.-32     	; 0x8bc <_Z5resetv+0x80>
		{
			moveUpDownLite(STEP_TO_DOWN);
		}
		
		double initVolt=readVoltageLite();
     8dc:	0e 94 19 04 	call	0x832	; 0x832 <_Z15readVoltageLitev>
     8e0:	ab 01       	movw	r20, r22
     8e2:	bc 01       	movw	r22, r24
		myVolTodB.setInitVoltage(initVolt);
     8e4:	87 ea       	ldi	r24, 0xA7	; 167
     8e6:	93 e0       	ldi	r25, 0x03	; 3
     8e8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN7VolTodB14setInitVoltageEd>
		
		//Finish reset
		char msg[]="Reset down!";
     8ec:	8c e0       	ldi	r24, 0x0C	; 12
     8ee:	e6 e8       	ldi	r30, 0x86	; 134
     8f0:	f3 e0       	ldi	r31, 0x03	; 3
     8f2:	de 01       	movw	r26, r28
     8f4:	11 96       	adiw	r26, 0x01	; 1
     8f6:	01 90       	ld	r0, Z+
     8f8:	0d 92       	st	X+, r0
     8fa:	8a 95       	dec	r24
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <_Z5resetv+0xba>
		myUART.uart_transmit_string(msg);
     8fe:	be 01       	movw	r22, r28
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	8a ea       	ldi	r24, 0xAA	; 170
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
}
     90c:	2c 96       	adiw	r28, 0x0c	; 12
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	cf 90       	pop	r12
     924:	08 95       	ret

00000926 <_Z13goToTargetVold>:

void goToTargetVol(double targetVoltage){
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	6b 01       	movw	r12, r22
     938:	7c 01       	movw	r14, r24
	double presentVoltage= readVoltageLite();
     93a:	0e 94 19 04 	call	0x832	; 0x832 <_Z15readVoltageLitev>
     93e:	4b 01       	movw	r8, r22
     940:	5c 01       	movw	r10, r24
	if (targetVoltage<0.6||targetVoltage>29)
     942:	2a e9       	ldi	r18, 0x9A	; 154
     944:	39 e9       	ldi	r19, 0x99	; 153
     946:	49 e1       	ldi	r20, 0x19	; 25
     948:	5f e3       	ldi	r21, 0x3F	; 63
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     952:	88 23       	and	r24, r24
     954:	0c f4       	brge	.+2      	; 0x958 <_Z13goToTargetVold+0x32>
     956:	7c c0       	rjmp	.+248    	; 0xa50 <_Z13goToTargetVold+0x12a>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	48 ee       	ldi	r20, 0xE8	; 232
     95e:	51 e4       	ldi	r21, 0x41	; 65
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 2e 0a 	call	0x145c	; 0x145c <__gesf2>
     968:	18 16       	cp	r1, r24
     96a:	0c f4       	brge	.+2      	; 0x96e <_Z13goToTargetVold+0x48>
     96c:	71 c0       	rjmp	.+226    	; 0xa50 <_Z13goToTargetVold+0x12a>
	{
	}
	else{
	if (targetVoltage>presentVoltage)
     96e:	a7 01       	movw	r20, r14
     970:	96 01       	movw	r18, r12
     972:	c5 01       	movw	r24, r10
     974:	b4 01       	movw	r22, r8
     976:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     97a:	88 23       	and	r24, r24
     97c:	ac f5       	brge	.+106    	; 0x9e8 <_Z13goToTargetVold+0xc2>
	{
		int tempStep= ((targetVoltage-presentVoltage)/0.03)*STEP_TO_UP;
     97e:	a5 01       	movw	r20, r10
     980:	94 01       	movw	r18, r8
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__subsf3>
     98a:	2f e8       	ldi	r18, 0x8F	; 143
     98c:	32 ec       	ldi	r19, 0xC2	; 194
     98e:	45 ef       	ldi	r20, 0xF5	; 245
     990:	5c e3       	ldi	r21, 0x3C	; 60
     992:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divsf3>
     996:	4b 01       	movw	r8, r22
     998:	5c 01       	movw	r10, r24
     99a:	60 91 02 01 	lds	r22, 0x0102
     99e:	70 91 03 01 	lds	r23, 0x0103
     9a2:	88 27       	eor	r24, r24
     9a4:	77 fd       	sbrc	r23, 7
     9a6:	80 95       	com	r24
     9a8:	98 2f       	mov	r25, r24
     9aa:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__floatsisf>
     9ae:	9b 01       	movw	r18, r22
     9b0:	ac 01       	movw	r20, r24
     9b2:	c5 01       	movw	r24, r10
     9b4:	b4 01       	movw	r22, r8
     9b6:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3>
     9ba:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fixsfsi>
		moveUpDownLite(tempStep);
     9be:	cb 01       	movw	r24, r22
     9c0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14moveUpDownLitei>
		
		while (readVoltageLite()<(targetVoltage))
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <_Z13goToTargetVold+0xac>
		{
			moveUpDownLite(STEP_TO_UP);
     9c6:	80 91 02 01 	lds	r24, 0x0102
     9ca:	90 91 03 01 	lds	r25, 0x0103
     9ce:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14moveUpDownLitei>
	if (targetVoltage>presentVoltage)
	{
		int tempStep= ((targetVoltage-presentVoltage)/0.03)*STEP_TO_UP;
		moveUpDownLite(tempStep);
		
		while (readVoltageLite()<(targetVoltage))
     9d2:	0e 94 19 04 	call	0x832	; 0x832 <_Z15readVoltageLitev>
     9d6:	9b 01       	movw	r18, r22
     9d8:	ac 01       	movw	r20, r24
     9da:	c7 01       	movw	r24, r14
     9dc:	b6 01       	movw	r22, r12
     9de:	0e 94 2e 0a 	call	0x145c	; 0x145c <__gesf2>
     9e2:	18 16       	cp	r1, r24
     9e4:	84 f3       	brlt	.-32     	; 0x9c6 <_Z13goToTargetVold+0xa0>
     9e6:	34 c0       	rjmp	.+104    	; 0xa50 <_Z13goToTargetVold+0x12a>
		}
		
		
	}
	else{
		int tempStep= ((presentVoltage-targetVoltage)/0.03)*STEP_TO_DOWN;
     9e8:	a7 01       	movw	r20, r14
     9ea:	96 01       	movw	r18, r12
     9ec:	c5 01       	movw	r24, r10
     9ee:	b4 01       	movw	r22, r8
     9f0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__subsf3>
     9f4:	2f e8       	ldi	r18, 0x8F	; 143
     9f6:	32 ec       	ldi	r19, 0xC2	; 194
     9f8:	45 ef       	ldi	r20, 0xF5	; 245
     9fa:	5c e3       	ldi	r21, 0x3C	; 60
     9fc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divsf3>
     a00:	4b 01       	movw	r8, r22
     a02:	5c 01       	movw	r10, r24
     a04:	60 91 00 01 	lds	r22, 0x0100
     a08:	70 91 01 01 	lds	r23, 0x0101
     a0c:	88 27       	eor	r24, r24
     a0e:	77 fd       	sbrc	r23, 7
     a10:	80 95       	com	r24
     a12:	98 2f       	mov	r25, r24
     a14:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__floatsisf>
     a18:	9b 01       	movw	r18, r22
     a1a:	ac 01       	movw	r20, r24
     a1c:	c5 01       	movw	r24, r10
     a1e:	b4 01       	movw	r22, r8
     a20:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3>
     a24:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fixsfsi>
		moveUpDownLite(tempStep);
     a28:	cb 01       	movw	r24, r22
     a2a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14moveUpDownLitei>
		
		while (readVoltageLite()>(targetVoltage))
     a2e:	06 c0       	rjmp	.+12     	; 0xa3c <_Z13goToTargetVold+0x116>
		{
			moveUpDownLite(STEP_TO_DOWN);
     a30:	80 91 00 01 	lds	r24, 0x0100
     a34:	90 91 01 01 	lds	r25, 0x0101
     a38:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14moveUpDownLitei>
	}
	else{
		int tempStep= ((presentVoltage-targetVoltage)/0.03)*STEP_TO_DOWN;
		moveUpDownLite(tempStep);
		
		while (readVoltageLite()>(targetVoltage))
     a3c:	0e 94 19 04 	call	0x832	; 0x832 <_Z15readVoltageLitev>
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	c7 01       	movw	r24, r14
     a46:	b6 01       	movw	r22, r12
     a48:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     a4c:	88 23       	and	r24, r24
     a4e:	84 f3       	brlt	.-32     	; 0xa30 <_Z13goToTargetVold+0x10a>
		{
			moveUpDownLite(STEP_TO_DOWN);
		}
	}
	}
	readVoltage();
     a50:	0e 94 8e 03 	call	0x71c	; 0x71c <_Z11readVoltagev>
}
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	af 90       	pop	r10
     a60:	9f 90       	pop	r9
     a62:	8f 90       	pop	r8
     a64:	08 95       	ret

00000a66 <__vector_18>:
		stepperStop();
}



ISR (USART_RX_vect){
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	11 24       	eor	r1, r1
     a70:	cf 92       	push	r12
     a72:	df 92       	push	r13
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	2f 93       	push	r18
     a7e:	3f 93       	push	r19
     a80:	4f 93       	push	r20
     a82:	5f 93       	push	r21
     a84:	6f 93       	push	r22
     a86:	7f 93       	push	r23
     a88:	8f 93       	push	r24
     a8a:	9f 93       	push	r25
     a8c:	af 93       	push	r26
     a8e:	bf 93       	push	r27
     a90:	ef 93       	push	r30
     a92:	ff 93       	push	r31
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	2a 97       	sbiw	r28, 0x0a	; 10
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	cd bf       	out	0x3d, r28	; 61
	char userInput = UDR0;
     aa2:	e6 ec       	ldi	r30, 0xC6	; 198
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	20 81       	ld	r18, Z
	UDR0=userInput; // echo back
     aa8:	20 83       	st	Z, r18
	
	if (userInput !=9) //tab - use to confirm the input
     aaa:	29 30       	cpi	r18, 0x09	; 9
     aac:	81 f0       	breq	.+32     	; 0xace <__vector_18+0x68>
	{
		userInputSub=userInput;//store the last input
     aae:	20 93 9c 03 	sts	0x039C, r18
		userInputString[userInputIdex]=userInput;//store the string input
     ab2:	80 91 9a 03 	lds	r24, 0x039A
     ab6:	90 91 9b 03 	lds	r25, 0x039B
     aba:	fc 01       	movw	r30, r24
     abc:	e3 56       	subi	r30, 0x63	; 99
     abe:	fc 4f       	sbci	r31, 0xFC	; 252
     ac0:	20 83       	st	Z, r18
		userInputIdex++;
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	90 93 9b 03 	sts	0x039B, r25
     ac8:	80 93 9a 03 	sts	0x039A, r24
     acc:	b7 c0       	rjmp	.+366    	; 0xc3c <__vector_18+0x1d6>
	}
	
	else{
	
	//Setting the mode
	if (userInputSub=='A'||userInputSub=='a')
     ace:	90 91 9c 03 	lds	r25, 0x039C
     ad2:	89 2f       	mov	r24, r25
     ad4:	8f 7d       	andi	r24, 0xDF	; 223
     ad6:	81 34       	cpi	r24, 0x41	; 65
     ad8:	61 f4       	brne	.+24     	; 0xaf2 <__vector_18+0x8c>
	{
		replyList(1);
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 a1 02 	call	0x542	; 0x542 <_Z9replyListi>
		modelA=true;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	80 93 99 03 	sts	0x0399, r24
		modelR=false;
     ae8:	10 92 98 03 	sts	0x0398, r1
		modelT=false;
     aec:	10 92 97 03 	sts	0x0397, r1
     af0:	26 c0       	rjmp	.+76     	; 0xb3e <__vector_18+0xd8>
	}

	else if (userInputSub=='R'||userInputSub=='r') //reset to the minimum attenuation
     af2:	82 35       	cpi	r24, 0x52	; 82
     af4:	61 f4       	brne	.+24     	; 0xb0e <__vector_18+0xa8>
	{
		replyList(3);
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 a1 02 	call	0x542	; 0x542 <_Z9replyListi>
		modelR=true;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 98 03 	sts	0x0398, r24
		modelA=false;
     b04:	10 92 99 03 	sts	0x0399, r1
		modelT=false;
     b08:	10 92 97 03 	sts	0x0397, r1
     b0c:	18 c0       	rjmp	.+48     	; 0xb3e <__vector_18+0xd8>
		
	}
	else if (userInputSub=='T'||userInputSub=='t') //Target voltage mode
     b0e:	84 35       	cpi	r24, 0x54	; 84
     b10:	61 f4       	brne	.+24     	; 0xb2a <__vector_18+0xc4>
	{
		replyList(4);
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 a1 02 	call	0x542	; 0x542 <_Z9replyListi>
		modelR=false;
     b1a:	10 92 98 03 	sts	0x0398, r1
		modelA=false;
     b1e:	10 92 99 03 	sts	0x0399, r1
		modelT=true;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 97 03 	sts	0x0397, r24
     b28:	0a c0       	rjmp	.+20     	; 0xb3e <__vector_18+0xd8>
		
	}
	else if (userInputSub==27)//ESC
     b2a:	9b 31       	cpi	r25, 0x1B	; 27
     b2c:	41 f4       	brne	.+16     	; 0xb3e <__vector_18+0xd8>
	{
		menuStart();
     b2e:	0e 94 02 03 	call	0x604	; 0x604 <_Z9menuStartv>
		modelA=false;
     b32:	10 92 99 03 	sts	0x0399, r1
		modelR=false;
     b36:	10 92 98 03 	sts	0x0398, r1
		modelT=false;
     b3a:	10 92 97 03 	sts	0x0397, r1
	}

	
	//Mode A: Move up or down step by step
	if (modelA)
     b3e:	80 91 99 03 	lds	r24, 0x0399
     b42:	88 23       	and	r24, r24
     b44:	61 f1       	breq	.+88     	; 0xb9e <__vector_18+0x138>
	{
		if (userInputSub=='w'||userInputSub=='W')
     b46:	80 91 9c 03 	lds	r24, 0x039C
     b4a:	8f 7d       	andi	r24, 0xDF	; 223
     b4c:	87 35       	cpi	r24, 0x57	; 87
     b4e:	91 f4       	brne	.+36     	; 0xb74 <__vector_18+0x10e>
		{
			if (readVoltageLite()<4.00)
     b50:	0e 94 19 04 	call	0x832	; 0x832 <_Z15readVoltageLitev>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e8       	ldi	r20, 0x80	; 128
     b5a:	50 e4       	ldi	r21, 0x40	; 64
     b5c:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     b60:	88 23       	and	r24, r24
     b62:	0c f0       	brlt	.+2      	; 0xb66 <__vector_18+0x100>
     b64:	65 c0       	rjmp	.+202    	; 0xc30 <__vector_18+0x1ca>
			{
				moveUpDown(STEP_TO_UP);
     b66:	80 91 02 01 	lds	r24, 0x0102
     b6a:	90 91 03 01 	lds	r25, 0x0103
     b6e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z10moveUpDowni>
     b72:	5e c0       	rjmp	.+188    	; 0xc30 <__vector_18+0x1ca>
			}
			
		}
		else if (userInputSub=='s'||userInputSub=='S')
     b74:	83 35       	cpi	r24, 0x53	; 83
     b76:	09 f0       	breq	.+2      	; 0xb7a <__vector_18+0x114>
     b78:	5b c0       	rjmp	.+182    	; 0xc30 <__vector_18+0x1ca>
		{
			if (readVoltageLite()>0.2)
     b7a:	0e 94 19 04 	call	0x832	; 0x832 <_Z15readVoltageLitev>
     b7e:	2d ec       	ldi	r18, 0xCD	; 205
     b80:	3c ec       	ldi	r19, 0xCC	; 204
     b82:	4c e4       	ldi	r20, 0x4C	; 76
     b84:	5e e3       	ldi	r21, 0x3E	; 62
     b86:	0e 94 2e 0a 	call	0x145c	; 0x145c <__gesf2>
     b8a:	18 16       	cp	r1, r24
     b8c:	0c f0       	brlt	.+2      	; 0xb90 <__vector_18+0x12a>
     b8e:	50 c0       	rjmp	.+160    	; 0xc30 <__vector_18+0x1ca>
			{
				moveUpDown(STEP_TO_DOWN);
     b90:	80 91 00 01 	lds	r24, 0x0100
     b94:	90 91 01 01 	lds	r25, 0x0101
     b98:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z10moveUpDowni>
     b9c:	49 c0       	rjmp	.+146    	; 0xc30 <__vector_18+0x1ca>
			}
			
		}
	}
	
	else if (modelR)
     b9e:	80 91 98 03 	lds	r24, 0x0398
     ba2:	88 23       	and	r24, r24
     ba4:	19 f0       	breq	.+6      	; 0xbac <__vector_18+0x146>
	{
		reset();
     ba6:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z5resetv>
     baa:	42 c0       	rjmp	.+132    	; 0xc30 <__vector_18+0x1ca>
	}
	
	else if (modelT)
     bac:	80 91 97 03 	lds	r24, 0x0397
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <__vector_18+0x150>
     bb4:	3d c0       	rjmp	.+122    	; 0xc30 <__vector_18+0x1ca>
	{
		if (userInputSub=='T'||userInputSub=='t')
     bb6:	80 91 9c 03 	lds	r24, 0x039C
     bba:	8f 7d       	andi	r24, 0xDF	; 223
     bbc:	84 35       	cpi	r24, 0x54	; 84
     bbe:	c1 f1       	breq	.+112    	; 0xc30 <__vector_18+0x1ca>
		{ //do nothing
		}
		else{
		char bufferx[10];
		double dB= atof(userInputString);
     bc0:	8d e9       	ldi	r24, 0x9D	; 157
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <atof>
     bc8:	6b 01       	movw	r12, r22
     bca:	7c 01       	movw	r14, r24
		if (dB>0&&dB<=29)
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	a9 01       	movw	r20, r18
     bd2:	0e 94 2e 0a 	call	0x145c	; 0x145c <__gesf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	5c f5       	brge	.+86     	; 0xc30 <__vector_18+0x1ca>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	48 ee       	ldi	r20, 0xE8	; 232
     be0:	51 e4       	ldi	r21, 0x41	; 65
     be2:	c7 01       	movw	r24, r14
     be4:	b6 01       	movw	r22, r12
     be6:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     bea:	18 16       	cp	r1, r24
     bec:	0c f1       	brlt	.+66     	; 0xc30 <__vector_18+0x1ca>
		{
			double targetVol=myVolTodB.getVoltage(dB);
     bee:	b7 01       	movw	r22, r14
     bf0:	a6 01       	movw	r20, r12
     bf2:	87 ea       	ldi	r24, 0xA7	; 167
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN7VolTodB10getVoltageEd>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
			if(targetVol!=0){
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	a9 01       	movw	r20, r18
     c04:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
     c08:	88 23       	and	r24, r24
     c0a:	91 f0       	breq	.+36     	; 0xc30 <__vector_18+0x1ca>
			dtostrf(targetVol,4,2,bufferx);
     c0c:	8e 01       	movw	r16, r28
     c0e:	0f 5f       	subi	r16, 0xFF	; 255
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
     c12:	22 e0       	ldi	r18, 0x02	; 2
     c14:	44 e0       	ldi	r20, 0x04	; 4
     c16:	c7 01       	movw	r24, r14
     c18:	b6 01       	movw	r22, r12
     c1a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <dtostrf>
			myUART.uart_transmit_string(bufferx);
     c1e:	b8 01       	movw	r22, r16
     c20:	8a ea       	ldi	r24, 0xAA	; 170
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN8UARTtool20uart_transmit_stringEPc>
			goToTargetVol(targetVol);
     c28:	c7 01       	movw	r24, r14
     c2a:	b6 01       	movw	r22, r12
     c2c:	0e 94 93 04 	call	0x926	; 0x926 <_Z13goToTargetVold>
			}
		}
		}
	}
	
	strcpy(userInputString,"");
     c30:	10 92 9d 03 	sts	0x039D, r1
	userInputIdex=0;
     c34:	10 92 9b 03 	sts	0x039B, r1
     c38:	10 92 9a 03 	sts	0x039A, r1
	}
	

	
	
}
     c3c:	2a 96       	adiw	r28, 0x0a	; 10
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	ff 91       	pop	r31
     c4e:	ef 91       	pop	r30
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	9f 91       	pop	r25
     c56:	8f 91       	pop	r24
     c58:	7f 91       	pop	r23
     c5a:	6f 91       	pop	r22
     c5c:	5f 91       	pop	r21
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <_GLOBAL__sub_I_myStepper>:
#include "ADC.h"
#include "UARTtool.h"
#include "Menu.h"
#include "VolTodB.h"

Stepper  myStepper;
     c7a:	8b ea       	ldi	r24, 0xAB	; 171
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN7StepperC1Ev>
UARTtool myUART;
     c82:	8a ea       	ldi	r24, 0xAA	; 170
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN8UARTtoolC1Ev>
ADC2     myADC;
     c8a:	89 ea       	ldi	r24, 0xA9	; 169
     c8c:	93 e0       	ldi	r25, 0x03	; 3
     c8e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN4ADC2C1Ev>
ADS1115  myADS1115;
     c92:	88 ea       	ldi	r24, 0xA8	; 168
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN7ADS1115C1Ev>
VolTodB  myVolTodB;
     c9a:	87 ea       	ldi	r24, 0xA7	; 167
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	0e 94 81 01 	call	0x302	; 0x302 <_ZN7VolTodBC1Ev>
     ca2:	08 95       	ret

00000ca4 <_ZN6MillisC1Ev>:
uint64_t _millis = 0;
uint16_t _1000us = 0;
uint64_t old_millis = 0;
	

Millis::Millis(void){
     ca4:	08 95       	ret

00000ca6 <__vector_16>:
	;
	}

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
	_1000us += 128;
     cc6:	e0 91 bf 03 	lds	r30, 0x03BF
     cca:	f0 91 c0 03 	lds	r31, 0x03C0
     cce:	e0 58       	subi	r30, 0x80	; 128
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	f0 93 c0 03 	sts	0x03C0, r31
     cd6:	e0 93 bf 03 	sts	0x03BF, r30
	while (_1000us > 1000) {
     cda:	e9 3e       	cpi	r30, 0xE9	; 233
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	f8 07       	cpc	r31, r24
     ce0:	68 f1       	brcs	.+90     	; 0xd3c <__vector_16+0x96>
     ce2:	20 91 c1 03 	lds	r18, 0x03C1
     ce6:	30 91 c2 03 	lds	r19, 0x03C2
     cea:	40 91 c3 03 	lds	r20, 0x03C3
     cee:	50 91 c4 03 	lds	r21, 0x03C4
     cf2:	60 91 c5 03 	lds	r22, 0x03C5
     cf6:	70 91 c6 03 	lds	r23, 0x03C6
     cfa:	80 91 c7 03 	lds	r24, 0x03C7
     cfe:	90 91 c8 03 	lds	r25, 0x03C8
		_millis++;
     d02:	a1 e0       	ldi	r26, 0x01	; 1
     d04:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__adddi3_s8>
		_1000us -= 1000;
     d08:	e8 5e       	subi	r30, 0xE8	; 232
     d0a:	f3 40       	sbci	r31, 0x03	; 3

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
	_1000us += 128;
	while (_1000us > 1000) {
     d0c:	e9 3e       	cpi	r30, 0xE9	; 233
     d0e:	a3 e0       	ldi	r26, 0x03	; 3
     d10:	fa 07       	cpc	r31, r26
     d12:	b8 f7       	brcc	.-18     	; 0xd02 <__vector_16+0x5c>
     d14:	20 93 c1 03 	sts	0x03C1, r18
     d18:	30 93 c2 03 	sts	0x03C2, r19
     d1c:	40 93 c3 03 	sts	0x03C3, r20
     d20:	50 93 c4 03 	sts	0x03C4, r21
     d24:	60 93 c5 03 	sts	0x03C5, r22
     d28:	70 93 c6 03 	sts	0x03C6, r23
     d2c:	80 93 c7 03 	sts	0x03C7, r24
     d30:	90 93 c8 03 	sts	0x03C8, r25
     d34:	f0 93 c0 03 	sts	0x03C0, r31
     d38:	e0 93 bf 03 	sts	0x03BF, r30
		_millis++;
		_1000us -= 1000;
	}
}
     d3c:	ff 91       	pop	r31
     d3e:	ef 91       	pop	r30
     d40:	af 91       	pop	r26
     d42:	9f 91       	pop	r25
     d44:	8f 91       	pop	r24
     d46:	7f 91       	pop	r23
     d48:	6f 91       	pop	r22
     d4a:	5f 91       	pop	r21
     d4c:	4f 91       	pop	r20
     d4e:	3f 91       	pop	r19
     d50:	2f 91       	pop	r18
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <_ZN6Millis6millisEv>:

// safe access to millis counter
uint64_t Millis::millis() {
	uint64_t m;
	cli();
     d5c:	f8 94       	cli
	m = _millis;
     d5e:	20 91 c1 03 	lds	r18, 0x03C1
     d62:	30 91 c2 03 	lds	r19, 0x03C2
     d66:	40 91 c3 03 	lds	r20, 0x03C3
     d6a:	50 91 c4 03 	lds	r21, 0x03C4
     d6e:	60 91 c5 03 	lds	r22, 0x03C5
     d72:	70 91 c6 03 	lds	r23, 0x03C6
     d76:	80 91 c7 03 	lds	r24, 0x03C7
     d7a:	90 91 c8 03 	lds	r25, 0x03C8
	sei();
     d7e:	78 94       	sei
	return m;
}
     d80:	08 95       	ret

00000d82 <_ZN6Millis5setupEv>:
	//PORTB |= _BV(PB3); // turn the LED on

	/* interrup setup */
	// prescale timer0 to 1/8th the clock rate
	// overflow timer0 every 0.256 ms
	TCCR0B |= (1<<CS01);
     d82:	85 b5       	in	r24, 0x25	; 37
     d84:	82 60       	ori	r24, 0x02	; 2
     d86:	85 bd       	out	0x25, r24	; 37
	// enable timer overflow interrupt
	TIMSK0  |= 1<<TOIE0;
     d88:	ee e6       	ldi	r30, 0x6E	; 110
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	81 60       	ori	r24, 0x01	; 1
     d90:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
     d92:	78 94       	sei
     d94:	08 95       	ret

00000d96 <_Z9pin_setupv>:
   }
	
}

void pin_setup(){
	DDRD &= !_BV(5); //PD5  T1
     d96:	8a b1       	in	r24, 0x0a	; 10
     d98:	1a b8       	out	0x0a, r1	; 10
	//DDRD &= !_BV(3); //INT1
	DDRD |= _BV(7);
     d9a:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= _BV(7); //Used to enable the L293D
     d9c:	5f 9a       	sbi	0x0b, 7	; 11
     d9e:	08 95       	ret

00000da0 <_Z14register_setupv>:
	
}

void register_setup(){
	//Enable T1
	TCCR1B |= _BV(CS10) | _BV(CS11) | _BV(CS12);
     da0:	e1 e8       	ldi	r30, 0x81	; 129
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	87 60       	ori	r24, 0x07	; 7
     da8:	80 83       	st	Z, r24
     daa:	08 95       	ret

00000dac <main>:
Menu     myMenu;


int main(void)
{
	pin_setup();
     dac:	0e 94 cb 06 	call	0xd96	; 0xd96 <_Z9pin_setupv>
	register_setup();
     db0:	0e 94 d0 06 	call	0xda0	; 0xda0 <_Z14register_setupv>
	sei();
     db4:	78 94       	sei
	myMenu.MenuStart();
     db6:	89 ec       	ldi	r24, 0xC9	; 201
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 81 03 	call	0x702	; 0x702 <_ZN4Menu9MenuStartEv>
     dbe:	ff cf       	rjmp	.-2      	; 0xdbe <main+0x12>

00000dc0 <_GLOBAL__sub_I_myMenu>:
#include "Menu.h"

void pin_setup();
void register_setup();

Menu     myMenu;
     dc0:	89 ec       	ldi	r24, 0xC9	; 201
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4MenuC1Ev>
     dc8:	08 95       	ret

00000dca <_ZN7StepperC1Ev>:
 *   Sets which wires should control the motor.
 */

Millis myMillis;

Stepper::Stepper()
     dca:	fc 01       	movw	r30, r24
{
  step_number = 0;      // which step the motor is on
     dcc:	15 86       	std	Z+13, r1	; 0x0d
     dce:	14 86       	std	Z+12, r1	; 0x0c
  speed = 0;        // the motor speed, in revolutions per minute
     dd0:	13 82       	std	Z+3, r1	; 0x03
     dd2:	12 82       	std	Z+2, r1	; 0x02
  direction = 0;      // motor direction
     dd4:	11 82       	std	Z+1, r1	; 0x01
     dd6:	10 82       	st	Z, r1
  last_step_time = 0;    // time stamp in ms of the last step taken
     dd8:	10 8a       	std	Z+16, r1	; 0x10
     dda:	11 8a       	std	Z+17, r1	; 0x11
     ddc:	12 8a       	std	Z+18, r1	; 0x12
     dde:	13 8a       	std	Z+19, r1	; 0x13
  number_of_steps = 4096;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e1       	ldi	r25, 0x10	; 16
     de4:	91 87       	std	Z+9, r25	; 0x09
     de6:	80 87       	std	Z+8, r24	; 0x08
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);
  */
  
  DDRB= 0X0F;
     de8:	8f e0       	ldi	r24, 0x0F	; 15
     dea:	84 b9       	out	0x04, r24	; 4
  PORTB &= !_BV(0);
     dec:	85 b1       	in	r24, 0x05	; 5
     dee:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(1);
     df0:	85 b1       	in	r24, 0x05	; 5
     df2:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(2);
     df4:	85 b1       	in	r24, 0x05	; 5
     df6:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(3);
     df8:	85 b1       	in	r24, 0x05	; 5
     dfa:	15 b8       	out	0x05, r1	; 5
  
  // pin_count is used by the stepMotor() method:  
  pin_count = 4; 
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	93 87       	std	Z+11, r25	; 0x0b
     e02:	82 87       	std	Z+10, r24	; 0x0a
  
  //Initialize the milis
  
  myMillis.setup();
     e04:	8a ec       	ldi	r24, 0xCA	; 202
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN6Millis5setupEv>
     e0c:	08 95       	ret

00000e0e <_ZN7Stepper8setSpeedEl>:
/*
  Sets the speed in revs per minute

*/
void Stepper::setSpeed(long whatSpeed)
{
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	ec 01       	movw	r28, r24
     e1c:	6a 01       	movw	r12, r20
     e1e:	7b 01       	movw	r14, r22
  step_delay = 60L * 1000L / this->number_of_steps / whatSpeed;
     e20:	28 85       	ldd	r18, Y+8	; 0x08
     e22:	39 85       	ldd	r19, Y+9	; 0x09
     e24:	44 27       	eor	r20, r20
     e26:	37 fd       	sbrc	r19, 7
     e28:	40 95       	com	r20
     e2a:	54 2f       	mov	r21, r20
     e2c:	60 e6       	ldi	r22, 0x60	; 96
     e2e:	7a ee       	ldi	r23, 0xEA	; 234
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 95 0a 	call	0x152a	; 0x152a <__divmodsi4>
     e38:	ca 01       	movw	r24, r20
     e3a:	b9 01       	movw	r22, r18
     e3c:	a7 01       	movw	r20, r14
     e3e:	96 01       	movw	r18, r12
     e40:	0e 94 95 0a 	call	0x152a	; 0x152a <__divmodsi4>
     e44:	2c 83       	std	Y+4, r18	; 0x04
     e46:	3d 83       	std	Y+5, r19	; 0x05
     e48:	4e 83       	std	Y+6, r20	; 0x06
     e4a:	5f 83       	std	Y+7, r21	; 0x07
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	08 95       	ret

00000e5a <_ZN7Stepper9stepMotorEi>:
		PORTB |= _BV(3);
		PORTB &= !_BV(3);
		
	*/
   
	   switch (thisStep) {
     e5a:	61 30       	cpi	r22, 0x01	; 1
     e5c:	71 05       	cpc	r23, r1
     e5e:	91 f0       	breq	.+36     	; 0xe84 <_ZN7Stepper9stepMotorEi+0x2a>
     e60:	1c f4       	brge	.+6      	; 0xe68 <_ZN7Stepper9stepMotorEi+0xe>
     e62:	67 2b       	or	r22, r23
     e64:	41 f0       	breq	.+16     	; 0xe76 <_ZN7Stepper9stepMotorEi+0x1c>
     e66:	08 95       	ret
     e68:	62 30       	cpi	r22, 0x02	; 2
     e6a:	71 05       	cpc	r23, r1
     e6c:	91 f0       	breq	.+36     	; 0xe92 <_ZN7Stepper9stepMotorEi+0x38>
     e6e:	63 30       	cpi	r22, 0x03	; 3
     e70:	71 05       	cpc	r23, r1
     e72:	b1 f0       	breq	.+44     	; 0xea0 <_ZN7Stepper9stepMotorEi+0x46>
     e74:	08 95       	ret
		   
		   case 0:    // 0011
		   PORTB &= !_BV(0);
     e76:	85 b1       	in	r24, 0x05	; 5
     e78:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     e7a:	85 b1       	in	r24, 0x05	; 5
     e7c:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(3);
     e7e:	2b 9a       	sbi	0x05, 3	; 5
		   PORTB |= _BV(2);
     e80:	2a 9a       	sbi	0x05, 2	; 5

		   break;
     e82:	08 95       	ret
		   case 1:    // 0101
           PORTB &= !_BV(0);
     e84:	85 b1       	in	r24, 0x05	; 5
     e86:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     e88:	85 b1       	in	r24, 0x05	; 5
     e8a:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(1);
     e8c:	29 9a       	sbi	0x05, 1	; 5
		   PORTB |= _BV(3);
     e8e:	2b 9a       	sbi	0x05, 3	; 5
		   
		  
		   break;
     e90:	08 95       	ret
		   case 2:    //1100
		  
		   PORTB &= !_BV(2);
     e92:	85 b1       	in	r24, 0x05	; 5
     e94:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     e96:	85 b1       	in	r24, 0x05	; 5
     e98:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(0);
     e9a:	28 9a       	sbi	0x05, 0	; 5
		   PORTB |= _BV(1);
     e9c:	29 9a       	sbi	0x05, 1	; 5

		   break;
     e9e:	08 95       	ret
		   case 3:    //1010
		   PORTB &= !_BV(3);
     ea0:	85 b1       	in	r24, 0x05	; 5
     ea2:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     ea4:	85 b1       	in	r24, 0x05	; 5
     ea6:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(2);
     ea8:	2a 9a       	sbi	0x05, 2	; 5
		   PORTB |= _BV(0);
     eaa:	28 9a       	sbi	0x05, 0	; 5
     eac:	08 95       	ret

00000eae <_ZN7Stepper4stepEi>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
   the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{  
     eae:	2f 92       	push	r2
     eb0:	3f 92       	push	r3
     eb2:	4f 92       	push	r4
     eb4:	5f 92       	push	r5
     eb6:	6f 92       	push	r6
     eb8:	7f 92       	push	r7
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <_ZN7Stepper4stepEi+0x26>
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <_ZN7Stepper4stepEi+0x28>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	8b 83       	std	Y+3, r24	; 0x03
  int steps_left = abs(steps_to_move);  // how many steps to take
     ede:	4b 01       	movw	r8, r22
     ee0:	77 23       	and	r23, r23
     ee2:	24 f4       	brge	.+8      	; 0xeec <_ZN7Stepper4stepEi+0x3e>
     ee4:	88 24       	eor	r8, r8
     ee6:	99 24       	eor	r9, r9
     ee8:	86 1a       	sub	r8, r22
     eea:	97 0a       	sbc	r9, r23
     eec:	9a 82       	std	Y+2, r9	; 0x02
     eee:	89 82       	std	Y+1, r8	; 0x01
  
  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) {direction = 1;}
     ef0:	16 16       	cp	r1, r22
     ef2:	17 06       	cpc	r1, r23
     ef4:	34 f4       	brge	.+12     	; 0xf02 <_ZN7Stepper4stepEi+0x54>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	ab 81       	ldd	r26, Y+3	; 0x03
     efc:	bc 81       	ldd	r27, Y+4	; 0x04
     efe:	8d 93       	st	X+, r24
     f00:	9c 93       	st	X, r25
  if (steps_to_move < 0) {direction = 0;}
     f02:	77 23       	and	r23, r23
     f04:	0c f0       	brlt	.+2      	; 0xf08 <_ZN7Stepper4stepEi+0x5a>
     f06:	83 c0       	rjmp	.+262    	; 0x100e <_ZN7Stepper4stepEi+0x160>
     f08:	eb 81       	ldd	r30, Y+3	; 0x03
     f0a:	fc 81       	ldd	r31, Y+4	; 0x04
     f0c:	11 82       	std	Z+1, r1	; 0x01
     f0e:	10 82       	st	Z, r1
     f10:	7e c0       	rjmp	.+252    	; 0x100e <_ZN7Stepper4stepEi+0x160>
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
  // move only if the appropriate delay has passed:
  if (myMillis.millis() - last_step_time >= step_delay) {//this->step_delay
     f12:	8a ec       	ldi	r24, 0xCA	; 202
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN6Millis6millisEv>
     f1a:	ab 81       	ldd	r26, Y+3	; 0x03
     f1c:	bc 81       	ldd	r27, Y+4	; 0x04
     f1e:	50 96       	adiw	r26, 0x10	; 16
     f20:	ed 90       	ld	r14, X+
     f22:	fd 90       	ld	r15, X+
     f24:	0d 91       	ld	r16, X+
     f26:	1c 91       	ld	r17, X
     f28:	53 97       	sbiw	r26, 0x13	; 19
     f2a:	27 01       	movw	r4, r14
     f2c:	38 01       	movw	r6, r16
     f2e:	77 0c       	add	r7, r7
     f30:	44 08       	sbc	r4, r4
     f32:	54 2c       	mov	r5, r4
     f34:	32 01       	movw	r6, r4
     f36:	ae 2c       	mov	r10, r14
     f38:	bf 2c       	mov	r11, r15
     f3a:	c0 2e       	mov	r12, r16
     f3c:	d1 2e       	mov	r13, r17
     f3e:	e4 2c       	mov	r14, r4
     f40:	f4 2c       	mov	r15, r4
     f42:	04 2d       	mov	r16, r4
     f44:	14 2d       	mov	r17, r4
     f46:	0e 94 c6 0a 	call	0x158c	; 0x158c <__subdi3>
     f4a:	f2 2f       	mov	r31, r18
     f4c:	e3 2f       	mov	r30, r19
     f4e:	14 96       	adiw	r26, 0x04	; 4
     f50:	0d 91       	ld	r16, X+
     f52:	1d 91       	ld	r17, X+
     f54:	2d 91       	ld	r18, X+
     f56:	3c 91       	ld	r19, X
     f58:	17 97       	sbiw	r26, 0x07	; 7
     f5a:	18 01       	movw	r2, r16
     f5c:	29 01       	movw	r4, r18
     f5e:	2f 2f       	mov	r18, r31
     f60:	3e 2f       	mov	r19, r30
     f62:	a2 2c       	mov	r10, r2
     f64:	b3 2c       	mov	r11, r3
     f66:	c4 2c       	mov	r12, r4
     f68:	d5 2c       	mov	r13, r5
     f6a:	e1 2c       	mov	r14, r1
     f6c:	f1 2c       	mov	r15, r1
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	10 e0       	ldi	r17, 0x00	; 0
     f72:	0e 94 cf 0a 	call	0x159e	; 0x159e <__cmpdi2>
     f76:	68 f2       	brcs	.-102    	; 0xf12 <_ZN7Stepper4stepEi+0x64>
      // get the timeStamp of when you stepped:
      last_step_time = myMillis.millis();
     f78:	8a ec       	ldi	r24, 0xCA	; 202
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN6Millis6millisEv>
     f80:	eb 81       	ldd	r30, Y+3	; 0x03
     f82:	fc 81       	ldd	r31, Y+4	; 0x04
     f84:	20 8b       	std	Z+16, r18	; 0x10
     f86:	31 8b       	std	Z+17, r19	; 0x11
     f88:	42 8b       	std	Z+18, r20	; 0x12
     f8a:	53 8b       	std	Z+19, r21	; 0x13
      // increment or decrement the step number,
      // depending on direction:
      if (direction == 1) {
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	69 f4       	brne	.+26     	; 0xfae <_ZN7Stepper4stepEi+0x100>
        step_number++;
     f94:	84 85       	ldd	r24, Z+12	; 0x0c
     f96:	95 85       	ldd	r25, Z+13	; 0x0d
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	95 87       	std	Z+13, r25	; 0x0d
     f9c:	84 87       	std	Z+12, r24	; 0x0c
        if (step_number == number_of_steps) {
     f9e:	20 85       	ldd	r18, Z+8	; 0x08
     fa0:	31 85       	ldd	r19, Z+9	; 0x09
     fa2:	82 17       	cp	r24, r18
     fa4:	93 07       	cpc	r25, r19
     fa6:	d1 f4       	brne	.+52     	; 0xfdc <_ZN7Stepper4stepEi+0x12e>
          step_number = 0;
     fa8:	15 86       	std	Z+13, r1	; 0x0d
     faa:	14 86       	std	Z+12, r1	; 0x0c
     fac:	17 c0       	rjmp	.+46     	; 0xfdc <_ZN7Stepper4stepEi+0x12e>
        }
      } 
      else { 
        if (step_number == 0) {
     fae:	ab 81       	ldd	r26, Y+3	; 0x03
     fb0:	bc 81       	ldd	r27, Y+4	; 0x04
     fb2:	1c 96       	adiw	r26, 0x0c	; 12
     fb4:	8d 91       	ld	r24, X+
     fb6:	9c 91       	ld	r25, X
     fb8:	1d 97       	sbiw	r26, 0x0d	; 13
     fba:	89 2b       	or	r24, r25
     fbc:	41 f4       	brne	.+16     	; 0xfce <_ZN7Stepper4stepEi+0x120>
         step_number = number_of_steps;
     fbe:	18 96       	adiw	r26, 0x08	; 8
     fc0:	8d 91       	ld	r24, X+
     fc2:	9c 91       	ld	r25, X
     fc4:	19 97       	sbiw	r26, 0x09	; 9
     fc6:	1d 96       	adiw	r26, 0x0d	; 13
     fc8:	9c 93       	st	X, r25
     fca:	8e 93       	st	-X, r24
     fcc:	1c 97       	sbiw	r26, 0x0c	; 12
        }
        step_number--;
     fce:	eb 81       	ldd	r30, Y+3	; 0x03
     fd0:	fc 81       	ldd	r31, Y+4	; 0x04
     fd2:	84 85       	ldd	r24, Z+12	; 0x0c
     fd4:	95 85       	ldd	r25, Z+13	; 0x0d
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	95 87       	std	Z+13, r25	; 0x0d
     fda:	84 87       	std	Z+12, r24	; 0x0c
      }
      // decrement the steps left:
      steps_left--;
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 4);
     fe6:	ab 81       	ldd	r26, Y+3	; 0x03
     fe8:	bc 81       	ldd	r27, Y+4	; 0x04
     fea:	1c 96       	adiw	r26, 0x0c	; 12
     fec:	6d 91       	ld	r22, X+
     fee:	7c 91       	ld	r23, X
     ff0:	1d 97       	sbiw	r26, 0x0d	; 13
     ff2:	63 70       	andi	r22, 0x03	; 3
     ff4:	70 78       	andi	r23, 0x80	; 128
     ff6:	77 23       	and	r23, r23
     ff8:	34 f4       	brge	.+12     	; 0x1006 <_ZN7Stepper4stepEi+0x158>
     ffa:	61 50       	subi	r22, 0x01	; 1
     ffc:	71 09       	sbc	r23, r1
     ffe:	6c 6f       	ori	r22, 0xFC	; 252
    1000:	7f 6f       	ori	r23, 0xFF	; 255
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN7Stepper9stepMotorEi>
  if (steps_to_move > 0) {direction = 1;}
  if (steps_to_move < 0) {direction = 0;}
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
    100e:	e9 81       	ldd	r30, Y+1	; 0x01
    1010:	fa 81       	ldd	r31, Y+2	; 0x02
    1012:	1e 16       	cp	r1, r30
    1014:	1f 06       	cpc	r1, r31
    1016:	0c f4       	brge	.+2      	; 0x101a <_ZN7Stepper4stepEi+0x16c>
    1018:	7c cf       	rjmp	.-264    	; 0xf12 <_ZN7Stepper4stepEi+0x64>
      steps_left--;
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 4);
    }
  }
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	5f 90       	pop	r5
    1040:	4f 90       	pop	r4
    1042:	3f 90       	pop	r3
    1044:	2f 90       	pop	r2
    1046:	08 95       	ret

00001048 <_ZN7Stepper8motorOffEv>:
{
     //digitalWrite(motor_pin_1, LOW);
     //digitalWrite(motor_pin_2, LOW);
     //digitalWrite(motor_pin_3, LOW);
     //digitalWrite(motor_pin_4, LOW);
	  PORTB &= !_BV(0);
    1048:	85 b1       	in	r24, 0x05	; 5
    104a:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(1);
    104c:	85 b1       	in	r24, 0x05	; 5
    104e:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(2);
    1050:	85 b1       	in	r24, 0x05	; 5
    1052:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(3);
    1054:	85 b1       	in	r24, 0x05	; 5
    1056:	15 b8       	out	0x05, r1	; 5
    1058:	08 95       	ret

0000105a <_GLOBAL__sub_I_myMillis>:
/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */

Millis myMillis;
    105a:	8a ec       	ldi	r24, 0xCA	; 202
    105c:	93 e0       	ldi	r25, 0x03	; 3
    105e:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN6MillisC1Ev>
    1062:	08 95       	ret

00001064 <_ZN8UARTtoolC1Ev>:
#include "UARTtool.h"
#include <avr/io.h>
#include <string.h>

UARTtool::UARTtool(){
	UBRR0H = (BAUDRATE>>8);                      // shift the register right by 8 bits
    1064:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;                           // set baud rate
    1068:	87 e6       	ldi	r24, 0x67	; 103
    106a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B|= (1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);                // enable receiver and transmitter
    106e:	e1 ec       	ldi	r30, 0xC1	; 193
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 69       	ori	r24, 0x98	; 152
    1076:	80 83       	st	Z, r24
	UCSR0C|= (0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);   // 8bit data format
    1078:	e2 ec       	ldi	r30, 0xC2	; 194
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	86 60       	ori	r24, 0x06	; 6
    1080:	80 83       	st	Z, r24
    1082:	08 95       	ret

00001084 <_ZN8UARTtool13uart_transmitEc>:
	
}

void UARTtool::uart_transmit (char data){
	while (!( UCSR0A & (1<<UDRE0)));                // wait while register is free
    1084:	e0 ec       	ldi	r30, 0xC0	; 192
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	85 ff       	sbrs	r24, 5
    108c:	fd cf       	rjmp	.-6      	; 0x1088 <_ZN8UARTtool13uart_transmitEc+0x4>
	UDR0 = data;
    108e:	60 93 c6 00 	sts	0x00C6, r22
    1092:	08 95       	ret

00001094 <_ZN8UARTtool20uart_transmit_stringEPc>:
}

void UARTtool::uart_transmit_string(char data[]){
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	7c 01       	movw	r14, r24
	
	int i= strlen(data);
    10a6:	fb 01       	movw	r30, r22
    10a8:	01 90       	ld	r0, Z+
    10aa:	00 20       	and	r0, r0
    10ac:	e9 f7       	brne	.-6      	; 0x10a8 <_ZN8UARTtool20uart_transmit_stringEPc+0x14>
    10ae:	31 97       	sbiw	r30, 0x01	; 1
    10b0:	6f 01       	movw	r12, r30
    10b2:	c6 1a       	sub	r12, r22
    10b4:	d7 0a       	sbc	r13, r23
	for (int j=0;j<=i;j++)
    10b6:	6a f0       	brmi	.+26     	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc+0x3e>
    10b8:	8b 01       	movw	r16, r22
    10ba:	c0 e0       	ldi	r28, 0x00	; 0
    10bc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uart_transmit(data[j]);
    10be:	f8 01       	movw	r30, r16
    10c0:	61 91       	ld	r22, Z+
    10c2:	8f 01       	movw	r16, r30
    10c4:	c7 01       	movw	r24, r14
    10c6:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN8UARTtool13uart_transmitEc>
}

void UARTtool::uart_transmit_string(char data[]){
	
	int i= strlen(data);
	for (int j=0;j<=i;j++)
    10ca:	21 96       	adiw	r28, 0x01	; 1
    10cc:	cc 16       	cp	r12, r28
    10ce:	dd 06       	cpc	r13, r29
    10d0:	b4 f7       	brge	.-20     	; 0x10be <_ZN8UARTtool20uart_transmit_stringEPc+0x2a>
	{
		uart_transmit(data[j]);
		
	}
	uart_transmit(0x0A);
    10d2:	6a e0       	ldi	r22, 0x0A	; 10
    10d4:	c7 01       	movw	r24, r14
    10d6:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN8UARTtool13uart_transmitEc>
	uart_transmit(0x0D);//newline
    10da:	6d e0       	ldi	r22, 0x0D	; 13
    10dc:	c7 01       	movw	r24, r14
    10de:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN8UARTtool13uart_transmitEc>
	
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	08 95       	ret

000010f4 <__subsf3>:
    10f4:	50 58       	subi	r21, 0x80	; 128

000010f6 <__addsf3>:
    10f6:	bb 27       	eor	r27, r27
    10f8:	aa 27       	eor	r26, r26
    10fa:	0e d0       	rcall	.+28     	; 0x1118 <__addsf3x>
    10fc:	75 c1       	rjmp	.+746    	; 0x13e8 <__fp_round>
    10fe:	66 d1       	rcall	.+716    	; 0x13cc <__fp_pscA>
    1100:	30 f0       	brcs	.+12     	; 0x110e <__addsf3+0x18>
    1102:	6b d1       	rcall	.+726    	; 0x13da <__fp_pscB>
    1104:	20 f0       	brcs	.+8      	; 0x110e <__addsf3+0x18>
    1106:	31 f4       	brne	.+12     	; 0x1114 <__addsf3+0x1e>
    1108:	9f 3f       	cpi	r25, 0xFF	; 255
    110a:	11 f4       	brne	.+4      	; 0x1110 <__addsf3+0x1a>
    110c:	1e f4       	brtc	.+6      	; 0x1114 <__addsf3+0x1e>
    110e:	5b c1       	rjmp	.+694    	; 0x13c6 <__fp_nan>
    1110:	0e f4       	brtc	.+2      	; 0x1114 <__addsf3+0x1e>
    1112:	e0 95       	com	r30
    1114:	e7 fb       	bst	r30, 7
    1116:	51 c1       	rjmp	.+674    	; 0x13ba <__fp_inf>

00001118 <__addsf3x>:
    1118:	e9 2f       	mov	r30, r25
    111a:	77 d1       	rcall	.+750    	; 0x140a <__fp_split3>
    111c:	80 f3       	brcs	.-32     	; 0x10fe <__addsf3+0x8>
    111e:	ba 17       	cp	r27, r26
    1120:	62 07       	cpc	r22, r18
    1122:	73 07       	cpc	r23, r19
    1124:	84 07       	cpc	r24, r20
    1126:	95 07       	cpc	r25, r21
    1128:	18 f0       	brcs	.+6      	; 0x1130 <__addsf3x+0x18>
    112a:	71 f4       	brne	.+28     	; 0x1148 <__addsf3x+0x30>
    112c:	9e f5       	brtc	.+102    	; 0x1194 <__addsf3x+0x7c>
    112e:	8f c1       	rjmp	.+798    	; 0x144e <__fp_zero>
    1130:	0e f4       	brtc	.+2      	; 0x1134 <__addsf3x+0x1c>
    1132:	e0 95       	com	r30
    1134:	0b 2e       	mov	r0, r27
    1136:	ba 2f       	mov	r27, r26
    1138:	a0 2d       	mov	r26, r0
    113a:	0b 01       	movw	r0, r22
    113c:	b9 01       	movw	r22, r18
    113e:	90 01       	movw	r18, r0
    1140:	0c 01       	movw	r0, r24
    1142:	ca 01       	movw	r24, r20
    1144:	a0 01       	movw	r20, r0
    1146:	11 24       	eor	r1, r1
    1148:	ff 27       	eor	r31, r31
    114a:	59 1b       	sub	r21, r25
    114c:	99 f0       	breq	.+38     	; 0x1174 <__addsf3x+0x5c>
    114e:	59 3f       	cpi	r21, 0xF9	; 249
    1150:	50 f4       	brcc	.+20     	; 0x1166 <__addsf3x+0x4e>
    1152:	50 3e       	cpi	r21, 0xE0	; 224
    1154:	68 f1       	brcs	.+90     	; 0x11b0 <__addsf3x+0x98>
    1156:	1a 16       	cp	r1, r26
    1158:	f0 40       	sbci	r31, 0x00	; 0
    115a:	a2 2f       	mov	r26, r18
    115c:	23 2f       	mov	r18, r19
    115e:	34 2f       	mov	r19, r20
    1160:	44 27       	eor	r20, r20
    1162:	58 5f       	subi	r21, 0xF8	; 248
    1164:	f3 cf       	rjmp	.-26     	; 0x114c <__addsf3x+0x34>
    1166:	46 95       	lsr	r20
    1168:	37 95       	ror	r19
    116a:	27 95       	ror	r18
    116c:	a7 95       	ror	r26
    116e:	f0 40       	sbci	r31, 0x00	; 0
    1170:	53 95       	inc	r21
    1172:	c9 f7       	brne	.-14     	; 0x1166 <__addsf3x+0x4e>
    1174:	7e f4       	brtc	.+30     	; 0x1194 <__addsf3x+0x7c>
    1176:	1f 16       	cp	r1, r31
    1178:	ba 0b       	sbc	r27, r26
    117a:	62 0b       	sbc	r22, r18
    117c:	73 0b       	sbc	r23, r19
    117e:	84 0b       	sbc	r24, r20
    1180:	ba f0       	brmi	.+46     	; 0x11b0 <__addsf3x+0x98>
    1182:	91 50       	subi	r25, 0x01	; 1
    1184:	a1 f0       	breq	.+40     	; 0x11ae <__addsf3x+0x96>
    1186:	ff 0f       	add	r31, r31
    1188:	bb 1f       	adc	r27, r27
    118a:	66 1f       	adc	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	c2 f7       	brpl	.-16     	; 0x1182 <__addsf3x+0x6a>
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <__addsf3x+0x98>
    1194:	ba 0f       	add	r27, r26
    1196:	62 1f       	adc	r22, r18
    1198:	73 1f       	adc	r23, r19
    119a:	84 1f       	adc	r24, r20
    119c:	48 f4       	brcc	.+18     	; 0x11b0 <__addsf3x+0x98>
    119e:	87 95       	ror	r24
    11a0:	77 95       	ror	r23
    11a2:	67 95       	ror	r22
    11a4:	b7 95       	ror	r27
    11a6:	f7 95       	ror	r31
    11a8:	9e 3f       	cpi	r25, 0xFE	; 254
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <__addsf3x+0x96>
    11ac:	b3 cf       	rjmp	.-154    	; 0x1114 <__addsf3+0x1e>
    11ae:	93 95       	inc	r25
    11b0:	88 0f       	add	r24, r24
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__addsf3x+0x9e>
    11b4:	99 27       	eor	r25, r25
    11b6:	ee 0f       	add	r30, r30
    11b8:	97 95       	ror	r25
    11ba:	87 95       	ror	r24
    11bc:	08 95       	ret

000011be <__cmpsf2>:
    11be:	d9 d0       	rcall	.+434    	; 0x1372 <__fp_cmp>
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <__cmpsf2+0x6>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	08 95       	ret

000011c6 <__divsf3>:
    11c6:	0c d0       	rcall	.+24     	; 0x11e0 <__divsf3x>
    11c8:	0f c1       	rjmp	.+542    	; 0x13e8 <__fp_round>
    11ca:	07 d1       	rcall	.+526    	; 0x13da <__fp_pscB>
    11cc:	40 f0       	brcs	.+16     	; 0x11de <__divsf3+0x18>
    11ce:	fe d0       	rcall	.+508    	; 0x13cc <__fp_pscA>
    11d0:	30 f0       	brcs	.+12     	; 0x11de <__divsf3+0x18>
    11d2:	21 f4       	brne	.+8      	; 0x11dc <__divsf3+0x16>
    11d4:	5f 3f       	cpi	r21, 0xFF	; 255
    11d6:	19 f0       	breq	.+6      	; 0x11de <__divsf3+0x18>
    11d8:	f0 c0       	rjmp	.+480    	; 0x13ba <__fp_inf>
    11da:	51 11       	cpse	r21, r1
    11dc:	39 c1       	rjmp	.+626    	; 0x1450 <__fp_szero>
    11de:	f3 c0       	rjmp	.+486    	; 0x13c6 <__fp_nan>

000011e0 <__divsf3x>:
    11e0:	14 d1       	rcall	.+552    	; 0x140a <__fp_split3>
    11e2:	98 f3       	brcs	.-26     	; 0x11ca <__divsf3+0x4>

000011e4 <__divsf3_pse>:
    11e4:	99 23       	and	r25, r25
    11e6:	c9 f3       	breq	.-14     	; 0x11da <__divsf3+0x14>
    11e8:	55 23       	and	r21, r21
    11ea:	b1 f3       	breq	.-20     	; 0x11d8 <__divsf3+0x12>
    11ec:	95 1b       	sub	r25, r21
    11ee:	55 0b       	sbc	r21, r21
    11f0:	bb 27       	eor	r27, r27
    11f2:	aa 27       	eor	r26, r26
    11f4:	62 17       	cp	r22, r18
    11f6:	73 07       	cpc	r23, r19
    11f8:	84 07       	cpc	r24, r20
    11fa:	38 f0       	brcs	.+14     	; 0x120a <__divsf3_pse+0x26>
    11fc:	9f 5f       	subi	r25, 0xFF	; 255
    11fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	44 1f       	adc	r20, r20
    1206:	aa 1f       	adc	r26, r26
    1208:	a9 f3       	breq	.-22     	; 0x11f4 <__divsf3_pse+0x10>
    120a:	33 d0       	rcall	.+102    	; 0x1272 <__divsf3_pse+0x8e>
    120c:	0e 2e       	mov	r0, r30
    120e:	3a f0       	brmi	.+14     	; 0x121e <__divsf3_pse+0x3a>
    1210:	e0 e8       	ldi	r30, 0x80	; 128
    1212:	30 d0       	rcall	.+96     	; 0x1274 <__divsf3_pse+0x90>
    1214:	91 50       	subi	r25, 0x01	; 1
    1216:	50 40       	sbci	r21, 0x00	; 0
    1218:	e6 95       	lsr	r30
    121a:	00 1c       	adc	r0, r0
    121c:	ca f7       	brpl	.-14     	; 0x1210 <__divsf3_pse+0x2c>
    121e:	29 d0       	rcall	.+82     	; 0x1272 <__divsf3_pse+0x8e>
    1220:	fe 2f       	mov	r31, r30
    1222:	27 d0       	rcall	.+78     	; 0x1272 <__divsf3_pse+0x8e>
    1224:	66 0f       	add	r22, r22
    1226:	77 1f       	adc	r23, r23
    1228:	88 1f       	adc	r24, r24
    122a:	bb 1f       	adc	r27, r27
    122c:	26 17       	cp	r18, r22
    122e:	37 07       	cpc	r19, r23
    1230:	48 07       	cpc	r20, r24
    1232:	ab 07       	cpc	r26, r27
    1234:	b0 e8       	ldi	r27, 0x80	; 128
    1236:	09 f0       	breq	.+2      	; 0x123a <__divsf3_pse+0x56>
    1238:	bb 0b       	sbc	r27, r27
    123a:	80 2d       	mov	r24, r0
    123c:	bf 01       	movw	r22, r30
    123e:	ff 27       	eor	r31, r31
    1240:	93 58       	subi	r25, 0x83	; 131
    1242:	5f 4f       	sbci	r21, 0xFF	; 255
    1244:	2a f0       	brmi	.+10     	; 0x1250 <__divsf3_pse+0x6c>
    1246:	9e 3f       	cpi	r25, 0xFE	; 254
    1248:	51 05       	cpc	r21, r1
    124a:	68 f0       	brcs	.+26     	; 0x1266 <__divsf3_pse+0x82>
    124c:	b6 c0       	rjmp	.+364    	; 0x13ba <__fp_inf>
    124e:	00 c1       	rjmp	.+512    	; 0x1450 <__fp_szero>
    1250:	5f 3f       	cpi	r21, 0xFF	; 255
    1252:	ec f3       	brlt	.-6      	; 0x124e <__divsf3_pse+0x6a>
    1254:	98 3e       	cpi	r25, 0xE8	; 232
    1256:	dc f3       	brlt	.-10     	; 0x124e <__divsf3_pse+0x6a>
    1258:	86 95       	lsr	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f7 95       	ror	r31
    1262:	9f 5f       	subi	r25, 0xFF	; 255
    1264:	c9 f7       	brne	.-14     	; 0x1258 <__divsf3_pse+0x74>
    1266:	88 0f       	add	r24, r24
    1268:	91 1d       	adc	r25, r1
    126a:	96 95       	lsr	r25
    126c:	87 95       	ror	r24
    126e:	97 f9       	bld	r25, 7
    1270:	08 95       	ret
    1272:	e1 e0       	ldi	r30, 0x01	; 1
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	bb 1f       	adc	r27, r27
    127c:	62 17       	cp	r22, r18
    127e:	73 07       	cpc	r23, r19
    1280:	84 07       	cpc	r24, r20
    1282:	ba 07       	cpc	r27, r26
    1284:	20 f0       	brcs	.+8      	; 0x128e <__divsf3_pse+0xaa>
    1286:	62 1b       	sub	r22, r18
    1288:	73 0b       	sbc	r23, r19
    128a:	84 0b       	sbc	r24, r20
    128c:	ba 0b       	sbc	r27, r26
    128e:	ee 1f       	adc	r30, r30
    1290:	88 f7       	brcc	.-30     	; 0x1274 <__divsf3_pse+0x90>
    1292:	e0 95       	com	r30
    1294:	08 95       	ret

00001296 <__fixsfsi>:
    1296:	04 d0       	rcall	.+8      	; 0x12a0 <__fixunssfsi>
    1298:	68 94       	set
    129a:	b1 11       	cpse	r27, r1
    129c:	d9 c0       	rjmp	.+434    	; 0x1450 <__fp_szero>
    129e:	08 95       	ret

000012a0 <__fixunssfsi>:
    12a0:	bc d0       	rcall	.+376    	; 0x141a <__fp_splitA>
    12a2:	88 f0       	brcs	.+34     	; 0x12c6 <__fixunssfsi+0x26>
    12a4:	9f 57       	subi	r25, 0x7F	; 127
    12a6:	90 f0       	brcs	.+36     	; 0x12cc <__fixunssfsi+0x2c>
    12a8:	b9 2f       	mov	r27, r25
    12aa:	99 27       	eor	r25, r25
    12ac:	b7 51       	subi	r27, 0x17	; 23
    12ae:	a0 f0       	brcs	.+40     	; 0x12d8 <__fixunssfsi+0x38>
    12b0:	d1 f0       	breq	.+52     	; 0x12e6 <__fixunssfsi+0x46>
    12b2:	66 0f       	add	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	88 1f       	adc	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	1a f0       	brmi	.+6      	; 0x12c2 <__fixunssfsi+0x22>
    12bc:	ba 95       	dec	r27
    12be:	c9 f7       	brne	.-14     	; 0x12b2 <__fixunssfsi+0x12>
    12c0:	12 c0       	rjmp	.+36     	; 0x12e6 <__fixunssfsi+0x46>
    12c2:	b1 30       	cpi	r27, 0x01	; 1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <__fixunssfsi+0x46>
    12c6:	c3 d0       	rcall	.+390    	; 0x144e <__fp_zero>
    12c8:	b1 e0       	ldi	r27, 0x01	; 1
    12ca:	08 95       	ret
    12cc:	c0 c0       	rjmp	.+384    	; 0x144e <__fp_zero>
    12ce:	67 2f       	mov	r22, r23
    12d0:	78 2f       	mov	r23, r24
    12d2:	88 27       	eor	r24, r24
    12d4:	b8 5f       	subi	r27, 0xF8	; 248
    12d6:	39 f0       	breq	.+14     	; 0x12e6 <__fixunssfsi+0x46>
    12d8:	b9 3f       	cpi	r27, 0xF9	; 249
    12da:	cc f3       	brlt	.-14     	; 0x12ce <__fixunssfsi+0x2e>
    12dc:	86 95       	lsr	r24
    12de:	77 95       	ror	r23
    12e0:	67 95       	ror	r22
    12e2:	b3 95       	inc	r27
    12e4:	d9 f7       	brne	.-10     	; 0x12dc <__fixunssfsi+0x3c>
    12e6:	3e f4       	brtc	.+14     	; 0x12f6 <__fixunssfsi+0x56>
    12e8:	90 95       	com	r25
    12ea:	80 95       	com	r24
    12ec:	70 95       	com	r23
    12ee:	61 95       	neg	r22
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	08 95       	ret

000012f8 <__floatunsisf>:
    12f8:	e8 94       	clt
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <__floatsisf+0x12>

000012fc <__floatsisf>:
    12fc:	97 fb       	bst	r25, 7
    12fe:	3e f4       	brtc	.+14     	; 0x130e <__floatsisf+0x12>
    1300:	90 95       	com	r25
    1302:	80 95       	com	r24
    1304:	70 95       	com	r23
    1306:	61 95       	neg	r22
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	99 23       	and	r25, r25
    1310:	a9 f0       	breq	.+42     	; 0x133c <__floatsisf+0x40>
    1312:	f9 2f       	mov	r31, r25
    1314:	96 e9       	ldi	r25, 0x96	; 150
    1316:	bb 27       	eor	r27, r27
    1318:	93 95       	inc	r25
    131a:	f6 95       	lsr	r31
    131c:	87 95       	ror	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	b7 95       	ror	r27
    1324:	f1 11       	cpse	r31, r1
    1326:	f8 cf       	rjmp	.-16     	; 0x1318 <__floatsisf+0x1c>
    1328:	fa f4       	brpl	.+62     	; 0x1368 <__floatsisf+0x6c>
    132a:	bb 0f       	add	r27, r27
    132c:	11 f4       	brne	.+4      	; 0x1332 <__floatsisf+0x36>
    132e:	60 ff       	sbrs	r22, 0
    1330:	1b c0       	rjmp	.+54     	; 0x1368 <__floatsisf+0x6c>
    1332:	6f 5f       	subi	r22, 0xFF	; 255
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	8f 4f       	sbci	r24, 0xFF	; 255
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	16 c0       	rjmp	.+44     	; 0x1368 <__floatsisf+0x6c>
    133c:	88 23       	and	r24, r24
    133e:	11 f0       	breq	.+4      	; 0x1344 <__floatsisf+0x48>
    1340:	96 e9       	ldi	r25, 0x96	; 150
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <__floatsisf+0x6a>
    1344:	77 23       	and	r23, r23
    1346:	21 f0       	breq	.+8      	; 0x1350 <__floatsisf+0x54>
    1348:	9e e8       	ldi	r25, 0x8E	; 142
    134a:	87 2f       	mov	r24, r23
    134c:	76 2f       	mov	r23, r22
    134e:	05 c0       	rjmp	.+10     	; 0x135a <__floatsisf+0x5e>
    1350:	66 23       	and	r22, r22
    1352:	71 f0       	breq	.+28     	; 0x1370 <__floatsisf+0x74>
    1354:	96 e8       	ldi	r25, 0x86	; 134
    1356:	86 2f       	mov	r24, r22
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	2a f0       	brmi	.+10     	; 0x1368 <__floatsisf+0x6c>
    135e:	9a 95       	dec	r25
    1360:	66 0f       	add	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	88 1f       	adc	r24, r24
    1366:	da f7       	brpl	.-10     	; 0x135e <__floatsisf+0x62>
    1368:	88 0f       	add	r24, r24
    136a:	96 95       	lsr	r25
    136c:	87 95       	ror	r24
    136e:	97 f9       	bld	r25, 7
    1370:	08 95       	ret

00001372 <__fp_cmp>:
    1372:	99 0f       	add	r25, r25
    1374:	00 08       	sbc	r0, r0
    1376:	55 0f       	add	r21, r21
    1378:	aa 0b       	sbc	r26, r26
    137a:	e0 e8       	ldi	r30, 0x80	; 128
    137c:	fe ef       	ldi	r31, 0xFE	; 254
    137e:	16 16       	cp	r1, r22
    1380:	17 06       	cpc	r1, r23
    1382:	e8 07       	cpc	r30, r24
    1384:	f9 07       	cpc	r31, r25
    1386:	c0 f0       	brcs	.+48     	; 0x13b8 <__fp_cmp+0x46>
    1388:	12 16       	cp	r1, r18
    138a:	13 06       	cpc	r1, r19
    138c:	e4 07       	cpc	r30, r20
    138e:	f5 07       	cpc	r31, r21
    1390:	98 f0       	brcs	.+38     	; 0x13b8 <__fp_cmp+0x46>
    1392:	62 1b       	sub	r22, r18
    1394:	73 0b       	sbc	r23, r19
    1396:	84 0b       	sbc	r24, r20
    1398:	95 0b       	sbc	r25, r21
    139a:	39 f4       	brne	.+14     	; 0x13aa <__fp_cmp+0x38>
    139c:	0a 26       	eor	r0, r26
    139e:	61 f0       	breq	.+24     	; 0x13b8 <__fp_cmp+0x46>
    13a0:	23 2b       	or	r18, r19
    13a2:	24 2b       	or	r18, r20
    13a4:	25 2b       	or	r18, r21
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <__fp_cmp+0x3e>
    13a8:	08 95       	ret
    13aa:	0a 26       	eor	r0, r26
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <__fp_cmp+0x3e>
    13ae:	a1 40       	sbci	r26, 0x01	; 1
    13b0:	a6 95       	lsr	r26
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	81 1d       	adc	r24, r1
    13b6:	81 1d       	adc	r24, r1
    13b8:	08 95       	ret

000013ba <__fp_inf>:
    13ba:	97 f9       	bld	r25, 7
    13bc:	9f 67       	ori	r25, 0x7F	; 127
    13be:	80 e8       	ldi	r24, 0x80	; 128
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	08 95       	ret

000013c6 <__fp_nan>:
    13c6:	9f ef       	ldi	r25, 0xFF	; 255
    13c8:	80 ec       	ldi	r24, 0xC0	; 192
    13ca:	08 95       	ret

000013cc <__fp_pscA>:
    13cc:	00 24       	eor	r0, r0
    13ce:	0a 94       	dec	r0
    13d0:	16 16       	cp	r1, r22
    13d2:	17 06       	cpc	r1, r23
    13d4:	18 06       	cpc	r1, r24
    13d6:	09 06       	cpc	r0, r25
    13d8:	08 95       	ret

000013da <__fp_pscB>:
    13da:	00 24       	eor	r0, r0
    13dc:	0a 94       	dec	r0
    13de:	12 16       	cp	r1, r18
    13e0:	13 06       	cpc	r1, r19
    13e2:	14 06       	cpc	r1, r20
    13e4:	05 06       	cpc	r0, r21
    13e6:	08 95       	ret

000013e8 <__fp_round>:
    13e8:	09 2e       	mov	r0, r25
    13ea:	03 94       	inc	r0
    13ec:	00 0c       	add	r0, r0
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <__fp_round+0xc>
    13f0:	88 23       	and	r24, r24
    13f2:	52 f0       	brmi	.+20     	; 0x1408 <__fp_round+0x20>
    13f4:	bb 0f       	add	r27, r27
    13f6:	40 f4       	brcc	.+16     	; 0x1408 <__fp_round+0x20>
    13f8:	bf 2b       	or	r27, r31
    13fa:	11 f4       	brne	.+4      	; 0x1400 <__fp_round+0x18>
    13fc:	60 ff       	sbrs	r22, 0
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <__fp_round+0x20>
    1400:	6f 5f       	subi	r22, 0xFF	; 255
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	8f 4f       	sbci	r24, 0xFF	; 255
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	08 95       	ret

0000140a <__fp_split3>:
    140a:	57 fd       	sbrc	r21, 7
    140c:	90 58       	subi	r25, 0x80	; 128
    140e:	44 0f       	add	r20, r20
    1410:	55 1f       	adc	r21, r21
    1412:	59 f0       	breq	.+22     	; 0x142a <__fp_splitA+0x10>
    1414:	5f 3f       	cpi	r21, 0xFF	; 255
    1416:	71 f0       	breq	.+28     	; 0x1434 <__fp_splitA+0x1a>
    1418:	47 95       	ror	r20

0000141a <__fp_splitA>:
    141a:	88 0f       	add	r24, r24
    141c:	97 fb       	bst	r25, 7
    141e:	99 1f       	adc	r25, r25
    1420:	61 f0       	breq	.+24     	; 0x143a <__fp_splitA+0x20>
    1422:	9f 3f       	cpi	r25, 0xFF	; 255
    1424:	79 f0       	breq	.+30     	; 0x1444 <__fp_splitA+0x2a>
    1426:	87 95       	ror	r24
    1428:	08 95       	ret
    142a:	12 16       	cp	r1, r18
    142c:	13 06       	cpc	r1, r19
    142e:	14 06       	cpc	r1, r20
    1430:	55 1f       	adc	r21, r21
    1432:	f2 cf       	rjmp	.-28     	; 0x1418 <__fp_split3+0xe>
    1434:	46 95       	lsr	r20
    1436:	f1 df       	rcall	.-30     	; 0x141a <__fp_splitA>
    1438:	08 c0       	rjmp	.+16     	; 0x144a <__fp_splitA+0x30>
    143a:	16 16       	cp	r1, r22
    143c:	17 06       	cpc	r1, r23
    143e:	18 06       	cpc	r1, r24
    1440:	99 1f       	adc	r25, r25
    1442:	f1 cf       	rjmp	.-30     	; 0x1426 <__fp_splitA+0xc>
    1444:	86 95       	lsr	r24
    1446:	71 05       	cpc	r23, r1
    1448:	61 05       	cpc	r22, r1
    144a:	08 94       	sec
    144c:	08 95       	ret

0000144e <__fp_zero>:
    144e:	e8 94       	clt

00001450 <__fp_szero>:
    1450:	bb 27       	eor	r27, r27
    1452:	66 27       	eor	r22, r22
    1454:	77 27       	eor	r23, r23
    1456:	cb 01       	movw	r24, r22
    1458:	97 f9       	bld	r25, 7
    145a:	08 95       	ret

0000145c <__gesf2>:
    145c:	8a df       	rcall	.-236    	; 0x1372 <__fp_cmp>
    145e:	08 f4       	brcc	.+2      	; 0x1462 <__gesf2+0x6>
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	08 95       	ret

00001464 <__mulsf3>:
    1464:	0b d0       	rcall	.+22     	; 0x147c <__mulsf3x>
    1466:	c0 cf       	rjmp	.-128    	; 0x13e8 <__fp_round>
    1468:	b1 df       	rcall	.-158    	; 0x13cc <__fp_pscA>
    146a:	28 f0       	brcs	.+10     	; 0x1476 <__mulsf3+0x12>
    146c:	b6 df       	rcall	.-148    	; 0x13da <__fp_pscB>
    146e:	18 f0       	brcs	.+6      	; 0x1476 <__mulsf3+0x12>
    1470:	95 23       	and	r25, r21
    1472:	09 f0       	breq	.+2      	; 0x1476 <__mulsf3+0x12>
    1474:	a2 cf       	rjmp	.-188    	; 0x13ba <__fp_inf>
    1476:	a7 cf       	rjmp	.-178    	; 0x13c6 <__fp_nan>
    1478:	11 24       	eor	r1, r1
    147a:	ea cf       	rjmp	.-44     	; 0x1450 <__fp_szero>

0000147c <__mulsf3x>:
    147c:	c6 df       	rcall	.-116    	; 0x140a <__fp_split3>
    147e:	a0 f3       	brcs	.-24     	; 0x1468 <__mulsf3+0x4>

00001480 <__mulsf3_pse>:
    1480:	95 9f       	mul	r25, r21
    1482:	d1 f3       	breq	.-12     	; 0x1478 <__mulsf3+0x14>
    1484:	95 0f       	add	r25, r21
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	55 1f       	adc	r21, r21
    148a:	62 9f       	mul	r22, r18
    148c:	f0 01       	movw	r30, r0
    148e:	72 9f       	mul	r23, r18
    1490:	bb 27       	eor	r27, r27
    1492:	f0 0d       	add	r31, r0
    1494:	b1 1d       	adc	r27, r1
    1496:	63 9f       	mul	r22, r19
    1498:	aa 27       	eor	r26, r26
    149a:	f0 0d       	add	r31, r0
    149c:	b1 1d       	adc	r27, r1
    149e:	aa 1f       	adc	r26, r26
    14a0:	64 9f       	mul	r22, r20
    14a2:	66 27       	eor	r22, r22
    14a4:	b0 0d       	add	r27, r0
    14a6:	a1 1d       	adc	r26, r1
    14a8:	66 1f       	adc	r22, r22
    14aa:	82 9f       	mul	r24, r18
    14ac:	22 27       	eor	r18, r18
    14ae:	b0 0d       	add	r27, r0
    14b0:	a1 1d       	adc	r26, r1
    14b2:	62 1f       	adc	r22, r18
    14b4:	73 9f       	mul	r23, r19
    14b6:	b0 0d       	add	r27, r0
    14b8:	a1 1d       	adc	r26, r1
    14ba:	62 1f       	adc	r22, r18
    14bc:	83 9f       	mul	r24, r19
    14be:	a0 0d       	add	r26, r0
    14c0:	61 1d       	adc	r22, r1
    14c2:	22 1f       	adc	r18, r18
    14c4:	74 9f       	mul	r23, r20
    14c6:	33 27       	eor	r19, r19
    14c8:	a0 0d       	add	r26, r0
    14ca:	61 1d       	adc	r22, r1
    14cc:	23 1f       	adc	r18, r19
    14ce:	84 9f       	mul	r24, r20
    14d0:	60 0d       	add	r22, r0
    14d2:	21 1d       	adc	r18, r1
    14d4:	82 2f       	mov	r24, r18
    14d6:	76 2f       	mov	r23, r22
    14d8:	6a 2f       	mov	r22, r26
    14da:	11 24       	eor	r1, r1
    14dc:	9f 57       	subi	r25, 0x7F	; 127
    14de:	50 40       	sbci	r21, 0x00	; 0
    14e0:	8a f0       	brmi	.+34     	; 0x1504 <__mulsf3_pse+0x84>
    14e2:	e1 f0       	breq	.+56     	; 0x151c <__mulsf3_pse+0x9c>
    14e4:	88 23       	and	r24, r24
    14e6:	4a f0       	brmi	.+18     	; 0x14fa <__mulsf3_pse+0x7a>
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	bb 1f       	adc	r27, r27
    14ee:	66 1f       	adc	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	91 50       	subi	r25, 0x01	; 1
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__mulsf3_pse+0x64>
    14fa:	9e 3f       	cpi	r25, 0xFE	; 254
    14fc:	51 05       	cpc	r21, r1
    14fe:	70 f0       	brcs	.+28     	; 0x151c <__mulsf3_pse+0x9c>
    1500:	5c cf       	rjmp	.-328    	; 0x13ba <__fp_inf>
    1502:	a6 cf       	rjmp	.-180    	; 0x1450 <__fp_szero>
    1504:	5f 3f       	cpi	r21, 0xFF	; 255
    1506:	ec f3       	brlt	.-6      	; 0x1502 <__mulsf3_pse+0x82>
    1508:	98 3e       	cpi	r25, 0xE8	; 232
    150a:	dc f3       	brlt	.-10     	; 0x1502 <__mulsf3_pse+0x82>
    150c:	86 95       	lsr	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b7 95       	ror	r27
    1514:	f7 95       	ror	r31
    1516:	e7 95       	ror	r30
    1518:	9f 5f       	subi	r25, 0xFF	; 255
    151a:	c1 f7       	brne	.-16     	; 0x150c <__mulsf3_pse+0x8c>
    151c:	fe 2b       	or	r31, r30
    151e:	88 0f       	add	r24, r24
    1520:	91 1d       	adc	r25, r1
    1522:	96 95       	lsr	r25
    1524:	87 95       	ror	r24
    1526:	97 f9       	bld	r25, 7
    1528:	08 95       	ret

0000152a <__divmodsi4>:
    152a:	05 2e       	mov	r0, r21
    152c:	97 fb       	bst	r25, 7
    152e:	1e f4       	brtc	.+6      	; 0x1536 <__divmodsi4+0xc>
    1530:	00 94       	com	r0
    1532:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__negsi2>
    1536:	57 fd       	sbrc	r21, 7
    1538:	07 d0       	rcall	.+14     	; 0x1548 <__divmodsi4_neg2>
    153a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__udivmodsi4>
    153e:	07 fc       	sbrc	r0, 7
    1540:	03 d0       	rcall	.+6      	; 0x1548 <__divmodsi4_neg2>
    1542:	4e f4       	brtc	.+18     	; 0x1556 <__divmodsi4_exit>
    1544:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__negsi2>

00001548 <__divmodsi4_neg2>:
    1548:	50 95       	com	r21
    154a:	40 95       	com	r20
    154c:	30 95       	com	r19
    154e:	21 95       	neg	r18
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	4f 4f       	sbci	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255

00001556 <__divmodsi4_exit>:
    1556:	08 95       	ret

00001558 <__negsi2>:
    1558:	90 95       	com	r25
    155a:	80 95       	com	r24
    155c:	70 95       	com	r23
    155e:	61 95       	neg	r22
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	8f 4f       	sbci	r24, 0xFF	; 255
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	08 95       	ret

00001568 <__tablejump2__>:
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31

0000156c <__tablejump__>:
    156c:	05 90       	lpm	r0, Z+
    156e:	f4 91       	lpm	r31, Z
    1570:	e0 2d       	mov	r30, r0
    1572:	09 94       	ijmp

00001574 <__adddi3_s8>:
    1574:	00 24       	eor	r0, r0
    1576:	a7 fd       	sbrc	r26, 7
    1578:	00 94       	com	r0
    157a:	2a 0f       	add	r18, r26
    157c:	30 1d       	adc	r19, r0
    157e:	40 1d       	adc	r20, r0
    1580:	50 1d       	adc	r21, r0
    1582:	60 1d       	adc	r22, r0
    1584:	70 1d       	adc	r23, r0
    1586:	80 1d       	adc	r24, r0
    1588:	90 1d       	adc	r25, r0
    158a:	08 95       	ret

0000158c <__subdi3>:
    158c:	2a 19       	sub	r18, r10
    158e:	3b 09       	sbc	r19, r11
    1590:	4c 09       	sbc	r20, r12
    1592:	5d 09       	sbc	r21, r13
    1594:	6e 09       	sbc	r22, r14
    1596:	7f 09       	sbc	r23, r15
    1598:	80 0b       	sbc	r24, r16
    159a:	91 0b       	sbc	r25, r17
    159c:	08 95       	ret

0000159e <__cmpdi2>:
    159e:	2a 15       	cp	r18, r10
    15a0:	3b 05       	cpc	r19, r11
    15a2:	4c 05       	cpc	r20, r12
    15a4:	5d 05       	cpc	r21, r13
    15a6:	6e 05       	cpc	r22, r14
    15a8:	7f 05       	cpc	r23, r15
    15aa:	80 07       	cpc	r24, r16
    15ac:	91 07       	cpc	r25, r17
    15ae:	08 95       	ret

000015b0 <__udivmodsi4>:
    15b0:	a1 e2       	ldi	r26, 0x21	; 33
    15b2:	1a 2e       	mov	r1, r26
    15b4:	aa 1b       	sub	r26, r26
    15b6:	bb 1b       	sub	r27, r27
    15b8:	fd 01       	movw	r30, r26
    15ba:	0d c0       	rjmp	.+26     	; 0x15d6 <__udivmodsi4_ep>

000015bc <__udivmodsi4_loop>:
    15bc:	aa 1f       	adc	r26, r26
    15be:	bb 1f       	adc	r27, r27
    15c0:	ee 1f       	adc	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	a2 17       	cp	r26, r18
    15c6:	b3 07       	cpc	r27, r19
    15c8:	e4 07       	cpc	r30, r20
    15ca:	f5 07       	cpc	r31, r21
    15cc:	20 f0       	brcs	.+8      	; 0x15d6 <__udivmodsi4_ep>
    15ce:	a2 1b       	sub	r26, r18
    15d0:	b3 0b       	sbc	r27, r19
    15d2:	e4 0b       	sbc	r30, r20
    15d4:	f5 0b       	sbc	r31, r21

000015d6 <__udivmodsi4_ep>:
    15d6:	66 1f       	adc	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	88 1f       	adc	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	1a 94       	dec	r1
    15e0:	69 f7       	brne	.-38     	; 0x15bc <__udivmodsi4_loop>
    15e2:	60 95       	com	r22
    15e4:	70 95       	com	r23
    15e6:	80 95       	com	r24
    15e8:	90 95       	com	r25
    15ea:	9b 01       	movw	r18, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	bd 01       	movw	r22, r26
    15f0:	cf 01       	movw	r24, r30
    15f2:	08 95       	ret

000015f4 <dtostrf>:
    15f4:	ef 92       	push	r14
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	e8 01       	movw	r28, r16
    1600:	47 ff       	sbrs	r20, 7
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <dtostrf+0x14>
    1604:	34 e1       	ldi	r19, 0x14	; 20
    1606:	01 c0       	rjmp	.+2      	; 0x160a <dtostrf+0x16>
    1608:	34 e0       	ldi	r19, 0x04	; 4
    160a:	e4 2f       	mov	r30, r20
    160c:	ff 27       	eor	r31, r31
    160e:	e7 fd       	sbrc	r30, 7
    1610:	f0 95       	com	r31
    1612:	f7 ff       	sbrs	r31, 7
    1614:	03 c0       	rjmp	.+6      	; 0x161c <dtostrf+0x28>
    1616:	f1 95       	neg	r31
    1618:	e1 95       	neg	r30
    161a:	f1 09       	sbc	r31, r1
    161c:	e3 2e       	mov	r14, r19
    161e:	02 2f       	mov	r16, r18
    1620:	2e 2f       	mov	r18, r30
    1622:	ae 01       	movw	r20, r28
    1624:	0e 94 1f 0b 	call	0x163e	; 0x163e <dtoa_prf>
    1628:	ce 01       	movw	r24, r28
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ef 90       	pop	r14
    1634:	08 95       	ret

00001636 <atof>:
    1636:	66 27       	eor	r22, r22
    1638:	77 27       	eor	r23, r23
    163a:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <strtod>

0000163e <dtoa_prf>:
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	9f 92       	push	r9
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	29 97       	sbiw	r28, 0x09	; 9
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	6a 01       	movw	r12, r20
    166a:	b2 2e       	mov	r11, r18
    166c:	10 2f       	mov	r17, r16
    166e:	0c 33       	cpi	r16, 0x3C	; 60
    1670:	20 f4       	brcc	.+8      	; 0x167a <dtoa_prf+0x3c>
    1672:	ff 24       	eor	r15, r15
    1674:	f3 94       	inc	r15
    1676:	f0 0e       	add	r15, r16
    1678:	02 c0       	rjmp	.+4      	; 0x167e <dtoa_prf+0x40>
    167a:	4c e3       	ldi	r20, 0x3C	; 60
    167c:	f4 2e       	mov	r15, r20
    167e:	0f 2d       	mov	r16, r15
    1680:	27 e0       	ldi	r18, 0x07	; 7
    1682:	ae 01       	movw	r20, r28
    1684:	4f 5f       	subi	r20, 0xFF	; 255
    1686:	5f 4f       	sbci	r21, 0xFF	; 255
    1688:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__ftoa_engine>
    168c:	79 81       	ldd	r23, Y+1	; 0x01
    168e:	27 2f       	mov	r18, r23
    1690:	29 70       	andi	r18, 0x09	; 9
    1692:	21 30       	cpi	r18, 0x01	; 1
    1694:	31 f0       	breq	.+12     	; 0x16a2 <dtoa_prf+0x64>
    1696:	e1 fc       	sbrc	r14, 1
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <dtoa_prf+0x68>
    169a:	e0 fc       	sbrc	r14, 0
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <dtoa_prf+0x6c>
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <dtoa_prf+0x6e>
    16a2:	6d e2       	ldi	r22, 0x2D	; 45
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <dtoa_prf+0x6e>
    16a6:	6b e2       	ldi	r22, 0x2B	; 43
    16a8:	01 c0       	rjmp	.+2      	; 0x16ac <dtoa_prf+0x6e>
    16aa:	60 e2       	ldi	r22, 0x20	; 32
    16ac:	ae 2d       	mov	r26, r14
    16ae:	a0 71       	andi	r26, 0x10	; 16
    16b0:	73 ff       	sbrs	r23, 3
    16b2:	36 c0       	rjmp	.+108    	; 0x1720 <dtoa_prf+0xe2>
    16b4:	66 23       	and	r22, r22
    16b6:	11 f0       	breq	.+4      	; 0x16bc <dtoa_prf+0x7e>
    16b8:	84 e0       	ldi	r24, 0x04	; 4
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <dtoa_prf+0x80>
    16bc:	83 e0       	ldi	r24, 0x03	; 3
    16be:	8b 15       	cp	r24, r11
    16c0:	10 f4       	brcc	.+4      	; 0x16c6 <dtoa_prf+0x88>
    16c2:	b8 1a       	sub	r11, r24
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <dtoa_prf+0x8a>
    16c6:	b1 2c       	mov	r11, r1
    16c8:	a1 11       	cpse	r26, r1
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <dtoa_prf+0xa4>
    16cc:	f6 01       	movw	r30, r12
    16ce:	8b 2d       	mov	r24, r11
    16d0:	90 e2       	ldi	r25, 0x20	; 32
    16d2:	88 23       	and	r24, r24
    16d4:	19 f0       	breq	.+6      	; 0x16dc <dtoa_prf+0x9e>
    16d6:	91 93       	st	Z+, r25
    16d8:	81 50       	subi	r24, 0x01	; 1
    16da:	fb cf       	rjmp	.-10     	; 0x16d2 <dtoa_prf+0x94>
    16dc:	cb 0c       	add	r12, r11
    16de:	d1 1c       	adc	r13, r1
    16e0:	b1 2c       	mov	r11, r1
    16e2:	66 23       	and	r22, r22
    16e4:	31 f0       	breq	.+12     	; 0x16f2 <dtoa_prf+0xb4>
    16e6:	f6 01       	movw	r30, r12
    16e8:	60 83       	st	Z, r22
    16ea:	96 01       	movw	r18, r12
    16ec:	2f 5f       	subi	r18, 0xFF	; 255
    16ee:	3f 4f       	sbci	r19, 0xFF	; 255
    16f0:	69 01       	movw	r12, r18
    16f2:	c6 01       	movw	r24, r12
    16f4:	03 96       	adiw	r24, 0x03	; 3
    16f6:	e2 fe       	sbrs	r14, 2
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <dtoa_prf+0xc6>
    16fa:	2e e4       	ldi	r18, 0x4E	; 78
    16fc:	f6 01       	movw	r30, r12
    16fe:	20 83       	st	Z, r18
    1700:	31 e4       	ldi	r19, 0x41	; 65
    1702:	04 c0       	rjmp	.+8      	; 0x170c <dtoa_prf+0xce>
    1704:	2e e6       	ldi	r18, 0x6E	; 110
    1706:	f6 01       	movw	r30, r12
    1708:	20 83       	st	Z, r18
    170a:	31 e6       	ldi	r19, 0x61	; 97
    170c:	31 83       	std	Z+1, r19	; 0x01
    170e:	22 83       	std	Z+2, r18	; 0x02
    1710:	fc 01       	movw	r30, r24
    1712:	2b 2d       	mov	r18, r11
    1714:	30 e2       	ldi	r19, 0x20	; 32
    1716:	22 23       	and	r18, r18
    1718:	f1 f1       	breq	.+124    	; 0x1796 <dtoa_prf+0x158>
    171a:	31 93       	st	Z+, r19
    171c:	21 50       	subi	r18, 0x01	; 1
    171e:	fb cf       	rjmp	.-10     	; 0x1716 <dtoa_prf+0xd8>
    1720:	72 ff       	sbrs	r23, 2
    1722:	40 c0       	rjmp	.+128    	; 0x17a4 <dtoa_prf+0x166>
    1724:	66 23       	and	r22, r22
    1726:	11 f0       	breq	.+4      	; 0x172c <dtoa_prf+0xee>
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	01 c0       	rjmp	.+2      	; 0x172e <dtoa_prf+0xf0>
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	8b 15       	cp	r24, r11
    1730:	10 f4       	brcc	.+4      	; 0x1736 <dtoa_prf+0xf8>
    1732:	b8 1a       	sub	r11, r24
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <dtoa_prf+0xfa>
    1736:	b1 2c       	mov	r11, r1
    1738:	a1 11       	cpse	r26, r1
    173a:	0b c0       	rjmp	.+22     	; 0x1752 <dtoa_prf+0x114>
    173c:	f6 01       	movw	r30, r12
    173e:	8b 2d       	mov	r24, r11
    1740:	90 e2       	ldi	r25, 0x20	; 32
    1742:	88 23       	and	r24, r24
    1744:	19 f0       	breq	.+6      	; 0x174c <dtoa_prf+0x10e>
    1746:	91 93       	st	Z+, r25
    1748:	81 50       	subi	r24, 0x01	; 1
    174a:	fb cf       	rjmp	.-10     	; 0x1742 <dtoa_prf+0x104>
    174c:	cb 0c       	add	r12, r11
    174e:	d1 1c       	adc	r13, r1
    1750:	b1 2c       	mov	r11, r1
    1752:	66 23       	and	r22, r22
    1754:	31 f0       	breq	.+12     	; 0x1762 <dtoa_prf+0x124>
    1756:	f6 01       	movw	r30, r12
    1758:	60 83       	st	Z, r22
    175a:	96 01       	movw	r18, r12
    175c:	2f 5f       	subi	r18, 0xFF	; 255
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	69 01       	movw	r12, r18
    1762:	c6 01       	movw	r24, r12
    1764:	03 96       	adiw	r24, 0x03	; 3
    1766:	e2 fe       	sbrs	r14, 2
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <dtoa_prf+0x13a>
    176a:	29 e4       	ldi	r18, 0x49	; 73
    176c:	f6 01       	movw	r30, r12
    176e:	20 83       	st	Z, r18
    1770:	2e e4       	ldi	r18, 0x4E	; 78
    1772:	21 83       	std	Z+1, r18	; 0x01
    1774:	26 e4       	ldi	r18, 0x46	; 70
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <dtoa_prf+0x146>
    1778:	29 e6       	ldi	r18, 0x69	; 105
    177a:	f6 01       	movw	r30, r12
    177c:	20 83       	st	Z, r18
    177e:	2e e6       	ldi	r18, 0x6E	; 110
    1780:	21 83       	std	Z+1, r18	; 0x01
    1782:	26 e6       	ldi	r18, 0x66	; 102
    1784:	22 83       	std	Z+2, r18	; 0x02
    1786:	fc 01       	movw	r30, r24
    1788:	2b 2d       	mov	r18, r11
    178a:	30 e2       	ldi	r19, 0x20	; 32
    178c:	22 23       	and	r18, r18
    178e:	19 f0       	breq	.+6      	; 0x1796 <dtoa_prf+0x158>
    1790:	31 93       	st	Z+, r19
    1792:	21 50       	subi	r18, 0x01	; 1
    1794:	fb cf       	rjmp	.-10     	; 0x178c <dtoa_prf+0x14e>
    1796:	fc 01       	movw	r30, r24
    1798:	eb 0d       	add	r30, r11
    179a:	f1 1d       	adc	r31, r1
    179c:	10 82       	st	Z, r1
    179e:	8e ef       	ldi	r24, 0xFE	; 254
    17a0:	9f ef       	ldi	r25, 0xFF	; 255
    17a2:	b7 c0       	rjmp	.+366    	; 0x1912 <dtoa_prf+0x2d4>
    17a4:	b1 e0       	ldi	r27, 0x01	; 1
    17a6:	61 11       	cpse	r22, r1
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <dtoa_prf+0x16e>
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	4b 2f       	mov	r20, r27
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	18 16       	cp	r1, r24
    17b2:	19 06       	cpc	r1, r25
    17b4:	24 f4       	brge	.+8      	; 0x17be <dtoa_prf+0x180>
    17b6:	9c 01       	movw	r18, r24
    17b8:	2f 5f       	subi	r18, 0xFF	; 255
    17ba:	3f 4f       	sbci	r19, 0xFF	; 255
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <dtoa_prf+0x184>
    17be:	21 e0       	ldi	r18, 0x01	; 1
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	24 0f       	add	r18, r20
    17c4:	35 1f       	adc	r19, r21
    17c6:	11 23       	and	r17, r17
    17c8:	29 f0       	breq	.+10     	; 0x17d4 <dtoa_prf+0x196>
    17ca:	41 2f       	mov	r20, r17
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	4f 5f       	subi	r20, 0xFF	; 255
    17d0:	5f 4f       	sbci	r21, 0xFF	; 255
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <dtoa_prf+0x19a>
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	42 0f       	add	r20, r18
    17da:	53 1f       	adc	r21, r19
    17dc:	2b 2d       	mov	r18, r11
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	42 17       	cp	r20, r18
    17e2:	53 07       	cpc	r21, r19
    17e4:	14 f4       	brge	.+4      	; 0x17ea <dtoa_prf+0x1ac>
    17e6:	b4 1a       	sub	r11, r20
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <dtoa_prf+0x1ae>
    17ea:	b1 2c       	mov	r11, r1
    17ec:	2e 2d       	mov	r18, r14
    17ee:	28 71       	andi	r18, 0x18	; 24
    17f0:	59 f4       	brne	.+22     	; 0x1808 <dtoa_prf+0x1ca>
    17f2:	f6 01       	movw	r30, r12
    17f4:	2b 2d       	mov	r18, r11
    17f6:	30 e2       	ldi	r19, 0x20	; 32
    17f8:	22 23       	and	r18, r18
    17fa:	19 f0       	breq	.+6      	; 0x1802 <dtoa_prf+0x1c4>
    17fc:	31 93       	st	Z+, r19
    17fe:	21 50       	subi	r18, 0x01	; 1
    1800:	fb cf       	rjmp	.-10     	; 0x17f8 <dtoa_prf+0x1ba>
    1802:	cb 0c       	add	r12, r11
    1804:	d1 1c       	adc	r13, r1
    1806:	b1 2c       	mov	r11, r1
    1808:	bb 23       	and	r27, r27
    180a:	31 f0       	breq	.+12     	; 0x1818 <dtoa_prf+0x1da>
    180c:	f6 01       	movw	r30, r12
    180e:	60 83       	st	Z, r22
    1810:	96 01       	movw	r18, r12
    1812:	2f 5f       	subi	r18, 0xFF	; 255
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	69 01       	movw	r12, r18
    1818:	a1 11       	cpse	r26, r1
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <dtoa_prf+0x1f4>
    181c:	f6 01       	movw	r30, r12
    181e:	2b 2d       	mov	r18, r11
    1820:	30 e3       	ldi	r19, 0x30	; 48
    1822:	22 23       	and	r18, r18
    1824:	19 f0       	breq	.+6      	; 0x182c <dtoa_prf+0x1ee>
    1826:	31 93       	st	Z+, r19
    1828:	21 50       	subi	r18, 0x01	; 1
    182a:	fb cf       	rjmp	.-10     	; 0x1822 <dtoa_prf+0x1e4>
    182c:	cb 0c       	add	r12, r11
    182e:	d1 1c       	adc	r13, r1
    1830:	b1 2c       	mov	r11, r1
    1832:	f8 0e       	add	r15, r24
    1834:	0a 81       	ldd	r16, Y+2	; 0x02
    1836:	37 2f       	mov	r19, r23
    1838:	30 71       	andi	r19, 0x10	; 16
    183a:	a3 2e       	mov	r10, r19
    183c:	74 ff       	sbrs	r23, 4
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <dtoa_prf+0x208>
    1840:	01 33       	cpi	r16, 0x31	; 49
    1842:	09 f4       	brne	.+2      	; 0x1846 <dtoa_prf+0x208>
    1844:	fa 94       	dec	r15
    1846:	1f 14       	cp	r1, r15
    1848:	2c f4       	brge	.+10     	; 0x1854 <dtoa_prf+0x216>
    184a:	2f 2d       	mov	r18, r15
    184c:	29 30       	cpi	r18, 0x09	; 9
    184e:	18 f0       	brcs	.+6      	; 0x1856 <dtoa_prf+0x218>
    1850:	28 e0       	ldi	r18, 0x08	; 8
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <dtoa_prf+0x218>
    1854:	21 e0       	ldi	r18, 0x01	; 1
    1856:	68 2f       	mov	r22, r24
    1858:	39 2f       	mov	r19, r25
    185a:	97 ff       	sbrs	r25, 7
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <dtoa_prf+0x224>
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	46 2f       	mov	r20, r22
    1864:	53 2f       	mov	r21, r19
    1866:	61 2c       	mov	r6, r1
    1868:	71 2c       	mov	r7, r1
    186a:	3e e2       	ldi	r19, 0x2E	; 46
    186c:	93 2e       	mov	r9, r19
    186e:	bc 01       	movw	r22, r24
    1870:	62 1b       	sub	r22, r18
    1872:	71 09       	sbc	r23, r1
    1874:	9b 01       	movw	r18, r22
    1876:	dc 01       	movw	r26, r24
    1878:	a4 1b       	sub	r26, r20
    187a:	b5 0b       	sbc	r27, r21
    187c:	e1 e0       	ldi	r30, 0x01	; 1
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	ec 0f       	add	r30, r28
    1882:	fd 1f       	adc	r31, r29
    1884:	ae 0f       	add	r26, r30
    1886:	bf 1f       	adc	r27, r31
    1888:	e1 2e       	mov	r14, r17
    188a:	f1 2c       	mov	r15, r1
    188c:	f1 94       	neg	r15
    188e:	e1 94       	neg	r14
    1890:	f1 08       	sbc	r15, r1
    1892:	4f 3f       	cpi	r20, 0xFF	; 255
    1894:	ff ef       	ldi	r31, 0xFF	; 255
    1896:	5f 07       	cpc	r21, r31
    1898:	31 f4       	brne	.+12     	; 0x18a6 <dtoa_prf+0x268>
    189a:	f6 01       	movw	r30, r12
    189c:	90 82       	st	Z, r9
    189e:	b6 01       	movw	r22, r12
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	6b 01       	movw	r12, r22
    18a6:	84 17       	cp	r24, r20
    18a8:	95 07       	cpc	r25, r21
    18aa:	4c f0       	brlt	.+18     	; 0x18be <dtoa_prf+0x280>
    18ac:	24 17       	cp	r18, r20
    18ae:	35 07       	cpc	r19, r21
    18b0:	34 f4       	brge	.+12     	; 0x18be <dtoa_prf+0x280>
    18b2:	bd 01       	movw	r22, r26
    18b4:	66 0d       	add	r22, r6
    18b6:	77 1d       	adc	r23, r7
    18b8:	fb 01       	movw	r30, r22
    18ba:	11 81       	ldd	r17, Z+1	; 0x01
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <dtoa_prf+0x282>
    18be:	10 e3       	ldi	r17, 0x30	; 48
    18c0:	41 50       	subi	r20, 0x01	; 1
    18c2:	51 09       	sbc	r21, r1
    18c4:	ff ef       	ldi	r31, 0xFF	; 255
    18c6:	6f 1a       	sub	r6, r31
    18c8:	7f 0a       	sbc	r7, r31
    18ca:	b6 01       	movw	r22, r12
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	4e 15       	cp	r20, r14
    18d2:	5f 05       	cpc	r21, r15
    18d4:	24 f0       	brlt	.+8      	; 0x18de <dtoa_prf+0x2a0>
    18d6:	f6 01       	movw	r30, r12
    18d8:	10 83       	st	Z, r17
    18da:	6b 01       	movw	r12, r22
    18dc:	da cf       	rjmp	.-76     	; 0x1892 <dtoa_prf+0x254>
    18de:	48 17       	cp	r20, r24
    18e0:	59 07       	cpc	r21, r25
    18e2:	39 f4       	brne	.+14     	; 0x18f2 <dtoa_prf+0x2b4>
    18e4:	06 33       	cpi	r16, 0x36	; 54
    18e6:	20 f4       	brcc	.+8      	; 0x18f0 <dtoa_prf+0x2b2>
    18e8:	05 33       	cpi	r16, 0x35	; 53
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <dtoa_prf+0x2b4>
    18ec:	a1 10       	cpse	r10, r1
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <dtoa_prf+0x2b4>
    18f0:	11 e3       	ldi	r17, 0x31	; 49
    18f2:	f6 01       	movw	r30, r12
    18f4:	10 83       	st	Z, r17
    18f6:	fb 01       	movw	r30, r22
    18f8:	8b 2d       	mov	r24, r11
    18fa:	90 e2       	ldi	r25, 0x20	; 32
    18fc:	88 23       	and	r24, r24
    18fe:	19 f0       	breq	.+6      	; 0x1906 <dtoa_prf+0x2c8>
    1900:	91 93       	st	Z+, r25
    1902:	81 50       	subi	r24, 0x01	; 1
    1904:	fb cf       	rjmp	.-10     	; 0x18fc <dtoa_prf+0x2be>
    1906:	fb 01       	movw	r30, r22
    1908:	eb 0d       	add	r30, r11
    190a:	f1 1d       	adc	r31, r1
    190c:	10 82       	st	Z, r1
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	29 96       	adiw	r28, 0x09	; 9
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
    1932:	9f 90       	pop	r9
    1934:	7f 90       	pop	r7
    1936:	6f 90       	pop	r6
    1938:	08 95       	ret

0000193a <strtod>:
    193a:	a0 e0       	ldi	r26, 0x00	; 0
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e3 ea       	ldi	r30, 0xA3	; 163
    1940:	fc e0       	ldi	r31, 0x0C	; 12
    1942:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0xc>
    1946:	8b 01       	movw	r16, r22
    1948:	61 15       	cp	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	21 f0       	breq	.+8      	; 0x1956 <strtod+0x1c>
    194e:	db 01       	movw	r26, r22
    1950:	8c 93       	st	X, r24
    1952:	11 96       	adiw	r26, 0x01	; 1
    1954:	9c 93       	st	X, r25
    1956:	ec 01       	movw	r28, r24
    1958:	5e 01       	movw	r10, r28
    195a:	bf ef       	ldi	r27, 0xFF	; 255
    195c:	ab 1a       	sub	r10, r27
    195e:	bb 0a       	sbc	r11, r27
    1960:	75 01       	movw	r14, r10
    1962:	c8 80       	ld	r12, Y
    1964:	8c 2d       	mov	r24, r12
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <isspace>
    196c:	89 2b       	or	r24, r25
    196e:	11 f0       	breq	.+4      	; 0x1974 <strtod+0x3a>
    1970:	e5 01       	movw	r28, r10
    1972:	f2 cf       	rjmp	.-28     	; 0x1958 <strtod+0x1e>
    1974:	ed e2       	ldi	r30, 0x2D	; 45
    1976:	ce 12       	cpse	r12, r30
    1978:	08 c0       	rjmp	.+16     	; 0x198a <strtod+0x50>
    197a:	7e 01       	movw	r14, r28
    197c:	f2 e0       	ldi	r31, 0x02	; 2
    197e:	ef 0e       	add	r14, r31
    1980:	f1 1c       	adc	r15, r1
    1982:	c9 80       	ldd	r12, Y+1	; 0x01
    1984:	dd 24       	eor	r13, r13
    1986:	d3 94       	inc	r13
    1988:	09 c0       	rjmp	.+18     	; 0x199c <strtod+0x62>
    198a:	2b e2       	ldi	r18, 0x2B	; 43
    198c:	c2 12       	cpse	r12, r18
    198e:	05 c0       	rjmp	.+10     	; 0x199a <strtod+0x60>
    1990:	7e 01       	movw	r14, r28
    1992:	42 e0       	ldi	r20, 0x02	; 2
    1994:	e4 0e       	add	r14, r20
    1996:	f1 1c       	adc	r15, r1
    1998:	c9 80       	ldd	r12, Y+1	; 0x01
    199a:	d1 2c       	mov	r13, r1
    199c:	e7 01       	movw	r28, r14
    199e:	21 97       	sbiw	r28, 0x01	; 1
    19a0:	43 e0       	ldi	r20, 0x03	; 3
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	60 e7       	ldi	r22, 0x70	; 112
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	ce 01       	movw	r24, r28
    19aa:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <strncasecmp_P>
    19ae:	89 2b       	or	r24, r25
    19b0:	c1 f4       	brne	.+48     	; 0x19e2 <strtod+0xa8>
    19b2:	23 96       	adiw	r28, 0x03	; 3
    19b4:	45 e0       	ldi	r20, 0x05	; 5
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	6b e6       	ldi	r22, 0x6B	; 107
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	ce 01       	movw	r24, r28
    19be:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <strncasecmp_P>
    19c2:	89 2b       	or	r24, r25
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <strtod+0x8e>
    19c6:	25 96       	adiw	r28, 0x05	; 5
    19c8:	01 15       	cp	r16, r1
    19ca:	11 05       	cpc	r17, r1
    19cc:	19 f0       	breq	.+6      	; 0x19d4 <strtod+0x9a>
    19ce:	d8 01       	movw	r26, r16
    19d0:	cd 93       	st	X+, r28
    19d2:	dc 93       	st	X, r29
    19d4:	d1 10       	cpse	r13, r1
    19d6:	06 c1       	rjmp	.+524    	; 0x1be4 <strtod+0x2aa>
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	80 e8       	ldi	r24, 0x80	; 128
    19de:	9f e7       	ldi	r25, 0x7F	; 127
    19e0:	0a c1       	rjmp	.+532    	; 0x1bf6 <strtod+0x2bc>
    19e2:	43 e0       	ldi	r20, 0x03	; 3
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	68 e6       	ldi	r22, 0x68	; 104
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	ce 01       	movw	r24, r28
    19ec:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <strncasecmp_P>
    19f0:	89 2b       	or	r24, r25
    19f2:	59 f4       	brne	.+22     	; 0x1a0a <strtod+0xd0>
    19f4:	01 15       	cp	r16, r1
    19f6:	11 05       	cpc	r17, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <strtod+0xc2>
    19fa:	f9 c0       	rjmp	.+498    	; 0x1bee <strtod+0x2b4>
    19fc:	b2 e0       	ldi	r27, 0x02	; 2
    19fe:	eb 0e       	add	r14, r27
    1a00:	f1 1c       	adc	r15, r1
    1a02:	f8 01       	movw	r30, r16
    1a04:	f1 82       	std	Z+1, r15	; 0x01
    1a06:	e0 82       	st	Z, r14
    1a08:	f2 c0       	rjmp	.+484    	; 0x1bee <strtod+0x2b4>
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	cb 01       	movw	r24, r22
    1a12:	c0 e0       	ldi	r28, 0x00	; 0
    1a14:	d0 e0       	ldi	r29, 0x00	; 0
    1a16:	7f 01       	movw	r14, r30
    1a18:	a0 ed       	ldi	r26, 0xD0	; 208
    1a1a:	aa 2e       	mov	r10, r26
    1a1c:	ac 0c       	add	r10, r12
    1a1e:	29 e0       	ldi	r18, 0x09	; 9
    1a20:	2a 15       	cp	r18, r10
    1a22:	30 f1       	brcs	.+76     	; 0x1a70 <strtod+0x136>
    1a24:	4d 2d       	mov	r20, r13
    1a26:	42 60       	ori	r20, 0x02	; 2
    1a28:	b4 2e       	mov	r11, r20
    1a2a:	2d 2d       	mov	r18, r13
    1a2c:	28 70       	andi	r18, 0x08	; 8
    1a2e:	d2 fe       	sbrs	r13, 2
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <strtod+0x100>
    1a32:	21 11       	cpse	r18, r1
    1a34:	25 c0       	rjmp	.+74     	; 0x1a80 <strtod+0x146>
    1a36:	21 96       	adiw	r28, 0x01	; 1
    1a38:	23 c0       	rjmp	.+70     	; 0x1a80 <strtod+0x146>
    1a3a:	21 11       	cpse	r18, r1
    1a3c:	21 97       	sbiw	r28, 0x01	; 1
    1a3e:	a5 e0       	ldi	r26, 0x05	; 5
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	9b 01       	movw	r18, r22
    1a44:	ac 01       	movw	r20, r24
    1a46:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__muluhisi3>
    1a4a:	66 0f       	add	r22, r22
    1a4c:	77 1f       	adc	r23, r23
    1a4e:	88 1f       	adc	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	6a 0d       	add	r22, r10
    1a54:	71 1d       	adc	r23, r1
    1a56:	81 1d       	adc	r24, r1
    1a58:	91 1d       	adc	r25, r1
    1a5a:	68 39       	cpi	r22, 0x98	; 152
    1a5c:	a9 e9       	ldi	r26, 0x99	; 153
    1a5e:	7a 07       	cpc	r23, r26
    1a60:	8a 07       	cpc	r24, r26
    1a62:	a9 e1       	ldi	r26, 0x19	; 25
    1a64:	9a 07       	cpc	r25, r26
    1a66:	60 f0       	brcs	.+24     	; 0x1a80 <strtod+0x146>
    1a68:	bd 2d       	mov	r27, r13
    1a6a:	b6 60       	ori	r27, 0x06	; 6
    1a6c:	bb 2e       	mov	r11, r27
    1a6e:	08 c0       	rjmp	.+16     	; 0x1a80 <strtod+0x146>
    1a70:	2e ef       	ldi	r18, 0xFE	; 254
    1a72:	a2 12       	cpse	r10, r18
    1a74:	0a c0       	rjmp	.+20     	; 0x1a8a <strtod+0x150>
    1a76:	d3 fc       	sbrc	r13, 3
    1a78:	50 c0       	rjmp	.+160    	; 0x1b1a <strtod+0x1e0>
    1a7a:	4d 2d       	mov	r20, r13
    1a7c:	48 60       	ori	r20, 0x08	; 8
    1a7e:	b4 2e       	mov	r11, r20
    1a80:	31 96       	adiw	r30, 0x01	; 1
    1a82:	d7 01       	movw	r26, r14
    1a84:	cc 90       	ld	r12, X
    1a86:	db 2c       	mov	r13, r11
    1a88:	c6 cf       	rjmp	.-116    	; 0x1a16 <strtod+0xdc>
    1a8a:	2c 2d       	mov	r18, r12
    1a8c:	2f 7d       	andi	r18, 0xDF	; 223
    1a8e:	25 34       	cpi	r18, 0x45	; 69
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <strtod+0x15a>
    1a92:	43 c0       	rjmp	.+134    	; 0x1b1a <strtod+0x1e0>
    1a94:	a0 81       	ld	r26, Z
    1a96:	ad 32       	cpi	r26, 0x2D	; 45
    1a98:	41 f4       	brne	.+16     	; 0x1aaa <strtod+0x170>
    1a9a:	bd 2d       	mov	r27, r13
    1a9c:	b0 61       	ori	r27, 0x10	; 16
    1a9e:	db 2e       	mov	r13, r27
    1aa0:	7f 01       	movw	r14, r30
    1aa2:	22 e0       	ldi	r18, 0x02	; 2
    1aa4:	e2 0e       	add	r14, r18
    1aa6:	f1 1c       	adc	r15, r1
    1aa8:	0c c0       	rjmp	.+24     	; 0x1ac2 <strtod+0x188>
    1aaa:	7f 01       	movw	r14, r30
    1aac:	ab 32       	cpi	r26, 0x2B	; 43
    1aae:	31 f0       	breq	.+12     	; 0x1abc <strtod+0x182>
    1ab0:	4f ef       	ldi	r20, 0xFF	; 255
    1ab2:	e4 1a       	sub	r14, r20
    1ab4:	f4 0a       	sbc	r15, r20
    1ab6:	21 e0       	ldi	r18, 0x01	; 1
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	06 c0       	rjmp	.+12     	; 0x1ac8 <strtod+0x18e>
    1abc:	a2 e0       	ldi	r26, 0x02	; 2
    1abe:	ea 0e       	add	r14, r26
    1ac0:	f1 1c       	adc	r15, r1
    1ac2:	a1 81       	ldd	r26, Z+1	; 0x01
    1ac4:	22 e0       	ldi	r18, 0x02	; 2
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	a0 53       	subi	r26, 0x30	; 48
    1aca:	aa 30       	cpi	r26, 0x0A	; 10
    1acc:	18 f0       	brcs	.+6      	; 0x1ad4 <strtod+0x19a>
    1ace:	e2 1a       	sub	r14, r18
    1ad0:	f3 0a       	sbc	r15, r19
    1ad2:	23 c0       	rjmp	.+70     	; 0x1b1a <strtod+0x1e0>
    1ad4:	f7 01       	movw	r30, r14
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	20 38       	cpi	r18, 0x80	; 128
    1adc:	bc e0       	ldi	r27, 0x0C	; 12
    1ade:	3b 07       	cpc	r19, r27
    1ae0:	5c f4       	brge	.+22     	; 0x1af8 <strtod+0x1be>
    1ae2:	a9 01       	movw	r20, r18
    1ae4:	44 0f       	add	r20, r20
    1ae6:	55 1f       	adc	r21, r21
    1ae8:	44 0f       	add	r20, r20
    1aea:	55 1f       	adc	r21, r21
    1aec:	24 0f       	add	r18, r20
    1aee:	35 1f       	adc	r19, r21
    1af0:	22 0f       	add	r18, r18
    1af2:	33 1f       	adc	r19, r19
    1af4:	2a 0f       	add	r18, r26
    1af6:	31 1d       	adc	r19, r1
    1af8:	af 01       	movw	r20, r30
    1afa:	4f 5f       	subi	r20, 0xFF	; 255
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	7a 01       	movw	r14, r20
    1b00:	a0 81       	ld	r26, Z
    1b02:	a0 53       	subi	r26, 0x30	; 48
    1b04:	aa 30       	cpi	r26, 0x0A	; 10
    1b06:	10 f4       	brcc	.+4      	; 0x1b0c <strtod+0x1d2>
    1b08:	fa 01       	movw	r30, r20
    1b0a:	e7 cf       	rjmp	.-50     	; 0x1ada <strtod+0x1a0>
    1b0c:	d4 fe       	sbrs	r13, 4
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <strtod+0x1dc>
    1b10:	31 95       	neg	r19
    1b12:	21 95       	neg	r18
    1b14:	31 09       	sbc	r19, r1
    1b16:	c2 0f       	add	r28, r18
    1b18:	d3 1f       	adc	r29, r19
    1b1a:	d1 fe       	sbrs	r13, 1
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <strtod+0x1f6>
    1b1e:	01 15       	cp	r16, r1
    1b20:	11 05       	cpc	r17, r1
    1b22:	31 f0       	breq	.+12     	; 0x1b30 <strtod+0x1f6>
    1b24:	e1 e0       	ldi	r30, 0x01	; 1
    1b26:	ee 1a       	sub	r14, r30
    1b28:	f1 08       	sbc	r15, r1
    1b2a:	d8 01       	movw	r26, r16
    1b2c:	ed 92       	st	X+, r14
    1b2e:	fc 92       	st	X, r15
    1b30:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__floatunsisf>
    1b34:	2d 2d       	mov	r18, r13
    1b36:	23 70       	andi	r18, 0x03	; 3
    1b38:	23 30       	cpi	r18, 0x03	; 3
    1b3a:	19 f0       	breq	.+6      	; 0x1b42 <strtod+0x208>
    1b3c:	4b 01       	movw	r8, r22
    1b3e:	5c 01       	movw	r10, r24
    1b40:	06 c0       	rjmp	.+12     	; 0x1b4e <strtod+0x214>
    1b42:	4b 01       	movw	r8, r22
    1b44:	5c 01       	movw	r10, r24
    1b46:	b7 fa       	bst	r11, 7
    1b48:	b0 94       	com	r11
    1b4a:	b7 f8       	bld	r11, 7
    1b4c:	b0 94       	com	r11
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	a9 01       	movw	r20, r18
    1b54:	c5 01       	movw	r24, r10
    1b56:	b4 01       	movw	r22, r8
    1b58:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <strtod+0x228>
    1b60:	3e c0       	rjmp	.+124    	; 0x1bde <strtod+0x2a4>
    1b62:	d7 ff       	sbrs	r29, 7
    1b64:	06 c0       	rjmp	.+12     	; 0x1b72 <strtod+0x238>
    1b66:	d1 95       	neg	r29
    1b68:	c1 95       	neg	r28
    1b6a:	d1 09       	sbc	r29, r1
    1b6c:	07 e8       	ldi	r16, 0x87	; 135
    1b6e:	10 e0       	ldi	r17, 0x00	; 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <strtod+0x23c>
    1b72:	0f e9       	ldi	r16, 0x9F	; 159
    1b74:	10 e0       	ldi	r17, 0x00	; 0
    1b76:	68 01       	movw	r12, r16
    1b78:	b8 e1       	ldi	r27, 0x18	; 24
    1b7a:	cb 1a       	sub	r12, r27
    1b7c:	d1 08       	sbc	r13, r1
    1b7e:	90 e2       	ldi	r25, 0x20	; 32
    1b80:	e9 2e       	mov	r14, r25
    1b82:	f1 2c       	mov	r15, r1
    1b84:	ce 15       	cp	r28, r14
    1b86:	df 05       	cpc	r29, r15
    1b88:	74 f0       	brlt	.+28     	; 0x1ba6 <strtod+0x26c>
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	25 91       	lpm	r18, Z+
    1b8e:	35 91       	lpm	r19, Z+
    1b90:	45 91       	lpm	r20, Z+
    1b92:	54 91       	lpm	r21, Z
    1b94:	c5 01       	movw	r24, r10
    1b96:	b4 01       	movw	r22, r8
    1b98:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3>
    1b9c:	4b 01       	movw	r8, r22
    1b9e:	5c 01       	movw	r10, r24
    1ba0:	ce 19       	sub	r28, r14
    1ba2:	df 09       	sbc	r29, r15
    1ba4:	ef cf       	rjmp	.-34     	; 0x1b84 <strtod+0x24a>
    1ba6:	04 50       	subi	r16, 0x04	; 4
    1ba8:	11 09       	sbc	r17, r1
    1baa:	f5 94       	asr	r15
    1bac:	e7 94       	ror	r14
    1bae:	0c 15       	cp	r16, r12
    1bb0:	1d 05       	cpc	r17, r13
    1bb2:	41 f7       	brne	.-48     	; 0x1b84 <strtod+0x24a>
    1bb4:	8a 2d       	mov	r24, r10
    1bb6:	88 0f       	add	r24, r24
    1bb8:	8b 2d       	mov	r24, r11
    1bba:	88 1f       	adc	r24, r24
    1bbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bbe:	49 f0       	breq	.+18     	; 0x1bd2 <strtod+0x298>
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	a9 01       	movw	r20, r18
    1bc6:	c5 01       	movw	r24, r10
    1bc8:	b4 01       	movw	r22, r8
    1bca:	0e 94 df 08 	call	0x11be	; 0x11be <__cmpsf2>
    1bce:	81 11       	cpse	r24, r1
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <strtod+0x2a4>
    1bd2:	82 e2       	ldi	r24, 0x22	; 34
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	90 93 cc 03 	sts	0x03CC, r25
    1bda:	80 93 cb 03 	sts	0x03CB, r24
    1bde:	c5 01       	movw	r24, r10
    1be0:	b4 01       	movw	r22, r8
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <strtod+0x2bc>
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	80 e8       	ldi	r24, 0x80	; 128
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <strtod+0x2bc>
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	80 ec       	ldi	r24, 0xC0	; 192
    1bf4:	9f e7       	ldi	r25, 0x7F	; 127
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	ec e0       	ldi	r30, 0x0C	; 12
    1bfc:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0xc>

00001c00 <__ftoa_engine>:
    1c00:	28 30       	cpi	r18, 0x08	; 8
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <__ftoa_engine+0x6>
    1c04:	27 e0       	ldi	r18, 0x07	; 7
    1c06:	33 27       	eor	r19, r19
    1c08:	da 01       	movw	r26, r20
    1c0a:	99 0f       	add	r25, r25
    1c0c:	31 1d       	adc	r19, r1
    1c0e:	87 fd       	sbrc	r24, 7
    1c10:	91 60       	ori	r25, 0x01	; 1
    1c12:	00 96       	adiw	r24, 0x00	; 0
    1c14:	61 05       	cpc	r22, r1
    1c16:	71 05       	cpc	r23, r1
    1c18:	39 f4       	brne	.+14     	; 0x1c28 <__ftoa_engine+0x28>
    1c1a:	32 60       	ori	r19, 0x02	; 2
    1c1c:	2e 5f       	subi	r18, 0xFE	; 254
    1c1e:	3d 93       	st	X+, r19
    1c20:	30 e3       	ldi	r19, 0x30	; 48
    1c22:	2a 95       	dec	r18
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <__ftoa_engine+0x1e>
    1c26:	08 95       	ret
    1c28:	9f 3f       	cpi	r25, 0xFF	; 255
    1c2a:	30 f0       	brcs	.+12     	; 0x1c38 <__ftoa_engine+0x38>
    1c2c:	80 38       	cpi	r24, 0x80	; 128
    1c2e:	71 05       	cpc	r23, r1
    1c30:	61 05       	cpc	r22, r1
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <__ftoa_engine+0x36>
    1c34:	3c 5f       	subi	r19, 0xFC	; 252
    1c36:	3c 5f       	subi	r19, 0xFC	; 252
    1c38:	3d 93       	st	X+, r19
    1c3a:	91 30       	cpi	r25, 0x01	; 1
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <__ftoa_engine+0x40>
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	91 1d       	adc	r25, r1
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	1f 93       	push	r17
    1c48:	0f 93       	push	r16
    1c4a:	ff 92       	push	r15
    1c4c:	ef 92       	push	r14
    1c4e:	19 2f       	mov	r17, r25
    1c50:	98 7f       	andi	r25, 0xF8	; 248
    1c52:	96 95       	lsr	r25
    1c54:	e9 2f       	mov	r30, r25
    1c56:	96 95       	lsr	r25
    1c58:	96 95       	lsr	r25
    1c5a:	e9 0f       	add	r30, r25
    1c5c:	ff 27       	eor	r31, r31
    1c5e:	e3 50       	subi	r30, 0x03	; 3
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	99 27       	eor	r25, r25
    1c64:	33 27       	eor	r19, r19
    1c66:	ee 24       	eor	r14, r14
    1c68:	ff 24       	eor	r15, r15
    1c6a:	a7 01       	movw	r20, r14
    1c6c:	e7 01       	movw	r28, r14
    1c6e:	05 90       	lpm	r0, Z+
    1c70:	08 94       	sec
    1c72:	07 94       	ror	r0
    1c74:	28 f4       	brcc	.+10     	; 0x1c80 <__ftoa_engine+0x80>
    1c76:	36 0f       	add	r19, r22
    1c78:	e7 1e       	adc	r14, r23
    1c7a:	f8 1e       	adc	r15, r24
    1c7c:	49 1f       	adc	r20, r25
    1c7e:	51 1d       	adc	r21, r1
    1c80:	66 0f       	add	r22, r22
    1c82:	77 1f       	adc	r23, r23
    1c84:	88 1f       	adc	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	06 94       	lsr	r0
    1c8a:	a1 f7       	brne	.-24     	; 0x1c74 <__ftoa_engine+0x74>
    1c8c:	05 90       	lpm	r0, Z+
    1c8e:	07 94       	ror	r0
    1c90:	28 f4       	brcc	.+10     	; 0x1c9c <__ftoa_engine+0x9c>
    1c92:	e7 0e       	add	r14, r23
    1c94:	f8 1e       	adc	r15, r24
    1c96:	49 1f       	adc	r20, r25
    1c98:	56 1f       	adc	r21, r22
    1c9a:	c1 1d       	adc	r28, r1
    1c9c:	77 0f       	add	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	66 1f       	adc	r22, r22
    1ca4:	06 94       	lsr	r0
    1ca6:	a1 f7       	brne	.-24     	; 0x1c90 <__ftoa_engine+0x90>
    1ca8:	05 90       	lpm	r0, Z+
    1caa:	07 94       	ror	r0
    1cac:	28 f4       	brcc	.+10     	; 0x1cb8 <__ftoa_engine+0xb8>
    1cae:	f8 0e       	add	r15, r24
    1cb0:	49 1f       	adc	r20, r25
    1cb2:	56 1f       	adc	r21, r22
    1cb4:	c7 1f       	adc	r28, r23
    1cb6:	d1 1d       	adc	r29, r1
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	66 1f       	adc	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	06 94       	lsr	r0
    1cc2:	a1 f7       	brne	.-24     	; 0x1cac <__ftoa_engine+0xac>
    1cc4:	05 90       	lpm	r0, Z+
    1cc6:	07 94       	ror	r0
    1cc8:	20 f4       	brcc	.+8      	; 0x1cd2 <__ftoa_engine+0xd2>
    1cca:	49 0f       	add	r20, r25
    1ccc:	56 1f       	adc	r21, r22
    1cce:	c7 1f       	adc	r28, r23
    1cd0:	d8 1f       	adc	r29, r24
    1cd2:	99 0f       	add	r25, r25
    1cd4:	66 1f       	adc	r22, r22
    1cd6:	77 1f       	adc	r23, r23
    1cd8:	88 1f       	adc	r24, r24
    1cda:	06 94       	lsr	r0
    1cdc:	a9 f7       	brne	.-22     	; 0x1cc8 <__ftoa_engine+0xc8>
    1cde:	84 91       	lpm	r24, Z
    1ce0:	10 95       	com	r17
    1ce2:	17 70       	andi	r17, 0x07	; 7
    1ce4:	41 f0       	breq	.+16     	; 0x1cf6 <__ftoa_engine+0xf6>
    1ce6:	d6 95       	lsr	r29
    1ce8:	c7 95       	ror	r28
    1cea:	57 95       	ror	r21
    1cec:	47 95       	ror	r20
    1cee:	f7 94       	ror	r15
    1cf0:	e7 94       	ror	r14
    1cf2:	1a 95       	dec	r17
    1cf4:	c1 f7       	brne	.-16     	; 0x1ce6 <__ftoa_engine+0xe6>
    1cf6:	e3 ea       	ldi	r30, 0xA3	; 163
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	68 94       	set
    1cfc:	15 90       	lpm	r1, Z+
    1cfe:	15 91       	lpm	r17, Z+
    1d00:	35 91       	lpm	r19, Z+
    1d02:	65 91       	lpm	r22, Z+
    1d04:	95 91       	lpm	r25, Z+
    1d06:	05 90       	lpm	r0, Z+
    1d08:	7f e2       	ldi	r23, 0x2F	; 47
    1d0a:	73 95       	inc	r23
    1d0c:	e1 18       	sub	r14, r1
    1d0e:	f1 0a       	sbc	r15, r17
    1d10:	43 0b       	sbc	r20, r19
    1d12:	56 0b       	sbc	r21, r22
    1d14:	c9 0b       	sbc	r28, r25
    1d16:	d0 09       	sbc	r29, r0
    1d18:	c0 f7       	brcc	.-16     	; 0x1d0a <__ftoa_engine+0x10a>
    1d1a:	e1 0c       	add	r14, r1
    1d1c:	f1 1e       	adc	r15, r17
    1d1e:	43 1f       	adc	r20, r19
    1d20:	56 1f       	adc	r21, r22
    1d22:	c9 1f       	adc	r28, r25
    1d24:	d0 1d       	adc	r29, r0
    1d26:	7e f4       	brtc	.+30     	; 0x1d46 <__ftoa_engine+0x146>
    1d28:	70 33       	cpi	r23, 0x30	; 48
    1d2a:	11 f4       	brne	.+4      	; 0x1d30 <__ftoa_engine+0x130>
    1d2c:	8a 95       	dec	r24
    1d2e:	e6 cf       	rjmp	.-52     	; 0x1cfc <__ftoa_engine+0xfc>
    1d30:	e8 94       	clt
    1d32:	01 50       	subi	r16, 0x01	; 1
    1d34:	30 f0       	brcs	.+12     	; 0x1d42 <__ftoa_engine+0x142>
    1d36:	08 0f       	add	r16, r24
    1d38:	0a f4       	brpl	.+2      	; 0x1d3c <__ftoa_engine+0x13c>
    1d3a:	00 27       	eor	r16, r16
    1d3c:	02 17       	cp	r16, r18
    1d3e:	08 f4       	brcc	.+2      	; 0x1d42 <__ftoa_engine+0x142>
    1d40:	20 2f       	mov	r18, r16
    1d42:	23 95       	inc	r18
    1d44:	02 2f       	mov	r16, r18
    1d46:	7a 33       	cpi	r23, 0x3A	; 58
    1d48:	28 f0       	brcs	.+10     	; 0x1d54 <__ftoa_engine+0x154>
    1d4a:	79 e3       	ldi	r23, 0x39	; 57
    1d4c:	7d 93       	st	X+, r23
    1d4e:	2a 95       	dec	r18
    1d50:	e9 f7       	brne	.-6      	; 0x1d4c <__ftoa_engine+0x14c>
    1d52:	10 c0       	rjmp	.+32     	; 0x1d74 <__ftoa_engine+0x174>
    1d54:	7d 93       	st	X+, r23
    1d56:	2a 95       	dec	r18
    1d58:	89 f6       	brne	.-94     	; 0x1cfc <__ftoa_engine+0xfc>
    1d5a:	06 94       	lsr	r0
    1d5c:	97 95       	ror	r25
    1d5e:	67 95       	ror	r22
    1d60:	37 95       	ror	r19
    1d62:	17 95       	ror	r17
    1d64:	17 94       	ror	r1
    1d66:	e1 18       	sub	r14, r1
    1d68:	f1 0a       	sbc	r15, r17
    1d6a:	43 0b       	sbc	r20, r19
    1d6c:	56 0b       	sbc	r21, r22
    1d6e:	c9 0b       	sbc	r28, r25
    1d70:	d0 09       	sbc	r29, r0
    1d72:	98 f0       	brcs	.+38     	; 0x1d9a <__ftoa_engine+0x19a>
    1d74:	23 95       	inc	r18
    1d76:	7e 91       	ld	r23, -X
    1d78:	73 95       	inc	r23
    1d7a:	7a 33       	cpi	r23, 0x3A	; 58
    1d7c:	08 f0       	brcs	.+2      	; 0x1d80 <__ftoa_engine+0x180>
    1d7e:	70 e3       	ldi	r23, 0x30	; 48
    1d80:	7c 93       	st	X, r23
    1d82:	20 13       	cpse	r18, r16
    1d84:	b8 f7       	brcc	.-18     	; 0x1d74 <__ftoa_engine+0x174>
    1d86:	7e 91       	ld	r23, -X
    1d88:	70 61       	ori	r23, 0x10	; 16
    1d8a:	7d 93       	st	X+, r23
    1d8c:	30 f0       	brcs	.+12     	; 0x1d9a <__ftoa_engine+0x19a>
    1d8e:	83 95       	inc	r24
    1d90:	71 e3       	ldi	r23, 0x31	; 49
    1d92:	7d 93       	st	X+, r23
    1d94:	70 e3       	ldi	r23, 0x30	; 48
    1d96:	2a 95       	dec	r18
    1d98:	e1 f7       	brne	.-8      	; 0x1d92 <__ftoa_engine+0x192>
    1d9a:	11 24       	eor	r1, r1
    1d9c:	ef 90       	pop	r14
    1d9e:	ff 90       	pop	r15
    1da0:	0f 91       	pop	r16
    1da2:	1f 91       	pop	r17
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	99 27       	eor	r25, r25
    1daa:	87 fd       	sbrc	r24, 7
    1dac:	90 95       	com	r25
    1dae:	08 95       	ret

00001db0 <isspace>:
    1db0:	91 11       	cpse	r25, r1
    1db2:	1e c0       	rjmp	.+60     	; 0x1df0 <__ctype_isfalse>
    1db4:	80 32       	cpi	r24, 0x20	; 32
    1db6:	19 f0       	breq	.+6      	; 0x1dbe <isspace+0xe>
    1db8:	89 50       	subi	r24, 0x09	; 9
    1dba:	85 50       	subi	r24, 0x05	; 5
    1dbc:	d0 f7       	brcc	.-12     	; 0x1db2 <isspace+0x2>
    1dbe:	08 95       	ret

00001dc0 <strncasecmp_P>:
    1dc0:	fb 01       	movw	r30, r22
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	41 50       	subi	r20, 0x01	; 1
    1dc6:	50 40       	sbci	r21, 0x00	; 0
    1dc8:	88 f0       	brcs	.+34     	; 0x1dec <strncasecmp_P+0x2c>
    1dca:	8d 91       	ld	r24, X+
    1dcc:	81 34       	cpi	r24, 0x41	; 65
    1dce:	1c f0       	brlt	.+6      	; 0x1dd6 <strncasecmp_P+0x16>
    1dd0:	8b 35       	cpi	r24, 0x5B	; 91
    1dd2:	0c f4       	brge	.+2      	; 0x1dd6 <strncasecmp_P+0x16>
    1dd4:	80 5e       	subi	r24, 0xE0	; 224
    1dd6:	65 91       	lpm	r22, Z+
    1dd8:	61 34       	cpi	r22, 0x41	; 65
    1dda:	1c f0       	brlt	.+6      	; 0x1de2 <strncasecmp_P+0x22>
    1ddc:	6b 35       	cpi	r22, 0x5B	; 91
    1dde:	0c f4       	brge	.+2      	; 0x1de2 <strncasecmp_P+0x22>
    1de0:	60 5e       	subi	r22, 0xE0	; 224
    1de2:	86 1b       	sub	r24, r22
    1de4:	61 11       	cpse	r22, r1
    1de6:	71 f3       	breq	.-36     	; 0x1dc4 <strncasecmp_P+0x4>
    1de8:	99 0b       	sbc	r25, r25
    1dea:	08 95       	ret
    1dec:	88 1b       	sub	r24, r24
    1dee:	fc cf       	rjmp	.-8      	; 0x1de8 <strncasecmp_P+0x28>

00001df0 <__ctype_isfalse>:
    1df0:	99 27       	eor	r25, r25
    1df2:	88 27       	eor	r24, r24

00001df4 <__ctype_istrue>:
    1df4:	08 95       	ret

00001df6 <__muluhisi3>:
    1df6:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__umulhisi3>
    1dfa:	a5 9f       	mul	r26, r21
    1dfc:	90 0d       	add	r25, r0
    1dfe:	b4 9f       	mul	r27, r20
    1e00:	90 0d       	add	r25, r0
    1e02:	a4 9f       	mul	r26, r20
    1e04:	80 0d       	add	r24, r0
    1e06:	91 1d       	adc	r25, r1
    1e08:	11 24       	eor	r1, r1
    1e0a:	08 95       	ret

00001e0c <__prologue_saves__>:
    1e0c:	2f 92       	push	r2
    1e0e:	3f 92       	push	r3
    1e10:	4f 92       	push	r4
    1e12:	5f 92       	push	r5
    1e14:	6f 92       	push	r6
    1e16:	7f 92       	push	r7
    1e18:	8f 92       	push	r8
    1e1a:	9f 92       	push	r9
    1e1c:	af 92       	push	r10
    1e1e:	bf 92       	push	r11
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	ca 1b       	sub	r28, r26
    1e36:	db 0b       	sbc	r29, r27
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	09 94       	ijmp

00001e44 <__epilogue_restores__>:
    1e44:	2a 88       	ldd	r2, Y+18	; 0x12
    1e46:	39 88       	ldd	r3, Y+17	; 0x11
    1e48:	48 88       	ldd	r4, Y+16	; 0x10
    1e4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e50:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e52:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e54:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e56:	b9 84       	ldd	r11, Y+9	; 0x09
    1e58:	c8 84       	ldd	r12, Y+8	; 0x08
    1e5a:	df 80       	ldd	r13, Y+7	; 0x07
    1e5c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e5e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e60:	0c 81       	ldd	r16, Y+4	; 0x04
    1e62:	1b 81       	ldd	r17, Y+3	; 0x03
    1e64:	aa 81       	ldd	r26, Y+2	; 0x02
    1e66:	b9 81       	ldd	r27, Y+1	; 0x01
    1e68:	ce 0f       	add	r28, r30
    1e6a:	d1 1d       	adc	r29, r1
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	ed 01       	movw	r28, r26
    1e78:	08 95       	ret

00001e7a <__umulhisi3>:
    1e7a:	a2 9f       	mul	r26, r18
    1e7c:	b0 01       	movw	r22, r0
    1e7e:	b3 9f       	mul	r27, r19
    1e80:	c0 01       	movw	r24, r0
    1e82:	a3 9f       	mul	r26, r19
    1e84:	70 0d       	add	r23, r0
    1e86:	81 1d       	adc	r24, r1
    1e88:	11 24       	eor	r1, r1
    1e8a:	91 1d       	adc	r25, r1
    1e8c:	b2 9f       	mul	r27, r18
    1e8e:	70 0d       	add	r23, r0
    1e90:	81 1d       	adc	r24, r1
    1e92:	11 24       	eor	r1, r1
    1e94:	91 1d       	adc	r25, r1
    1e96:	08 95       	ret

00001e98 <_exit>:
    1e98:	f8 94       	cli

00001e9a <__stop_program>:
    1e9a:	ff cf       	rjmp	.-2      	; 0x1e9a <__stop_program>
