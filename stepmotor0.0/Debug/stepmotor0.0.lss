
stepmotor0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001de  00800100  00001f06  00001f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  008002de  008002de  00002178  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cfa  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011bc  00000000  00000000  00005146  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b17  00000000  00000000  00006302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b4  00000000  00000000  00006e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af4  00000000  00000000  000074d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019a0  00000000  00000000  00007fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00009964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_16>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__vector_18>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	50 07       	cpc	r21, r16
      6a:	57 07       	cpc	r21, r23
      6c:	5f 07       	cpc	r21, r31
      6e:	66 07       	cpc	r22, r22
      70:	6e 07       	cpc	r22, r30
      72:	75 07       	cpc	r23, r21
      74:	7d 07       	cpc	r23, r29
      76:	84 07       	cpc	r24, r20

00000078 <__trampolines_end>:
      78:	4e 41       	sbci	r20, 0x1E	; 30
      7a:	4e 49       	sbci	r20, 0x9E	; 158

0000007b <pstr_inity>:
      7b:	49 4e 49 54 59                                      INITY

00000080 <pstr_inf>:
      80:	49 4e 46                                            INF

00000083 <pwr_m10>:
      83:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      93:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000009b <pwr_p10>:
      9b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ab:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      bb:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      cb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      db:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      eb:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      fb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     10b:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     11b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     12b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     13b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     14b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     15b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     16b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     17b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     18b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     19b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ab:	3d 27 00                                            ='.

000001ae <__ctors_start>:
     1ae:	84 01       	movw	r16, r8
     1b0:	57 06       	cpc	r5, r23
     1b2:	fa 06       	cpc	r15, r26
     1b4:	62 08       	sbc	r6, r2

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	12 e0       	ldi	r17, 0x02	; 2
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	e6 e0       	ldi	r30, 0x06	; 6
     1ca:	ff e1       	ldi	r31, 0x1F	; 31
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	ae 3d       	cpi	r26, 0xDE	; 222
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	ae ed       	ldi	r26, 0xDE	; 222
     1dc:	b2 e0       	ldi	r27, 0x02	; 2
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	a9 31       	cpi	r26, 0x19	; 25
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>

000001e8 <__do_global_ctors>:
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	c6 eb       	ldi	r28, 0xB6	; 182
     1ec:	d1 e0       	ldi	r29, 0x01	; 1
     1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <__do_global_ctors+0x10>
     1f0:	22 97       	sbiw	r28, 0x02	; 2
     1f2:	fe 01       	movw	r30, r28
     1f4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__tablejump__>
     1f8:	ce 3a       	cpi	r28, 0xAE	; 174
     1fa:	d1 07       	cpc	r29, r17
     1fc:	c9 f7       	brne	.-14     	; 0x1f0 <__do_global_ctors+0x8>
     1fe:	0e 94 f0 06 	call	0xde0	; 0xde0 <main>
     202:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <_ZN4ADC2C1Ev>:

ADC2::ADC2(){
	//Channel ADC0 is chosen
	//MUX3...0 =0000
	//Configure the PORTC0
	DDRC &= !_BV(0);
     20a:	87 b1       	in	r24, 0x07	; 7
     20c:	17 b8       	out	0x07, r1	; 7
	//Enable ADC with prescaller 128 (16000000/128=125000Hz)
	//Required 50K-200KHz
	ADCSRA |= _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	87 68       	ori	r24, 0x87	; 135
     216:	80 83       	st	Z, r24
	//Internal 1.1V Voltage Reference with external capacitor at AREF pin 
	ADMUX |=  _BV(REFS0);//|_BV(REFS1);
     218:	ec e7       	ldi	r30, 0x7C	; 124
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	80 64       	ori	r24, 0x40	; 64
     220:	80 83       	st	Z, r24
     222:	08 95       	ret

00000224 <_ZN7ADS1115C1Ev>:


I2C ADS1115i2c;


ADS1115::ADS1115(){}
     224:	08 95       	ret

00000226 <_ZN7ADS111512init_ADS1115Ev>:

	
void ADS1115::init_ADS1115(){
	
	ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     226:	60 e9       	ldi	r22, 0x90	; 144
     228:	8e ed       	ldi	r24, 0xDE	; 222
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONFIG); // set pointer to Config register
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	8e ed       	ldi	r24, 0xDE	; 222
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0>>8)); // write MSB of the Config register
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	8e ed       	ldi	r24, 0xDE	; 222
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0&0xFF)); // write LSB of the Config register
     244:	63 ee       	ldi	r22, 0xE3	; 227
     246:	8e ed       	ldi	r24, 0xDE	; 222
     248:	92 e0       	ldi	r25, 0x02	; 2
     24a:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_stop();
     24e:	8e ed       	ldi	r24, 0xDE	; 222
     250:	92 e0       	ldi	r25, 0x02	; 2
     252:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>
     256:	08 95       	ret

00000258 <_ZN7ADS111511readADS1115Ev>:
	
}

uint16_t ADS1115::readADS1115(){
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
	 
	 int a=ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     25c:	60 e9       	ldi	r22, 0x90	; 144
     25e:	8e ed       	ldi	r24, 0xDE	; 222
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	 if (a==1)
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	29 f0       	breq	.+10     	; 0x274 <_ZN7ADS111511readADS1115Ev+0x1c>
	 {
	 }
	 else{
		 ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONVERT); // set pointer to X axis MSB
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	8e ed       	ldi	r24, 0xDE	; 222
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
		 
	 }
	 ADS1115i2c.i2c_stop();
     274:	8e ed       	ldi	r24, 0xDE	; 222
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>

	 int b=ADS1115i2c.i2c_start((ADS1115_ADDRESS|0x01));
     27c:	61 e9       	ldi	r22, 0x91	; 145
     27e:	8e ed       	ldi	r24, 0xDE	; 222
     280:	92 e0       	ldi	r25, 0x02	; 2
     282:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	 if (b==1)
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	59 f0       	breq	.+22     	; 0x2a0 <_ZN7ADS111511readADS1115Ev+0x48>
	 {
	 }
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
     28a:	8e ed       	ldi	r24, 0xDE	; 222
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN3I2C12i2c_read_ackEv>
     292:	c8 2f       	mov	r28, r24
		 LSB = ADS1115i2c.i2c_read_ack();
     294:	8e ed       	ldi	r24, 0xDE	; 222
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN3I2C12i2c_read_ackEv>
     29c:	d8 2f       	mov	r29, r24
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN7ADS111511readADS1115Ev+0x4c>
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
	
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
		 LSB = ADS1115i2c.i2c_read_ack();
		 
	 }
	 ADS1115i2c.i2c_stop();
     2a4:	8e ed       	ldi	r24, 0xDE	; 222
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>

	 result =((MSB<<8)|LSB)>>4;
     2ac:	2d 2f       	mov	r18, r29
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	c9 01       	movw	r24, r18
     2b2:	9c 2b       	or	r25, r28
	 return result;
}
     2b4:	95 95       	asr	r25
     2b6:	87 95       	ror	r24
     2b8:	95 95       	asr	r25
     2ba:	87 95       	ror	r24
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	95 95       	asr	r25
     2c2:	87 95       	ror	r24
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <_ZN7ADS111511readVoltageEv>:

double ADS1115::readVoltage(){
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
	init_ADS1115();
     2d0:	0e 94 13 01 	call	0x226	; 0x226 <_ZN7ADS111512init_ADS1115Ev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	89 ef       	ldi	r24, 0xF9	; 249
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	80 40       	sbci	r24, 0x00	; 0
     2de:	90 40       	sbci	r25, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <_ZN7ADS111511readVoltageEv+0x10>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <_ZN7ADS111511readVoltageEv+0x1a>
     2e4:	00 00       	nop
	_delay_ms(20);
	uint16_t readResult= readADS1115();
     2e6:	ce 01       	movw	r24, r28
     2e8:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN7ADS111511readADS1115Ev>
	double voltage = 0.003*readResult;
     2ec:	bc 01       	movw	r22, r24
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatunsisf>
     2f6:	26 ea       	ldi	r18, 0xA6	; 166
     2f8:	3b e9       	ldi	r19, 0x9B	; 155
     2fa:	44 e4       	ldi	r20, 0x44	; 68
     2fc:	5b e3       	ldi	r21, 0x3B	; 59
     2fe:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
	return voltage;
	
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_GLOBAL__sub_I_ADS1115i2c>:
#include <stdlib.h>
#include "ADS1115.h"
#include "i2c.h"


I2C ADS1115i2c;
     308:	8e ed       	ldi	r24, 0xDE	; 222
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN3I2CC1Ev>
     310:	08 95       	ret

00000312 <_ZN7VolTodBC1Ev>:
double static t[]={6.5429, 6.6814, 6.8370, 4.4900, 1.6438, 5.3033, 1.5770, 6.6900, 1.6054,4.8079,5.6471,7.6412,6.8137,8.9675,5.8061,11.3685};
double static dBPoint[]={0,-2.17, -3.25, -4.31, -8.135, -9.395, -14.14, -15.105, -17.255, -18.185,-18.785,-19.75,-20.765,-21.775,-22.83,-23.83,-24.84};

double initVolDifference=0;

VolTodB::VolTodB(){};
     312:	08 95       	ret

00000314 <_ZN7VolTodB5getdBEd>:
	
double VolTodB::getdB(double voltage){
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	6a 01       	movw	r12, r20
     326:	7b 01       	movw	r14, r22
     328:	c5 ed       	ldi	r28, 0xD5	; 213
     32a:	d1 e0       	ldi	r29, 0x01	; 1
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (voltage>voltagePoint[i]&&voltage<=voltagePoint[i+1])
     330:	69 91       	ld	r22, Y+
     332:	79 91       	ld	r23, Y+
     334:	89 91       	ld	r24, Y+
     336:	99 91       	ld	r25, Y+
     338:	a7 01       	movw	r20, r14
     33a:	96 01       	movw	r18, r12
     33c:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     340:	88 23       	and	r24, r24
     342:	6c f5       	brge	.+90     	; 0x39e <_ZN7VolTodB5getdBEd+0x8a>
     344:	28 81       	ld	r18, Y
     346:	39 81       	ldd	r19, Y+1	; 0x01
     348:	4a 81       	ldd	r20, Y+2	; 0x02
     34a:	5b 81       	ldd	r21, Y+3	; 0x03
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     354:	18 16       	cp	r1, r24
     356:	1c f1       	brlt	.+70     	; 0x39e <_ZN7VolTodB5getdBEd+0x8a>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
     358:	00 0f       	add	r16, r16
     35a:	11 1f       	adc	r17, r17
     35c:	00 0f       	add	r16, r16
     35e:	11 1f       	adc	r17, r17
     360:	e8 01       	movw	r28, r16
     362:	cb 56       	subi	r28, 0x6B	; 107
     364:	de 4f       	sbci	r29, 0xFE	; 254
     366:	20 91 df 02 	lds	r18, 0x02DF
     36a:	30 91 e0 02 	lds	r19, 0x02E0
     36e:	40 91 e1 02 	lds	r20, 0x02E1
     372:	50 91 e2 02 	lds	r21, 0x02E2
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	0e 94 af 08 	call	0x115e	; 0x115e <__subsf3>
     37e:	28 81       	ld	r18, Y
     380:	39 81       	ldd	r19, Y+1	; 0x01
     382:	4a 81       	ldd	r20, Y+2	; 0x02
     384:	5b 81       	ldd	r21, Y+3	; 0x03
     386:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     38a:	f8 01       	movw	r30, r16
     38c:	eb 5a       	subi	r30, 0xAB	; 171
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	20 81       	ld	r18, Z
     392:	31 81       	ldd	r19, Z+1	; 0x01
     394:	42 81       	ldd	r20, Z+2	; 0x02
     396:	53 81       	ldd	r21, Z+3	; 0x03
     398:	0e 94 b0 08 	call	0x1160	; 0x1160 <__addsf3>
     39c:	03 c0       	rjmp	.+6      	; 0x3a4 <_ZN7VolTodB5getdBEd+0x90>
VolTodB::VolTodB(){};
	
double VolTodB::getdB(double voltage){
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     39e:	0f 5f       	subi	r16, 0xFF	; 255
     3a0:	1f 4f       	sbci	r17, 0xFF	; 255
     3a2:	c6 cf       	rjmp	.-116    	; 0x330 <_ZN7VolTodB5getdBEd+0x1c>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
		}
	}
	
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	df 90       	pop	r13
     3b2:	cf 90       	pop	r12
     3b4:	08 95       	ret

000003b6 <_ZN7VolTodB14setInitVoltageEd>:

void VolTodB::setInitVoltage(double voltage){
     3b6:	cb 01       	movw	r24, r22
     3b8:	ba 01       	movw	r22, r20
	initVolDifference= voltage-0.687;
     3ba:	2b e3       	ldi	r18, 0x3B	; 59
     3bc:	3f ed       	ldi	r19, 0xDF	; 223
     3be:	4f e2       	ldi	r20, 0x2F	; 47
     3c0:	5f e3       	ldi	r21, 0x3F	; 63
     3c2:	0e 94 af 08 	call	0x115e	; 0x115e <__subsf3>
     3c6:	60 93 df 02 	sts	0x02DF, r22
     3ca:	70 93 e0 02 	sts	0x02E0, r23
     3ce:	80 93 e1 02 	sts	0x02E1, r24
     3d2:	90 93 e2 02 	sts	0x02E2, r25
     3d6:	08 95       	ret

000003d8 <_ZN7VolTodB10getVoltageEd>:
}

double VolTodB::getVoltage(double dB){
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
     3e8:	9a 01       	movw	r18, r20
     3ea:	ab 01       	movw	r20, r22
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	cb 01       	movw	r24, r22
     3f2:	0e 94 af 08 	call	0x115e	; 0x115e <__subsf3>
     3f6:	6b 01       	movw	r12, r22
     3f8:	7c 01       	movw	r14, r24
	double voltage=0;
	
	if (inv_dB==0)
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	a9 01       	movw	r20, r18
     400:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     404:	81 11       	cpse	r24, r1
     406:	13 c0       	rjmp	.+38     	; 0x42e <_ZN7VolTodB10getVoltageEd+0x56>
	{
		voltage=((inv_dB-t[0])/k[0]);
     408:	20 e7       	ldi	r18, 0x70	; 112
     40a:	3f e5       	ldi	r19, 0x5F	; 95
     40c:	41 ed       	ldi	r20, 0xD1	; 209
     40e:	50 e4       	ldi	r21, 0x40	; 64
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	0e 94 af 08 	call	0x115e	; 0x115e <__subsf3>
     418:	2c e7       	ldi	r18, 0x7C	; 124
     41a:	31 e6       	ldi	r19, 0x61	; 97
     41c:	48 e1       	ldi	r20, 0x18	; 24
     41e:	51 ec       	ldi	r21, 0xC1	; 193
     420:	0e 94 18 09 	call	0x1230	; 0x1230 <__divsf3>
     424:	56 2f       	mov	r21, r22
     426:	47 2f       	mov	r20, r23
     428:	38 2f       	mov	r19, r24
     42a:	29 2f       	mov	r18, r25
     42c:	38 c0       	rjmp	.+112    	; 0x49e <_ZN7VolTodB10getVoltageEd+0xc6>
     42e:	c1 e1       	ldi	r28, 0x11	; 17
     430:	d1 e0       	ldi	r29, 0x01	; 1
double VolTodB::getVoltage(double dB){
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
	double voltage=0;
	
	if (inv_dB==0)
     432:	00 e0       	ldi	r16, 0x00	; 0
     434:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	else{
	for (int i=0;i<size-1;i++)
	{
		if (inv_dB<dBPoint[i]&&inv_dB>=dBPoint[i+1])
     436:	29 91       	ld	r18, Y+
     438:	39 91       	ld	r19, Y+
     43a:	49 91       	ld	r20, Y+
     43c:	59 91       	ld	r21, Y+
     43e:	c7 01       	movw	r24, r14
     440:	b6 01       	movw	r22, r12
     442:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     446:	88 23       	and	r24, r24
     448:	3c f5       	brge	.+78     	; 0x498 <_ZN7VolTodB10getVoltageEd+0xc0>
     44a:	28 81       	ld	r18, Y
     44c:	39 81       	ldd	r19, Y+1	; 0x01
     44e:	4a 81       	ldd	r20, Y+2	; 0x02
     450:	5b 81       	ldd	r21, Y+3	; 0x03
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__gesf2>
     45a:	88 23       	and	r24, r24
     45c:	ec f0       	brlt	.+58     	; 0x498 <_ZN7VolTodB10getVoltageEd+0xc0>
		{
			voltage= ((inv_dB-t[i])/k[i]);
     45e:	00 0f       	add	r16, r16
     460:	11 1f       	adc	r17, r17
     462:	00 0f       	add	r16, r16
     464:	11 1f       	adc	r17, r17
     466:	f8 01       	movw	r30, r16
     468:	eb 5a       	subi	r30, 0xAB	; 171
     46a:	fe 4f       	sbci	r31, 0xFE	; 254
     46c:	20 81       	ld	r18, Z
     46e:	31 81       	ldd	r19, Z+1	; 0x01
     470:	42 81       	ldd	r20, Z+2	; 0x02
     472:	53 81       	ldd	r21, Z+3	; 0x03
     474:	c7 01       	movw	r24, r14
     476:	b6 01       	movw	r22, r12
     478:	0e 94 af 08 	call	0x115e	; 0x115e <__subsf3>
     47c:	f8 01       	movw	r30, r16
     47e:	eb 56       	subi	r30, 0x6B	; 107
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	20 81       	ld	r18, Z
     484:	31 81       	ldd	r19, Z+1	; 0x01
     486:	42 81       	ldd	r20, Z+2	; 0x02
     488:	53 81       	ldd	r21, Z+3	; 0x03
     48a:	0e 94 18 09 	call	0x1230	; 0x1230 <__divsf3>
			return voltage;
     48e:	56 2f       	mov	r21, r22
     490:	47 2f       	mov	r20, r23
     492:	38 2f       	mov	r19, r24
     494:	29 2f       	mov	r18, r25
     496:	03 c0       	rjmp	.+6      	; 0x49e <_ZN7VolTodB10getVoltageEd+0xc6>
	{
		voltage=((inv_dB-t[0])/k[0]);
	}
	
	else{
	for (int i=0;i<size-1;i++)
     498:	0f 5f       	subi	r16, 0xFF	; 255
     49a:	1f 4f       	sbci	r17, 0xFF	; 255
     49c:	cc cf       	rjmp	.-104    	; 0x436 <_ZN7VolTodB10getVoltageEd+0x5e>
		}
	}
	}
	return voltage;
	
}
     49e:	65 2f       	mov	r22, r21
     4a0:	74 2f       	mov	r23, r20
     4a2:	83 2f       	mov	r24, r19
     4a4:	92 2f       	mov	r25, r18
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	08 95       	ret

000004b8 <_ZN3I2CC1Ev>:

I2C::I2C(){ i2c_init();}
	
void I2C::i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     4b8:	88 e4       	ldi	r24, 0x48	; 72
     4ba:	80 93 b8 00 	sts	0x00B8, r24
     4be:	08 95       	ret

000004c0 <_ZN3I2C9i2c_startEh>:
}

uint8_t I2C::i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     4c0:	ec eb       	ldi	r30, 0xBC	; 188
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     4c6:	84 ea       	ldi	r24, 0xA4	; 164
     4c8:	80 83       	st	Z, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4ca:	80 81       	ld	r24, Z
     4cc:	88 23       	and	r24, r24
     4ce:	ec f7       	brge	.-6      	; 0x4ca <_ZN3I2C9i2c_startEh+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     4d0:	80 91 b9 00 	lds	r24, 0x00B9
     4d4:	88 7f       	andi	r24, 0xF8	; 248
     4d6:	88 30       	cpi	r24, 0x08	; 8
     4d8:	a1 f4       	brne	.+40     	; 0x502 <_ZN3I2C9i2c_startEh+0x42>
	
	// load slave address into data register
	TWDR = address;
     4da:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     4de:	84 e8       	ldi	r24, 0x84	; 132
     4e0:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4e4:	ec eb       	ldi	r30, 0xBC	; 188
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	88 23       	and	r24, r24
     4ec:	ec f7       	brge	.-6      	; 0x4e8 <_ZN3I2C9i2c_startEh+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     4ee:	90 91 b9 00 	lds	r25, 0x00B9
     4f2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     4f4:	98 31       	cpi	r25, 0x18	; 24
     4f6:	39 f0       	breq	.+14     	; 0x506 <_ZN3I2C9i2c_startEh+0x46>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 34       	cpi	r25, 0x40	; 64
     4fc:	29 f4       	brne	.+10     	; 0x508 <_ZN3I2C9i2c_startEh+0x48>
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     506:	80 e0       	ldi	r24, 0x00	; 0
}
     508:	08 95       	ret

0000050a <_ZN3I2C9i2c_writeEh>:

uint8_t I2C::i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     50a:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     50e:	84 e8       	ldi	r24, 0x84	; 132
     510:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     514:	ec eb       	ldi	r30, 0xBC	; 188
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	88 23       	and	r24, r24
     51c:	ec f7       	brge	.-6      	; 0x518 <_ZN3I2C9i2c_writeEh+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     51e:	90 91 b9 00 	lds	r25, 0x00B9
     522:	98 7f       	andi	r25, 0xF8	; 248
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	98 32       	cpi	r25, 0x28	; 40
     528:	09 f4       	brne	.+2      	; 0x52c <_ZN3I2C9i2c_writeEh+0x22>
     52a:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     52c:	08 95       	ret

0000052e <_ZN3I2C12i2c_read_ackEv>:

uint8_t I2C::i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     52e:	84 ec       	ldi	r24, 0xC4	; 196
     530:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     534:	ec eb       	ldi	r30, 0xBC	; 188
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 23       	and	r24, r24
     53c:	ec f7       	brge	.-6      	; 0x538 <_ZN3I2C12i2c_read_ackEv+0xa>
	// return received data from TWDR
	return TWDR;
     53e:	80 91 bb 00 	lds	r24, 0x00BB
}
     542:	08 95       	ret

00000544 <_ZN3I2C8i2c_stopEv>:
}

void I2C::i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     544:	84 e9       	ldi	r24, 0x94	; 148
     546:	80 93 bc 00 	sts	0x00BC, r24
     54a:	08 95       	ret

0000054c <_ZN4MenuC1Ev>:
bool modelR=false;
bool modelT=false;


	
Menu::Menu(){
     54c:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN8UARTtoolC1Ev>
     550:	08 95       	ret

00000552 <_Z9replyListi>:
	

	
	
}
void replyList(int index){
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	a8 97       	sbiw	r28, 0x28	; 40
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
	
	
		if (index==1)
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	91 05       	cpc	r25, r1
     56a:	89 f4       	brne	.+34     	; 0x58e <_Z9replyListi+0x3c>
		{
			char testmsg1[]="Mode A: W + or S -";
     56c:	83 e1       	ldi	r24, 0x13	; 19
     56e:	e9 e1       	ldi	r30, 0x19	; 25
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	de 01       	movw	r26, r28
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	01 90       	ld	r0, Z+
     578:	0d 92       	st	X+, r0
     57a:	8a 95       	dec	r24
     57c:	e1 f7       	brne	.-8      	; 0x576 <_Z9replyListi+0x24>
			myUART.uart_transmit_string(testmsg1);
     57e:	be 01       	movw	r22, r28
     580:	6f 5f       	subi	r22, 0xFF	; 255
     582:	7f 4f       	sbci	r23, 0xFF	; 255
     584:	86 ef       	ldi	r24, 0xF6	; 246
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
     58c:	3a c0       	rjmp	.+116    	; 0x602 <_Z9replyListi+0xb0>
		}
		else if (index==2)
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	91 05       	cpc	r25, r1
     592:	89 f4       	brne	.+34     	; 0x5b6 <_Z9replyListi+0x64>
		{
			char testmsg2[]="Mode B: Input target voltage: 0.80-4.20";
     594:	88 e2       	ldi	r24, 0x28	; 40
     596:	ec e2       	ldi	r30, 0x2C	; 44
     598:	f2 e0       	ldi	r31, 0x02	; 2
     59a:	de 01       	movw	r26, r28
     59c:	11 96       	adiw	r26, 0x01	; 1
     59e:	01 90       	ld	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	8a 95       	dec	r24
     5a4:	e1 f7       	brne	.-8      	; 0x59e <_Z9replyListi+0x4c>
			myUART.uart_transmit_string(testmsg2);
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	86 ef       	ldi	r24, 0xF6	; 246
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
     5b4:	26 c0       	rjmp	.+76     	; 0x602 <_Z9replyListi+0xb0>
		}
		
		else if (index==3)
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	91 05       	cpc	r25, r1
     5ba:	89 f4       	brne	.+34     	; 0x5de <_Z9replyListi+0x8c>
		{
			char testmsg3[]="Reset to 0 dB";
     5bc:	8e e0       	ldi	r24, 0x0E	; 14
     5be:	e4 e5       	ldi	r30, 0x54	; 84
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	de 01       	movw	r26, r28
     5c4:	11 96       	adiw	r26, 0x01	; 1
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	8a 95       	dec	r24
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <_Z9replyListi+0x74>
			myUART.uart_transmit_string(testmsg3);
     5ce:	be 01       	movw	r22, r28
     5d0:	6f 5f       	subi	r22, 0xFF	; 255
     5d2:	7f 4f       	sbci	r23, 0xFF	; 255
     5d4:	86 ef       	ldi	r24, 0xF6	; 246
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
     5dc:	12 c0       	rjmp	.+36     	; 0x602 <_Z9replyListi+0xb0>
		}
		
		else if (index==4)
     5de:	04 97       	sbiw	r24, 0x04	; 4
     5e0:	81 f4       	brne	.+32     	; 0x602 <_Z9replyListi+0xb0>
		{
			char testmsg4[]="Input target dB: 0.0-(-28.5)";
     5e2:	8d e1       	ldi	r24, 0x1D	; 29
     5e4:	e2 e6       	ldi	r30, 0x62	; 98
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	de 01       	movw	r26, r28
     5ea:	11 96       	adiw	r26, 0x01	; 1
     5ec:	01 90       	ld	r0, Z+
     5ee:	0d 92       	st	X+, r0
     5f0:	8a 95       	dec	r24
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <_Z9replyListi+0x9a>
			myUART.uart_transmit_string(testmsg4);
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	86 ef       	ldi	r24, 0xF6	; 246
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
		}
		
}
     602:	a8 96       	adiw	r28, 0x28	; 40
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <_Z9menuStartv>:


void menuStart(){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	c3 55       	subi	r28, 0x53	; 83
     61e:	d1 09       	sbc	r29, r1
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
			char msg1[]="Welcome";
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	ef e7       	ldi	r30, 0x7F	; 127
     62e:	f2 e0       	ldi	r31, 0x02	; 2
     630:	de 01       	movw	r26, r28
     632:	a4 5b       	subi	r26, 0xB4	; 180
     634:	bf 4f       	sbci	r27, 0xFF	; 255
     636:	01 90       	ld	r0, Z+
     638:	0d 92       	st	X+, r0
     63a:	8a 95       	dec	r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <_Z9menuStartv+0x22>
			char msg2[]="========= Menu =========";
     63e:	89 e1       	ldi	r24, 0x19	; 25
     640:	e7 e8       	ldi	r30, 0x87	; 135
     642:	f2 e0       	ldi	r31, 0x02	; 2
     644:	de 01       	movw	r26, r28
     646:	5d 96       	adiw	r26, 0x1d	; 29
     648:	01 90       	ld	r0, Z+
     64a:	0d 92       	st	X+, r0
     64c:	8a 95       	dec	r24
     64e:	e1 f7       	brne	.-8      	; 0x648 <_Z9menuStartv+0x34>
			char msg3[]="A. Step by step: W+ and S-.";
     650:	8c e1       	ldi	r24, 0x1C	; 28
     652:	e0 ea       	ldi	r30, 0xA0	; 160
     654:	f2 e0       	ldi	r31, 0x02	; 2
     656:	de 01       	movw	r26, r28
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	01 90       	ld	r0, Z+
     65c:	0d 92       	st	X+, r0
     65e:	8a 95       	dec	r24
     660:	e1 f7       	brne	.-8      	; 0x65a <_Z9menuStartv+0x46>
			char msg4[]="R. Reset";
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	ec eb       	ldi	r30, 0xBC	; 188
     666:	f2 e0       	ldi	r31, 0x02	; 2
     668:	de 01       	movw	r26, r28
     66a:	ad 5b       	subi	r26, 0xBD	; 189
     66c:	bf 4f       	sbci	r27, 0xFF	; 255
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	8a 95       	dec	r24
     674:	e1 f7       	brne	.-8      	; 0x66e <_Z9menuStartv+0x5a>
			char msg5[]="T. Target dB";
     676:	8d e0       	ldi	r24, 0x0D	; 13
     678:	e5 ec       	ldi	r30, 0xC5	; 197
     67a:	f2 e0       	ldi	r31, 0x02	; 2
     67c:	de 01       	movw	r26, r28
     67e:	d6 96       	adiw	r26, 0x36	; 54
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <_Z9menuStartv+0x6c>
			
			myUART.uart_transmit_string(msg1);
     688:	be 01       	movw	r22, r28
     68a:	64 5b       	subi	r22, 0xB4	; 180
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	86 ef       	ldi	r24, 0xF6	; 246
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg2);
     696:	be 01       	movw	r22, r28
     698:	63 5e       	subi	r22, 0xE3	; 227
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	86 ef       	ldi	r24, 0xF6	; 246
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg3);
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5f       	subi	r22, 0xFF	; 255
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	86 ef       	ldi	r24, 0xF6	; 246
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg4);
     6b2:	be 01       	movw	r22, r28
     6b4:	6d 5b       	subi	r22, 0xBD	; 189
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	86 ef       	ldi	r24, 0xF6	; 246
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg5);
     6c0:	be 01       	movw	r22, r28
     6c2:	6a 5c       	subi	r22, 0xCA	; 202
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	86 ef       	ldi	r24, 0xF6	; 246
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
		
}
     6ce:	cd 5a       	subi	r28, 0xAD	; 173
     6d0:	df 4f       	sbci	r29, 0xFF	; 255
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <_Z14moveUpDownLitei>:
	
}

void moveUpDownLite(int stepdown){
	
	myStepper.step(stepdown);
     6e2:	bc 01       	movw	r22, r24
     6e4:	87 ef       	ldi	r24, 0xF7	; 247
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN7Stepper4stepEi>
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	89 e6       	ldi	r24, 0x69	; 105
     6f0:	98 e1       	ldi	r25, 0x18	; 24
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	90 40       	sbci	r25, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <_Z14moveUpDownLitei+0x10>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <_Z14moveUpDownLitei+0x1a>
     6fc:	00 00       	nop
	_delay_ms(500);
	myStepper.motorOff();
     6fe:	87 ef       	ldi	r24, 0xF7	; 247
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN7Stepper8motorOffEv>
     706:	08 95       	ret

00000708 <_Z11stepperStopv>:
}

void stepperStop(){
	myStepper.motorOff();
     708:	87 ef       	ldi	r24, 0xF7	; 247
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN7Stepper8motorOffEv>
     710:	08 95       	ret

00000712 <_ZN4Menu9MenuStartEv>:
Menu::Menu(){
	
}

void Menu::MenuStart(){
		menuStart();
     712:	0e 94 0a 03 	call	0x614	; 0x614 <_Z9menuStartv>
		myStepper.setSpeed(4);//Set the speed of the stepper
     716:	44 e0       	ldi	r20, 0x04	; 4
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	87 ef       	ldi	r24, 0xF7	; 247
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZN7Stepper8setSpeedEl>
		stepperStop();
     726:	0e 94 84 03 	call	0x708	; 0x708 <_Z11stepperStopv>
     72a:	08 95       	ret

0000072c <_Z11readVoltagev>:
void stepperStop(){
	myStepper.motorOff();
}


double readVoltage(){
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	2d 97       	sbiw	r28, 0x0d	; 13
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	00 e1       	ldi	r16, 0x10	; 16
     74e:	10 e0       	ldi	r17, 0x00	; 0
	
	double voltage=0;
	double voltageSum=0;
     750:	c1 2c       	mov	r12, r1
     752:	d1 2c       	mov	r13, r1
     754:	76 01       	movw	r14, r12
	for (int i=0;i<16;i++)
	{
		 voltage= myADS1115.readVoltage();
     756:	84 ef       	ldi	r24, 0xF4	; 244
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN7ADS111511readVoltageEv>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
		 voltageSum=voltageSum+voltage;
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	0e 94 b0 08 	call	0x1160	; 0x1160 <__addsf3>
     76a:	6b 01       	movw	r12, r22
     76c:	7c 01       	movw	r14, r24
     76e:	01 50       	subi	r16, 0x01	; 1
     770:	11 09       	sbc	r17, r1

double readVoltage(){
	
	double voltage=0;
	double voltageSum=0;
	for (int i=0;i<16;i++)
     772:	01 15       	cp	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	79 f7       	brne	.-34     	; 0x756 <_Z11readVoltagev+0x2a>
	{
		 voltage= myADS1115.readVoltage();
		 voltageSum=voltageSum+voltage;
	}
	voltage = voltageSum/16;
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5d e3       	ldi	r21, 0x3D	; 61
     780:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
	char buffer0[10];
	//Convert double to stringw
	dtostrf(voltage, 6, 3, buffer0);
     788:	8e 01       	movw	r16, r28
     78a:	0f 5f       	subi	r16, 0xFF	; 255
     78c:	1f 4f       	sbci	r17, 0xFF	; 255
     78e:	23 e0       	ldi	r18, 0x03	; 3
     790:	46 e0       	ldi	r20, 0x06	; 6
     792:	0e 94 2f 0b 	call	0x165e	; 0x165e <dtostrf>
	//dtostrf(voltagePot,4,2,buffer1);
	myUART.uart_transmit_string(wiperv_msg);
     796:	68 e0       	ldi	r22, 0x08	; 8
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	86 ef       	ldi	r24, 0xF6	; 246
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     7a2:	b8 01       	movw	r22, r16
     7a4:	86 ef       	ldi	r24, 0xF6	; 246
     7a6:	92 e0       	ldi	r25, 0x02	; 2
     7a8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
	
	//get dB
	double dB = myVolTodB.getdB(voltage);
     7ac:	b7 01       	movw	r22, r14
     7ae:	a6 01       	movw	r20, r12
     7b0:	83 ef       	ldi	r24, 0xF3	; 243
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN7VolTodB5getdBEd>
	dtostrf(dB, 6, 3, buffer0);
     7b8:	23 e0       	ldi	r18, 0x03	; 3
     7ba:	46 e0       	ldi	r20, 0x06	; 6
     7bc:	0e 94 2f 0b 	call	0x165e	; 0x165e <dtostrf>
	char temp_msg[]="dB";
     7c0:	84 e6       	ldi	r24, 0x64	; 100
     7c2:	92 e4       	ldi	r25, 0x42	; 66
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	8b 87       	std	Y+11, r24	; 0x0b
     7c8:	9c 87       	std	Y+12, r25	; 0x0c
     7ca:	ad 87       	std	Y+13, r26	; 0x0d
	myUART.uart_transmit_string(temp_msg);
     7cc:	be 01       	movw	r22, r28
     7ce:	65 5f       	subi	r22, 0xF5	; 245
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	86 ef       	ldi	r24, 0xF6	; 246
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     7da:	b8 01       	movw	r22, r16
     7dc:	86 ef       	ldi	r24, 0xF6	; 246
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
	
	return voltage;
}
     7e4:	c7 01       	movw	r24, r14
     7e6:	b6 01       	movw	r22, r12
     7e8:	2d 96       	adiw	r28, 0x0d	; 13
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	08 95       	ret

00000806 <_Z10moveUpDowni>:
		
}

void moveUpDown(int stepup){
	
	myStepper.step(stepup);
     806:	bc 01       	movw	r22, r24
     808:	87 ef       	ldi	r24, 0xF7	; 247
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN7Stepper4stepEi>
     810:	2f ef       	ldi	r18, 0xFF	; 255
     812:	83 ec       	ldi	r24, 0xC3	; 195
     814:	99 e0       	ldi	r25, 0x09	; 9
     816:	21 50       	subi	r18, 0x01	; 1
     818:	80 40       	sbci	r24, 0x00	; 0
     81a:	90 40       	sbci	r25, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <_Z10moveUpDowni+0x10>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <_Z10moveUpDowni+0x1a>
     820:	00 00       	nop
	_delay_ms(200);
	myStepper.motorOff();
     822:	87 ef       	ldi	r24, 0xF7	; 247
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN7Stepper8motorOffEv>
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	83 ed       	ldi	r24, 0xD3	; 211
     82e:	90 e3       	ldi	r25, 0x30	; 48
     830:	21 50       	subi	r18, 0x01	; 1
     832:	80 40       	sbci	r24, 0x00	; 0
     834:	90 40       	sbci	r25, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <_Z10moveUpDowni+0x2a>
     838:	00 c0       	rjmp	.+0      	; 0x83a <_Z10moveUpDowni+0x34>
     83a:	00 00       	nop
	_delay_ms(1000);
	readVoltage();
     83c:	0e 94 96 03 	call	0x72c	; 0x72c <_Z11readVoltagev>
     840:	08 95       	ret

00000842 <_Z15readVoltageLitev>:
}

double readVoltageLite(){
	
	double voltage=0;
	voltage= myADS1115.readVoltage();
     842:	84 ef       	ldi	r24, 0xF4	; 244
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN7ADS111511readVoltageEv>
	return voltage;
}
     84a:	08 95       	ret

0000084c <_Z5resetv>:

void reset(){
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	2c 97       	sbiw	r28, 0x0c	; 12
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
	    double presentVol= readVoltageLite();
     868:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
		double downLimit= 0.7;
		double upperLimit=4.0;
		
		//Move with big steps
		if (presentVol>downLimit)
     870:	23 e3       	ldi	r18, 0x33	; 51
     872:	33 e3       	ldi	r19, 0x33	; 51
     874:	43 e3       	ldi	r20, 0x33	; 51
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__gesf2>
     87c:	18 16       	cp	r1, r24
     87e:	64 f5       	brge	.+88     	; 0x8d8 <_Z5resetv+0x8c>
		{
			int tempStep= ((presentVol-0.7)/0.026)*STEP_TO_DOWN;
     880:	23 e3       	ldi	r18, 0x33	; 51
     882:	33 e3       	ldi	r19, 0x33	; 51
     884:	43 e3       	ldi	r20, 0x33	; 51
     886:	5f e3       	ldi	r21, 0x3F	; 63
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	0e 94 af 08 	call	0x115e	; 0x115e <__subsf3>
     890:	24 ef       	ldi	r18, 0xF4	; 244
     892:	3d ef       	ldi	r19, 0xFD	; 253
     894:	44 ed       	ldi	r20, 0xD4	; 212
     896:	5c e3       	ldi	r21, 0x3C	; 60
     898:	0e 94 18 09 	call	0x1230	; 0x1230 <__divsf3>
     89c:	6b 01       	movw	r12, r22
     89e:	7c 01       	movw	r14, r24
     8a0:	60 91 00 01 	lds	r22, 0x0100
     8a4:	70 91 01 01 	lds	r23, 0x0101
     8a8:	88 27       	eor	r24, r24
     8aa:	77 fd       	sbrc	r23, 7
     8ac:	80 95       	com	r24
     8ae:	98 2f       	mov	r25, r24
     8b0:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatsisf>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     8c0:	0e 94 80 09 	call	0x1300	; 0x1300 <__fixsfsi>
			moveUpDownLite(tempStep);
     8c4:	cb 01       	movw	r24, r22
     8c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <_Z5resetv+0x8c>
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
		{
			moveUpDownLite(STEP_TO_DOWN_4);
     8cc:	80 91 04 01 	lds	r24, 0x0104
     8d0:	90 91 05 01 	lds	r25, 0x0105
     8d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
			int tempStep= ((presentVol-0.7)/0.026)*STEP_TO_DOWN;
			moveUpDownLite(tempStep);
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
     8d8:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     8dc:	23 e3       	ldi	r18, 0x33	; 51
     8de:	33 e3       	ldi	r19, 0x33	; 51
     8e0:	43 e3       	ldi	r20, 0x33	; 51
     8e2:	5f e3       	ldi	r21, 0x3F	; 63
     8e4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__gesf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	84 f3       	brlt	.-32     	; 0x8cc <_Z5resetv+0x80>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
		}
		
		double initVolt=readVoltageLite();
     8ec:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     8f0:	ab 01       	movw	r20, r22
     8f2:	bc 01       	movw	r22, r24
		myVolTodB.setInitVoltage(initVolt);
     8f4:	83 ef       	ldi	r24, 0xF3	; 243
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7VolTodB14setInitVoltageEd>
		
		//Finish reset
		char msg[]="Reset down!";
     8fc:	8c e0       	ldi	r24, 0x0C	; 12
     8fe:	e2 ed       	ldi	r30, 0xD2	; 210
     900:	f2 e0       	ldi	r31, 0x02	; 2
     902:	de 01       	movw	r26, r28
     904:	11 96       	adiw	r26, 0x01	; 1
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	8a 95       	dec	r24
     90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0x7>
		readVoltage();
     90e:	0e 94 96 03 	call	0x72c	; 0x72c <_Z11readVoltagev>
		myUART.uart_transmit_string(msg);
     912:	be 01       	movw	r22, r28
     914:	6f 5f       	subi	r22, 0xFF	; 255
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	86 ef       	ldi	r24, 0xF6	; 246
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
}
     920:	2c 96       	adiw	r28, 0x0c	; 12
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	08 95       	ret

0000093a <_Z13goToTargetVold>:

void goToTargetVol(double targetVoltage){
     93a:	8f 92       	push	r8
     93c:	9f 92       	push	r9
     93e:	af 92       	push	r10
     940:	bf 92       	push	r11
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	6b 01       	movw	r12, r22
     94c:	7c 01       	movw	r14, r24
	double presentVoltage= readVoltageLite();
     94e:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     952:	4b 01       	movw	r8, r22
     954:	5c 01       	movw	r10, r24
	if (targetVoltage<0.6||targetVoltage>29)
     956:	2a e9       	ldi	r18, 0x9A	; 154
     958:	39 e9       	ldi	r19, 0x99	; 153
     95a:	49 e1       	ldi	r20, 0x19	; 25
     95c:	5f e3       	ldi	r21, 0x3F	; 63
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     966:	88 23       	and	r24, r24
     968:	0c f4       	brge	.+2      	; 0x96c <_Z13goToTargetVold+0x32>
     96a:	8c c0       	rjmp	.+280    	; 0xa84 <_Z13goToTargetVold+0x14a>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	48 ee       	ldi	r20, 0xE8	; 232
     972:	51 e4       	ldi	r21, 0x41	; 65
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__gesf2>
     97c:	18 16       	cp	r1, r24
     97e:	0c f4       	brge	.+2      	; 0x982 <_Z13goToTargetVold+0x48>
     980:	81 c0       	rjmp	.+258    	; 0xa84 <_Z13goToTargetVold+0x14a>
	{
	}
	else{
	if (targetVoltage>presentVoltage)
     982:	a7 01       	movw	r20, r14
     984:	96 01       	movw	r18, r12
     986:	c5 01       	movw	r24, r10
     988:	b4 01       	movw	r22, r8
     98a:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     98e:	88 23       	and	r24, r24
     990:	ac f5       	brge	.+106    	; 0x9fc <_Z13goToTargetVold+0xc2>
	{
		int tempStep= ((targetVoltage-presentVoltage)/0.026)*STEP_TO_UP;
     992:	a5 01       	movw	r20, r10
     994:	94 01       	movw	r18, r8
     996:	c7 01       	movw	r24, r14
     998:	b6 01       	movw	r22, r12
     99a:	0e 94 af 08 	call	0x115e	; 0x115e <__subsf3>
     99e:	24 ef       	ldi	r18, 0xF4	; 244
     9a0:	3d ef       	ldi	r19, 0xFD	; 253
     9a2:	44 ed       	ldi	r20, 0xD4	; 212
     9a4:	5c e3       	ldi	r21, 0x3C	; 60
     9a6:	0e 94 18 09 	call	0x1230	; 0x1230 <__divsf3>
     9aa:	4b 01       	movw	r8, r22
     9ac:	5c 01       	movw	r10, r24
     9ae:	60 91 02 01 	lds	r22, 0x0102
     9b2:	70 91 03 01 	lds	r23, 0x0103
     9b6:	88 27       	eor	r24, r24
     9b8:	77 fd       	sbrc	r23, 7
     9ba:	80 95       	com	r24
     9bc:	98 2f       	mov	r25, r24
     9be:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatsisf>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	c5 01       	movw	r24, r10
     9c8:	b4 01       	movw	r22, r8
     9ca:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     9ce:	0e 94 80 09 	call	0x1300	; 0x1300 <__fixsfsi>
		moveUpDownLite(tempStep);
     9d2:	cb 01       	movw	r24, r22
     9d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
		
		while (readVoltageLite()<(targetVoltage))
     9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <_Z13goToTargetVold+0xac>
		{
			moveUpDownLite(STEP_TO_UP_4);
     9da:	80 91 06 01 	lds	r24, 0x0106
     9de:	90 91 07 01 	lds	r25, 0x0107
     9e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
	if (targetVoltage>presentVoltage)
	{
		int tempStep= ((targetVoltage-presentVoltage)/0.026)*STEP_TO_UP;
		moveUpDownLite(tempStep);
		
		while (readVoltageLite()<(targetVoltage))
     9e6:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__gesf2>
     9f6:	18 16       	cp	r1, r24
     9f8:	84 f3       	brlt	.-32     	; 0x9da <_Z13goToTargetVold+0xa0>
     9fa:	44 c0       	rjmp	.+136    	; 0xa84 <_Z13goToTargetVold+0x14a>
		}
		
		
	}
	else{
		int tempStep= ((presentVoltage-targetVoltage)/0.026)*STEP_TO_DOWN;
     9fc:	a7 01       	movw	r20, r14
     9fe:	96 01       	movw	r18, r12
     a00:	c5 01       	movw	r24, r10
     a02:	b4 01       	movw	r22, r8
     a04:	0e 94 af 08 	call	0x115e	; 0x115e <__subsf3>
     a08:	24 ef       	ldi	r18, 0xF4	; 244
     a0a:	3d ef       	ldi	r19, 0xFD	; 253
     a0c:	44 ed       	ldi	r20, 0xD4	; 212
     a0e:	5c e3       	ldi	r21, 0x3C	; 60
     a10:	0e 94 18 09 	call	0x1230	; 0x1230 <__divsf3>
     a14:	4b 01       	movw	r8, r22
     a16:	5c 01       	movw	r10, r24
     a18:	60 91 00 01 	lds	r22, 0x0100
     a1c:	70 91 01 01 	lds	r23, 0x0101
     a20:	88 27       	eor	r24, r24
     a22:	77 fd       	sbrc	r23, 7
     a24:	80 95       	com	r24
     a26:	98 2f       	mov	r25, r24
     a28:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatsisf>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	c5 01       	movw	r24, r10
     a32:	b4 01       	movw	r22, r8
     a34:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     a38:	0e 94 80 09 	call	0x1300	; 0x1300 <__fixsfsi>
		moveUpDownLite(tempStep);
     a3c:	cb 01       	movw	r24, r22
     a3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
		
		while (readVoltageLite()>(targetVoltage+0.3))
     a42:	06 c0       	rjmp	.+12     	; 0xa50 <_Z13goToTargetVold+0x116>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
     a44:	80 91 04 01 	lds	r24, 0x0104
     a48:	90 91 05 01 	lds	r25, 0x0105
     a4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
	}
	else{
		int tempStep= ((presentVoltage-targetVoltage)/0.026)*STEP_TO_DOWN;
		moveUpDownLite(tempStep);
		
		while (readVoltageLite()>(targetVoltage+0.3))
     a50:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     a54:	4b 01       	movw	r8, r22
     a56:	5c 01       	movw	r10, r24
     a58:	2a e9       	ldi	r18, 0x9A	; 154
     a5a:	39 e9       	ldi	r19, 0x99	; 153
     a5c:	49 e9       	ldi	r20, 0x99	; 153
     a5e:	5e e3       	ldi	r21, 0x3E	; 62
     a60:	c7 01       	movw	r24, r14
     a62:	b6 01       	movw	r22, r12
     a64:	0e 94 b0 08 	call	0x1160	; 0x1160 <__addsf3>
     a68:	9b 01       	movw	r18, r22
     a6a:	ac 01       	movw	r20, r24
     a6c:	c5 01       	movw	r24, r10
     a6e:	b4 01       	movw	r22, r8
     a70:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__gesf2>
     a74:	18 16       	cp	r1, r24
     a76:	34 f3       	brlt	.-52     	; 0xa44 <_Z13goToTargetVold+0x10a>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
		}
		moveUpDownLite(STEP_TO_DOWN_4);
     a78:	80 91 04 01 	lds	r24, 0x0104
     a7c:	90 91 05 01 	lds	r25, 0x0105
     a80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
	}
	}
	readVoltage();
     a84:	0e 94 96 03 	call	0x72c	; 0x72c <_Z11readVoltagev>
}
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	9f 90       	pop	r9
     a96:	8f 90       	pop	r8
     a98:	08 95       	ret

00000a9a <__vector_18>:
		stepperStop();
}



ISR (USART_RX_vect){
     a9a:	1f 92       	push	r1
     a9c:	0f 92       	push	r0
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	0f 92       	push	r0
     aa2:	11 24       	eor	r1, r1
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	4f 93       	push	r20
     ab6:	5f 93       	push	r21
     ab8:	6f 93       	push	r22
     aba:	7f 93       	push	r23
     abc:	8f 93       	push	r24
     abe:	9f 93       	push	r25
     ac0:	af 93       	push	r26
     ac2:	bf 93       	push	r27
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	2a 97       	sbiw	r28, 0x0a	; 10
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	cd bf       	out	0x3d, r28	; 61
	char userInput = UDR0;
     ad6:	e6 ec       	ldi	r30, 0xC6	; 198
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	20 81       	ld	r18, Z
	UDR0=userInput; // echo back
     adc:	20 83       	st	Z, r18
	
	if (userInput !=9) //tab - use to confirm the input
     ade:	29 30       	cpi	r18, 0x09	; 9
     ae0:	81 f0       	breq	.+32     	; 0xb02 <__vector_18+0x68>
	{
		userInputSub=userInput;//store the last input
     ae2:	20 93 e8 02 	sts	0x02E8, r18
		userInputString[userInputIdex]=userInput;//store the string input
     ae6:	80 91 e6 02 	lds	r24, 0x02E6
     aea:	90 91 e7 02 	lds	r25, 0x02E7
     aee:	fc 01       	movw	r30, r24
     af0:	e7 51       	subi	r30, 0x17	; 23
     af2:	fd 4f       	sbci	r31, 0xFD	; 253
     af4:	20 83       	st	Z, r18
		userInputIdex++;
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	90 93 e7 02 	sts	0x02E7, r25
     afc:	80 93 e6 02 	sts	0x02E6, r24
     b00:	b7 c0       	rjmp	.+366    	; 0xc70 <__vector_18+0x1d6>
	}
	
	else{
	
	//Setting the mode
	if (userInputSub=='A'||userInputSub=='a')
     b02:	90 91 e8 02 	lds	r25, 0x02E8
     b06:	89 2f       	mov	r24, r25
     b08:	8f 7d       	andi	r24, 0xDF	; 223
     b0a:	81 34       	cpi	r24, 0x41	; 65
     b0c:	61 f4       	brne	.+24     	; 0xb26 <__vector_18+0x8c>
	{
		replyList(1);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelA=true;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 e5 02 	sts	0x02E5, r24
		modelR=false;
     b1c:	10 92 e4 02 	sts	0x02E4, r1
		modelT=false;
     b20:	10 92 e3 02 	sts	0x02E3, r1
     b24:	26 c0       	rjmp	.+76     	; 0xb72 <__vector_18+0xd8>
	}

	else if (userInputSub=='R'||userInputSub=='r') //reset to the minimum attenuation
     b26:	82 35       	cpi	r24, 0x52	; 82
     b28:	61 f4       	brne	.+24     	; 0xb42 <__vector_18+0xa8>
	{
		replyList(3);
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelR=true;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 e4 02 	sts	0x02E4, r24
		modelA=false;
     b38:	10 92 e5 02 	sts	0x02E5, r1
		modelT=false;
     b3c:	10 92 e3 02 	sts	0x02E3, r1
     b40:	18 c0       	rjmp	.+48     	; 0xb72 <__vector_18+0xd8>
		
	}
	else if (userInputSub=='T'||userInputSub=='t') //Target voltage mode
     b42:	84 35       	cpi	r24, 0x54	; 84
     b44:	61 f4       	brne	.+24     	; 0xb5e <__vector_18+0xc4>
	{
		replyList(4);
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelR=false;
     b4e:	10 92 e4 02 	sts	0x02E4, r1
		modelA=false;
     b52:	10 92 e5 02 	sts	0x02E5, r1
		modelT=true;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 e3 02 	sts	0x02E3, r24
     b5c:	0a c0       	rjmp	.+20     	; 0xb72 <__vector_18+0xd8>
		
	}
	else if (userInputSub==27)//ESC
     b5e:	9b 31       	cpi	r25, 0x1B	; 27
     b60:	41 f4       	brne	.+16     	; 0xb72 <__vector_18+0xd8>
	{
		menuStart();
     b62:	0e 94 0a 03 	call	0x614	; 0x614 <_Z9menuStartv>
		modelA=false;
     b66:	10 92 e5 02 	sts	0x02E5, r1
		modelR=false;
     b6a:	10 92 e4 02 	sts	0x02E4, r1
		modelT=false;
     b6e:	10 92 e3 02 	sts	0x02E3, r1
	}

	
	//Mode A: Move up or down step by step
	if (modelA)
     b72:	80 91 e5 02 	lds	r24, 0x02E5
     b76:	88 23       	and	r24, r24
     b78:	61 f1       	breq	.+88     	; 0xbd2 <__vector_18+0x138>
	{
		if (userInputSub=='w'||userInputSub=='W')
     b7a:	80 91 e8 02 	lds	r24, 0x02E8
     b7e:	8f 7d       	andi	r24, 0xDF	; 223
     b80:	87 35       	cpi	r24, 0x57	; 87
     b82:	91 f4       	brne	.+36     	; 0xba8 <__vector_18+0x10e>
		{
			if (readVoltageLite()<4.00)
     b84:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e8       	ldi	r20, 0x80	; 128
     b8e:	50 e4       	ldi	r21, 0x40	; 64
     b90:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     b94:	88 23       	and	r24, r24
     b96:	0c f0       	brlt	.+2      	; 0xb9a <__vector_18+0x100>
     b98:	65 c0       	rjmp	.+202    	; 0xc64 <__vector_18+0x1ca>
			{
				moveUpDown(STEP_TO_UP);//STEP_TO_UP_4
     b9a:	80 91 02 01 	lds	r24, 0x0102
     b9e:	90 91 03 01 	lds	r25, 0x0103
     ba2:	0e 94 03 04 	call	0x806	; 0x806 <_Z10moveUpDowni>
     ba6:	5e c0       	rjmp	.+188    	; 0xc64 <__vector_18+0x1ca>
			}
			
		}
		else if (userInputSub=='s'||userInputSub=='S')
     ba8:	83 35       	cpi	r24, 0x53	; 83
     baa:	09 f0       	breq	.+2      	; 0xbae <__vector_18+0x114>
     bac:	5b c0       	rjmp	.+182    	; 0xc64 <__vector_18+0x1ca>
		{
			if (readVoltageLite()>0.2)
     bae:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     bb2:	2d ec       	ldi	r18, 0xCD	; 205
     bb4:	3c ec       	ldi	r19, 0xCC	; 204
     bb6:	4c e4       	ldi	r20, 0x4C	; 76
     bb8:	5e e3       	ldi	r21, 0x3E	; 62
     bba:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__gesf2>
     bbe:	18 16       	cp	r1, r24
     bc0:	0c f0       	brlt	.+2      	; 0xbc4 <__vector_18+0x12a>
     bc2:	50 c0       	rjmp	.+160    	; 0xc64 <__vector_18+0x1ca>
			{
				moveUpDown(STEP_TO_DOWN);//STEP_TO_DOWN_4
     bc4:	80 91 00 01 	lds	r24, 0x0100
     bc8:	90 91 01 01 	lds	r25, 0x0101
     bcc:	0e 94 03 04 	call	0x806	; 0x806 <_Z10moveUpDowni>
     bd0:	49 c0       	rjmp	.+146    	; 0xc64 <__vector_18+0x1ca>
			}
			
		}
	}
	
	else if (modelR)
     bd2:	80 91 e4 02 	lds	r24, 0x02E4
     bd6:	88 23       	and	r24, r24
     bd8:	19 f0       	breq	.+6      	; 0xbe0 <__vector_18+0x146>
	{
		reset();
     bda:	0e 94 26 04 	call	0x84c	; 0x84c <_Z5resetv>
     bde:	42 c0       	rjmp	.+132    	; 0xc64 <__vector_18+0x1ca>
	}
	
	else if (modelT)
     be0:	80 91 e3 02 	lds	r24, 0x02E3
     be4:	88 23       	and	r24, r24
     be6:	09 f4       	brne	.+2      	; 0xbea <__vector_18+0x150>
     be8:	3d c0       	rjmp	.+122    	; 0xc64 <__vector_18+0x1ca>
	{
		if (userInputSub=='T'||userInputSub=='t')
     bea:	80 91 e8 02 	lds	r24, 0x02E8
     bee:	8f 7d       	andi	r24, 0xDF	; 223
     bf0:	84 35       	cpi	r24, 0x54	; 84
     bf2:	c1 f1       	breq	.+112    	; 0xc64 <__vector_18+0x1ca>
		{ //do nothing
		}
		else{
		char bufferx[10];
		double dB= atof(userInputString);
     bf4:	89 ee       	ldi	r24, 0xE9	; 233
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <atof>
     bfc:	6b 01       	movw	r12, r22
     bfe:	7c 01       	movw	r14, r24
		if (dB>0&&dB<=24.5)
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	a9 01       	movw	r20, r18
     c06:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__gesf2>
     c0a:	18 16       	cp	r1, r24
     c0c:	5c f5       	brge	.+86     	; 0xc64 <__vector_18+0x1ca>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	44 ec       	ldi	r20, 0xC4	; 196
     c14:	51 e4       	ldi	r21, 0x41	; 65
     c16:	c7 01       	movw	r24, r14
     c18:	b6 01       	movw	r22, r12
     c1a:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     c1e:	18 16       	cp	r1, r24
     c20:	0c f1       	brlt	.+66     	; 0xc64 <__vector_18+0x1ca>
		{
			double targetVol=myVolTodB.getVoltage(dB);
     c22:	b7 01       	movw	r22, r14
     c24:	a6 01       	movw	r20, r12
     c26:	83 ef       	ldi	r24, 0xF3	; 243
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN7VolTodB10getVoltageEd>
     c2e:	6b 01       	movw	r12, r22
     c30:	7c 01       	movw	r14, r24
			if(targetVol!=0){
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	a9 01       	movw	r20, r18
     c38:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
     c3c:	88 23       	and	r24, r24
     c3e:	91 f0       	breq	.+36     	; 0xc64 <__vector_18+0x1ca>
			dtostrf(targetVol,4,2,bufferx);
     c40:	8e 01       	movw	r16, r28
     c42:	0f 5f       	subi	r16, 0xFF	; 255
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	22 e0       	ldi	r18, 0x02	; 2
     c48:	44 e0       	ldi	r20, 0x04	; 4
     c4a:	c7 01       	movw	r24, r14
     c4c:	b6 01       	movw	r22, r12
     c4e:	0e 94 2f 0b 	call	0x165e	; 0x165e <dtostrf>
			myUART.uart_transmit_string(bufferx);
     c52:	b8 01       	movw	r22, r16
     c54:	86 ef       	ldi	r24, 0xF6	; 246
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN8UARTtool20uart_transmit_stringEPc>
			goToTargetVol(targetVol);
     c5c:	c7 01       	movw	r24, r14
     c5e:	b6 01       	movw	r22, r12
     c60:	0e 94 9d 04 	call	0x93a	; 0x93a <_Z13goToTargetVold>
			}
		}
		}
	}
	
	strcpy(userInputString,"");
     c64:	10 92 e9 02 	sts	0x02E9, r1
	userInputIdex=0;
     c68:	10 92 e7 02 	sts	0x02E7, r1
     c6c:	10 92 e6 02 	sts	0x02E6, r1
	}
	

	
	
}
     c70:	2a 96       	adiw	r28, 0x0a	; 10
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <_GLOBAL__sub_I_myStepper>:
#include "ADC.h"
#include "UARTtool.h"
#include "Menu.h"
#include "VolTodB.h"

Stepper  myStepper;
     cae:	87 ef       	ldi	r24, 0xF7	; 247
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN7StepperC1Ev>
UARTtool myUART;
     cb6:	86 ef       	ldi	r24, 0xF6	; 246
     cb8:	92 e0       	ldi	r25, 0x02	; 2
     cba:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN8UARTtoolC1Ev>
ADC2     myADC;
     cbe:	85 ef       	ldi	r24, 0xF5	; 245
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 05 01 	call	0x20a	; 0x20a <_ZN4ADC2C1Ev>
ADS1115  myADS1115;
     cc6:	84 ef       	ldi	r24, 0xF4	; 244
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	0e 94 12 01 	call	0x224	; 0x224 <_ZN7ADS1115C1Ev>
VolTodB  myVolTodB;
     cce:	83 ef       	ldi	r24, 0xF3	; 243
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 89 01 	call	0x312	; 0x312 <_ZN7VolTodBC1Ev>
     cd6:	08 95       	ret

00000cd8 <_ZN6MillisC1Ev>:
uint64_t _millis = 0;
uint16_t _1000us = 0;
uint64_t old_millis = 0;
	

Millis::Millis(void){
     cd8:	08 95       	ret

00000cda <__vector_16>:
	;
	}

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	ef 93       	push	r30
     cf8:	ff 93       	push	r31
	_1000us += 128;
     cfa:	e0 91 0b 03 	lds	r30, 0x030B
     cfe:	f0 91 0c 03 	lds	r31, 0x030C
     d02:	e0 58       	subi	r30, 0x80	; 128
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	f0 93 0c 03 	sts	0x030C, r31
     d0a:	e0 93 0b 03 	sts	0x030B, r30
	while (_1000us > 1000) {
     d0e:	e9 3e       	cpi	r30, 0xE9	; 233
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	f8 07       	cpc	r31, r24
     d14:	68 f1       	brcs	.+90     	; 0xd70 <__vector_16+0x96>
     d16:	20 91 0d 03 	lds	r18, 0x030D
     d1a:	30 91 0e 03 	lds	r19, 0x030E
     d1e:	40 91 0f 03 	lds	r20, 0x030F
     d22:	50 91 10 03 	lds	r21, 0x0310
     d26:	60 91 11 03 	lds	r22, 0x0311
     d2a:	70 91 12 03 	lds	r23, 0x0312
     d2e:	80 91 13 03 	lds	r24, 0x0313
     d32:	90 91 14 03 	lds	r25, 0x0314
		_millis++;
     d36:	a1 e0       	ldi	r26, 0x01	; 1
     d38:	0e 94 ef 0a 	call	0x15de	; 0x15de <__adddi3_s8>
		_1000us -= 1000;
     d3c:	e8 5e       	subi	r30, 0xE8	; 232
     d3e:	f3 40       	sbci	r31, 0x03	; 3

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
	_1000us += 128;
	while (_1000us > 1000) {
     d40:	e9 3e       	cpi	r30, 0xE9	; 233
     d42:	a3 e0       	ldi	r26, 0x03	; 3
     d44:	fa 07       	cpc	r31, r26
     d46:	b8 f7       	brcc	.-18     	; 0xd36 <__vector_16+0x5c>
     d48:	20 93 0d 03 	sts	0x030D, r18
     d4c:	30 93 0e 03 	sts	0x030E, r19
     d50:	40 93 0f 03 	sts	0x030F, r20
     d54:	50 93 10 03 	sts	0x0310, r21
     d58:	60 93 11 03 	sts	0x0311, r22
     d5c:	70 93 12 03 	sts	0x0312, r23
     d60:	80 93 13 03 	sts	0x0313, r24
     d64:	90 93 14 03 	sts	0x0314, r25
     d68:	f0 93 0c 03 	sts	0x030C, r31
     d6c:	e0 93 0b 03 	sts	0x030B, r30
		_millis++;
		_1000us -= 1000;
	}
}
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	af 91       	pop	r26
     d76:	9f 91       	pop	r25
     d78:	8f 91       	pop	r24
     d7a:	7f 91       	pop	r23
     d7c:	6f 91       	pop	r22
     d7e:	5f 91       	pop	r21
     d80:	4f 91       	pop	r20
     d82:	3f 91       	pop	r19
     d84:	2f 91       	pop	r18
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <_ZN6Millis6millisEv>:

// safe access to millis counter
uint64_t Millis::millis() {
	uint64_t m;
	cli();
     d90:	f8 94       	cli
	m = _millis;
     d92:	20 91 0d 03 	lds	r18, 0x030D
     d96:	30 91 0e 03 	lds	r19, 0x030E
     d9a:	40 91 0f 03 	lds	r20, 0x030F
     d9e:	50 91 10 03 	lds	r21, 0x0310
     da2:	60 91 11 03 	lds	r22, 0x0311
     da6:	70 91 12 03 	lds	r23, 0x0312
     daa:	80 91 13 03 	lds	r24, 0x0313
     dae:	90 91 14 03 	lds	r25, 0x0314
	sei();
     db2:	78 94       	sei
	return m;
}
     db4:	08 95       	ret

00000db6 <_ZN6Millis5setupEv>:
	//PORTB |= _BV(PB3); // turn the LED on

	/* interrup setup */
	// prescale timer0 to 1/8th the clock rate
	// overflow timer0 every 0.256 ms
	TCCR0B |= (1<<CS01);
     db6:	85 b5       	in	r24, 0x25	; 37
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	85 bd       	out	0x25, r24	; 37
	// enable timer overflow interrupt
	TIMSK0  |= 1<<TOIE0;
     dbc:	ee e6       	ldi	r30, 0x6E	; 110
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	81 60       	ori	r24, 0x01	; 1
     dc4:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
     dc6:	78 94       	sei
     dc8:	08 95       	ret

00000dca <_Z9pin_setupv>:
   }
	
}

void pin_setup(){
	DDRD &= !_BV(5); //PD5  T1
     dca:	8a b1       	in	r24, 0x0a	; 10
     dcc:	1a b8       	out	0x0a, r1	; 10
	//DDRD &= !_BV(3); //INT1
	DDRD |= _BV(7);
     dce:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= _BV(7); //Used to enable the L293D
     dd0:	5f 9a       	sbi	0x0b, 7	; 11
     dd2:	08 95       	ret

00000dd4 <_Z14register_setupv>:
	
}

void register_setup(){
	//Enable T1
	TCCR1B |= _BV(CS10) | _BV(CS11) | _BV(CS12);
     dd4:	e1 e8       	ldi	r30, 0x81	; 129
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	87 60       	ori	r24, 0x07	; 7
     ddc:	80 83       	st	Z, r24
     dde:	08 95       	ret

00000de0 <main>:
Menu     myMenu;


int main(void)
{
	pin_setup();
     de0:	0e 94 e5 06 	call	0xdca	; 0xdca <_Z9pin_setupv>
	register_setup();
     de4:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_Z14register_setupv>
	sei();
     de8:	78 94       	sei
	myMenu.MenuStart();
     dea:	85 e1       	ldi	r24, 0x15	; 21
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	0e 94 89 03 	call	0x712	; 0x712 <_ZN4Menu9MenuStartEv>
     df2:	ff cf       	rjmp	.-2      	; 0xdf2 <main+0x12>

00000df4 <_GLOBAL__sub_I_myMenu>:
#include "Menu.h"

void pin_setup();
void register_setup();

Menu     myMenu;
     df4:	85 e1       	ldi	r24, 0x15	; 21
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4MenuC1Ev>
     dfc:	08 95       	ret

00000dfe <_ZN7StepperC1Ev>:
 *   Sets which wires should control the motor.
 */

Millis myMillis;

Stepper::Stepper()
     dfe:	fc 01       	movw	r30, r24
{
  step_number = 0;      // which step the motor is on
     e00:	15 86       	std	Z+13, r1	; 0x0d
     e02:	14 86       	std	Z+12, r1	; 0x0c
  speed = 0;        // the motor speed, in revolutions per minute
     e04:	13 82       	std	Z+3, r1	; 0x03
     e06:	12 82       	std	Z+2, r1	; 0x02
  direction = 0;      // motor direction
     e08:	11 82       	std	Z+1, r1	; 0x01
     e0a:	10 82       	st	Z, r1
  last_step_time = 0;    // time stamp in ms of the last step taken
     e0c:	10 8a       	std	Z+16, r1	; 0x10
     e0e:	11 8a       	std	Z+17, r1	; 0x11
     e10:	12 8a       	std	Z+18, r1	; 0x12
     e12:	13 8a       	std	Z+19, r1	; 0x13
  number_of_steps = 1024;
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	91 87       	std	Z+9, r25	; 0x09
     e1a:	80 87       	std	Z+8, r24	; 0x08
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);
  */
  
  DDRB= 0X0F;
     e1c:	8f e0       	ldi	r24, 0x0F	; 15
     e1e:	84 b9       	out	0x04, r24	; 4
  PORTB &= !_BV(0);
     e20:	85 b1       	in	r24, 0x05	; 5
     e22:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(1);
     e24:	85 b1       	in	r24, 0x05	; 5
     e26:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(2);
     e28:	85 b1       	in	r24, 0x05	; 5
     e2a:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(3);
     e2c:	85 b1       	in	r24, 0x05	; 5
     e2e:	15 b8       	out	0x05, r1	; 5
  
  // pin_count is used by the stepMotor() method:  
  pin_count = 4; 
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	93 87       	std	Z+11, r25	; 0x0b
     e36:	82 87       	std	Z+10, r24	; 0x0a
  
  //Initialize the milis
  
  myMillis.setup();
     e38:	86 e1       	ldi	r24, 0x16	; 22
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN6Millis5setupEv>
     e40:	08 95       	ret

00000e42 <_ZN7Stepper8setSpeedEl>:
/*
  Sets the speed in revs per minute

*/
void Stepper::setSpeed(long whatSpeed)
{
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	ec 01       	movw	r28, r24
     e50:	6a 01       	movw	r12, r20
     e52:	7b 01       	movw	r14, r22
  step_delay = 60L * 1000L / this->number_of_steps / whatSpeed;
     e54:	28 85       	ldd	r18, Y+8	; 0x08
     e56:	39 85       	ldd	r19, Y+9	; 0x09
     e58:	44 27       	eor	r20, r20
     e5a:	37 fd       	sbrc	r19, 7
     e5c:	40 95       	com	r20
     e5e:	54 2f       	mov	r21, r20
     e60:	60 e6       	ldi	r22, 0x60	; 96
     e62:	7a ee       	ldi	r23, 0xEA	; 234
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__divmodsi4>
     e6c:	ca 01       	movw	r24, r20
     e6e:	b9 01       	movw	r22, r18
     e70:	a7 01       	movw	r20, r14
     e72:	96 01       	movw	r18, r12
     e74:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__divmodsi4>
     e78:	2c 83       	std	Y+4, r18	; 0x04
     e7a:	3d 83       	std	Y+5, r19	; 0x05
     e7c:	4e 83       	std	Y+6, r20	; 0x06
     e7e:	5f 83       	std	Y+7, r21	; 0x07
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	08 95       	ret

00000e8e <_ZN7Stepper9stepMotorEi>:
		PORTB |= _BV(3);
		PORTB &= !_BV(3);
		
	*/
   
	   switch (thisStep) {
     e8e:	68 30       	cpi	r22, 0x08	; 8
     e90:	71 05       	cpc	r23, r1
     e92:	08 f0       	brcs	.+2      	; 0xe96 <_ZN7Stepper9stepMotorEi+0x8>
     e94:	40 c0       	rjmp	.+128    	; 0xf16 <_ZN7Stepper9stepMotorEi+0x88>
     e96:	fb 01       	movw	r30, r22
     e98:	ec 5c       	subi	r30, 0xCC	; 204
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__tablejump2__>
		   
		   case 0:    // 0011
		   PORTB &= !_BV(0);
     ea0:	85 b1       	in	r24, 0x05	; 5
     ea2:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     ea4:	85 b1       	in	r24, 0x05	; 5
     ea6:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(3);
     ea8:	2b 9a       	sbi	0x05, 3	; 5
		   PORTB |= _BV(2);
     eaa:	2a 9a       	sbi	0x05, 2	; 5
		   break;
     eac:	08 95       	ret
		   
		   case 1:    // 0001
		   PORTB &= !_BV(0);
     eae:	85 b1       	in	r24, 0x05	; 5
     eb0:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     eb2:	85 b1       	in	r24, 0x05	; 5
     eb4:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     eb6:	85 b1       	in	r24, 0x05	; 5
     eb8:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(3);
     eba:	2b 9a       	sbi	0x05, 3	; 5
		   break;
     ebc:	08 95       	ret
		   
		   case 2:    // 0101
           PORTB &= !_BV(0);
     ebe:	85 b1       	in	r24, 0x05	; 5
     ec0:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     ec2:	85 b1       	in	r24, 0x05	; 5
     ec4:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(1);
     ec6:	29 9a       	sbi	0x05, 1	; 5
		   PORTB |= _BV(3);
     ec8:	2b 9a       	sbi	0x05, 3	; 5
		   break;
     eca:	08 95       	ret
		   
		   case 3:    // 0100
           PORTB &= !_BV(0);
     ecc:	85 b1       	in	r24, 0x05	; 5
     ece:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     ed0:	85 b1       	in	r24, 0x05	; 5
     ed2:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     ed4:	85 b1       	in	r24, 0x05	; 5
     ed6:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(1);
     ed8:	29 9a       	sbi	0x05, 1	; 5
		   break;
     eda:	08 95       	ret
		   
		   case 4:    //1100
		   PORTB &= !_BV(2);
     edc:	85 b1       	in	r24, 0x05	; 5
     ede:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     ee0:	85 b1       	in	r24, 0x05	; 5
     ee2:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(0);
     ee4:	28 9a       	sbi	0x05, 0	; 5
		   PORTB |= _BV(1);
     ee6:	29 9a       	sbi	0x05, 1	; 5
		   break;
     ee8:	08 95       	ret
		   
		   case 5:    //1000
		   PORTB &= !_BV(2);
     eea:	85 b1       	in	r24, 0x05	; 5
     eec:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     eee:	85 b1       	in	r24, 0x05	; 5
     ef0:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     ef2:	85 b1       	in	r24, 0x05	; 5
     ef4:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(0);
     ef6:	28 9a       	sbi	0x05, 0	; 5
		   break;
     ef8:	08 95       	ret
		   
		   case 6:    //0010
		   PORTB &= !_BV(3);
     efa:	85 b1       	in	r24, 0x05	; 5
     efc:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     efe:	85 b1       	in	r24, 0x05	; 5
     f00:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(2);
     f02:	2a 9a       	sbi	0x05, 2	; 5
		   PORTB |= _BV(0);
     f04:	28 9a       	sbi	0x05, 0	; 5
		   break;
     f06:	08 95       	ret
		   
		   case 7:    //1010
		   PORTB &= !_BV(3);
     f08:	85 b1       	in	r24, 0x05	; 5
     f0a:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     f0c:	85 b1       	in	r24, 0x05	; 5
     f0e:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(0);
     f10:	85 b1       	in	r24, 0x05	; 5
     f12:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(2);
     f14:	2a 9a       	sbi	0x05, 2	; 5
     f16:	08 95       	ret

00000f18 <_ZN7Stepper4stepEi>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
   the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{  
     f18:	2f 92       	push	r2
     f1a:	3f 92       	push	r3
     f1c:	4f 92       	push	r4
     f1e:	5f 92       	push	r5
     f20:	6f 92       	push	r6
     f22:	7f 92       	push	r7
     f24:	8f 92       	push	r8
     f26:	9f 92       	push	r9
     f28:	af 92       	push	r10
     f2a:	bf 92       	push	r11
     f2c:	cf 92       	push	r12
     f2e:	df 92       	push	r13
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <_ZN7Stepper4stepEi+0x26>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <_ZN7Stepper4stepEi+0x28>
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9c 83       	std	Y+4, r25	; 0x04
     f46:	8b 83       	std	Y+3, r24	; 0x03
  int steps_left = abs(steps_to_move);  // how many steps to take
     f48:	4b 01       	movw	r8, r22
     f4a:	77 23       	and	r23, r23
     f4c:	24 f4       	brge	.+8      	; 0xf56 <_ZN7Stepper4stepEi+0x3e>
     f4e:	88 24       	eor	r8, r8
     f50:	99 24       	eor	r9, r9
     f52:	86 1a       	sub	r8, r22
     f54:	97 0a       	sbc	r9, r23
     f56:	9a 82       	std	Y+2, r9	; 0x02
     f58:	89 82       	std	Y+1, r8	; 0x01
  
  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) {direction = 1;}
     f5a:	16 16       	cp	r1, r22
     f5c:	17 06       	cpc	r1, r23
     f5e:	34 f4       	brge	.+12     	; 0xf6c <_ZN7Stepper4stepEi+0x54>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	ab 81       	ldd	r26, Y+3	; 0x03
     f66:	bc 81       	ldd	r27, Y+4	; 0x04
     f68:	8d 93       	st	X+, r24
     f6a:	9c 93       	st	X, r25
  if (steps_to_move < 0) {direction = 0;}
     f6c:	77 23       	and	r23, r23
     f6e:	0c f0       	brlt	.+2      	; 0xf72 <_ZN7Stepper4stepEi+0x5a>
     f70:	83 c0       	rjmp	.+262    	; 0x1078 <_ZN7Stepper4stepEi+0x160>
     f72:	eb 81       	ldd	r30, Y+3	; 0x03
     f74:	fc 81       	ldd	r31, Y+4	; 0x04
     f76:	11 82       	std	Z+1, r1	; 0x01
     f78:	10 82       	st	Z, r1
     f7a:	7e c0       	rjmp	.+252    	; 0x1078 <_ZN7Stepper4stepEi+0x160>
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
  // move only if the appropriate delay has passed:
  if (myMillis.millis() - last_step_time >= step_delay) {//this->step_delay
     f7c:	86 e1       	ldi	r24, 0x16	; 22
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN6Millis6millisEv>
     f84:	ab 81       	ldd	r26, Y+3	; 0x03
     f86:	bc 81       	ldd	r27, Y+4	; 0x04
     f88:	50 96       	adiw	r26, 0x10	; 16
     f8a:	ed 90       	ld	r14, X+
     f8c:	fd 90       	ld	r15, X+
     f8e:	0d 91       	ld	r16, X+
     f90:	1c 91       	ld	r17, X
     f92:	53 97       	sbiw	r26, 0x13	; 19
     f94:	27 01       	movw	r4, r14
     f96:	38 01       	movw	r6, r16
     f98:	77 0c       	add	r7, r7
     f9a:	44 08       	sbc	r4, r4
     f9c:	54 2c       	mov	r5, r4
     f9e:	32 01       	movw	r6, r4
     fa0:	ae 2c       	mov	r10, r14
     fa2:	bf 2c       	mov	r11, r15
     fa4:	c0 2e       	mov	r12, r16
     fa6:	d1 2e       	mov	r13, r17
     fa8:	e4 2c       	mov	r14, r4
     faa:	f4 2c       	mov	r15, r4
     fac:	04 2d       	mov	r16, r4
     fae:	14 2d       	mov	r17, r4
     fb0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__subdi3>
     fb4:	f2 2f       	mov	r31, r18
     fb6:	e3 2f       	mov	r30, r19
     fb8:	14 96       	adiw	r26, 0x04	; 4
     fba:	0d 91       	ld	r16, X+
     fbc:	1d 91       	ld	r17, X+
     fbe:	2d 91       	ld	r18, X+
     fc0:	3c 91       	ld	r19, X
     fc2:	17 97       	sbiw	r26, 0x07	; 7
     fc4:	18 01       	movw	r2, r16
     fc6:	29 01       	movw	r4, r18
     fc8:	2f 2f       	mov	r18, r31
     fca:	3e 2f       	mov	r19, r30
     fcc:	a2 2c       	mov	r10, r2
     fce:	b3 2c       	mov	r11, r3
     fd0:	c4 2c       	mov	r12, r4
     fd2:	d5 2c       	mov	r13, r5
     fd4:	e1 2c       	mov	r14, r1
     fd6:	f1 2c       	mov	r15, r1
     fd8:	00 e0       	ldi	r16, 0x00	; 0
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	0e 94 04 0b 	call	0x1608	; 0x1608 <__cmpdi2>
     fe0:	68 f2       	brcs	.-102    	; 0xf7c <_ZN7Stepper4stepEi+0x64>
      // get the timeStamp of when you stepped:
      last_step_time = myMillis.millis();
     fe2:	86 e1       	ldi	r24, 0x16	; 22
     fe4:	93 e0       	ldi	r25, 0x03	; 3
     fe6:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN6Millis6millisEv>
     fea:	eb 81       	ldd	r30, Y+3	; 0x03
     fec:	fc 81       	ldd	r31, Y+4	; 0x04
     fee:	20 8b       	std	Z+16, r18	; 0x10
     ff0:	31 8b       	std	Z+17, r19	; 0x11
     ff2:	42 8b       	std	Z+18, r20	; 0x12
     ff4:	53 8b       	std	Z+19, r21	; 0x13
      // increment or decrement the step number,
      // depending on direction:
      if (direction == 1) {
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	69 f4       	brne	.+26     	; 0x1018 <_ZN7Stepper4stepEi+0x100>
		  step_number++;
     ffe:	84 85       	ldd	r24, Z+12	; 0x0c
    1000:	95 85       	ldd	r25, Z+13	; 0x0d
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	95 87       	std	Z+13, r25	; 0x0d
    1006:	84 87       	std	Z+12, r24	; 0x0c
        if (step_number == number_of_steps) {
    1008:	20 85       	ldd	r18, Z+8	; 0x08
    100a:	31 85       	ldd	r19, Z+9	; 0x09
    100c:	82 17       	cp	r24, r18
    100e:	93 07       	cpc	r25, r19
    1010:	d1 f4       	brne	.+52     	; 0x1046 <_ZN7Stepper4stepEi+0x12e>
          step_number = 0;
    1012:	15 86       	std	Z+13, r1	; 0x0d
    1014:	14 86       	std	Z+12, r1	; 0x0c
    1016:	17 c0       	rjmp	.+46     	; 0x1046 <_ZN7Stepper4stepEi+0x12e>
        }
      } 
      else { 
        if (step_number == 0) {
    1018:	ab 81       	ldd	r26, Y+3	; 0x03
    101a:	bc 81       	ldd	r27, Y+4	; 0x04
    101c:	1c 96       	adiw	r26, 0x0c	; 12
    101e:	8d 91       	ld	r24, X+
    1020:	9c 91       	ld	r25, X
    1022:	1d 97       	sbiw	r26, 0x0d	; 13
    1024:	89 2b       	or	r24, r25
    1026:	41 f4       	brne	.+16     	; 0x1038 <_ZN7Stepper4stepEi+0x120>
         step_number = number_of_steps;
    1028:	18 96       	adiw	r26, 0x08	; 8
    102a:	8d 91       	ld	r24, X+
    102c:	9c 91       	ld	r25, X
    102e:	19 97       	sbiw	r26, 0x09	; 9
    1030:	1d 96       	adiw	r26, 0x0d	; 13
    1032:	9c 93       	st	X, r25
    1034:	8e 93       	st	-X, r24
    1036:	1c 97       	sbiw	r26, 0x0c	; 12
        }
        step_number--;
    1038:	eb 81       	ldd	r30, Y+3	; 0x03
    103a:	fc 81       	ldd	r31, Y+4	; 0x04
    103c:	84 85       	ldd	r24, Z+12	; 0x0c
    103e:	95 85       	ldd	r25, Z+13	; 0x0d
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	95 87       	std	Z+13, r25	; 0x0d
    1044:	84 87       	std	Z+12, r24	; 0x0c
      }
      // decrement the steps left:
      steps_left--;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 8);
    1050:	ab 81       	ldd	r26, Y+3	; 0x03
    1052:	bc 81       	ldd	r27, Y+4	; 0x04
    1054:	1c 96       	adiw	r26, 0x0c	; 12
    1056:	6d 91       	ld	r22, X+
    1058:	7c 91       	ld	r23, X
    105a:	1d 97       	sbiw	r26, 0x0d	; 13
    105c:	67 70       	andi	r22, 0x07	; 7
    105e:	70 78       	andi	r23, 0x80	; 128
    1060:	77 23       	and	r23, r23
    1062:	34 f4       	brge	.+12     	; 0x1070 <_ZN7Stepper4stepEi+0x158>
    1064:	61 50       	subi	r22, 0x01	; 1
    1066:	71 09       	sbc	r23, r1
    1068:	68 6f       	ori	r22, 0xF8	; 248
    106a:	7f 6f       	ori	r23, 0xFF	; 255
    106c:	6f 5f       	subi	r22, 0xFF	; 255
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN7Stepper9stepMotorEi>
  if (steps_to_move > 0) {direction = 1;}
  if (steps_to_move < 0) {direction = 0;}
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
    1078:	e9 81       	ldd	r30, Y+1	; 0x01
    107a:	fa 81       	ldd	r31, Y+2	; 0x02
    107c:	1e 16       	cp	r1, r30
    107e:	1f 06       	cpc	r1, r31
    1080:	0c f4       	brge	.+2      	; 0x1084 <_ZN7Stepper4stepEi+0x16c>
    1082:	7c cf       	rjmp	.-264    	; 0xf7c <_ZN7Stepper4stepEi+0x64>
      steps_left--;
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 8);
    }
  }
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	cf 90       	pop	r12
    109c:	bf 90       	pop	r11
    109e:	af 90       	pop	r10
    10a0:	9f 90       	pop	r9
    10a2:	8f 90       	pop	r8
    10a4:	7f 90       	pop	r7
    10a6:	6f 90       	pop	r6
    10a8:	5f 90       	pop	r5
    10aa:	4f 90       	pop	r4
    10ac:	3f 90       	pop	r3
    10ae:	2f 90       	pop	r2
    10b0:	08 95       	ret

000010b2 <_ZN7Stepper8motorOffEv>:
{
     //digitalWrite(motor_pin_1, LOW);
     //digitalWrite(motor_pin_2, LOW);
     //digitalWrite(motor_pin_3, LOW);
     //digitalWrite(motor_pin_4, LOW);
	  PORTB &= !_BV(0);
    10b2:	85 b1       	in	r24, 0x05	; 5
    10b4:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(1);
    10b6:	85 b1       	in	r24, 0x05	; 5
    10b8:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(2);
    10ba:	85 b1       	in	r24, 0x05	; 5
    10bc:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(3);
    10be:	85 b1       	in	r24, 0x05	; 5
    10c0:	15 b8       	out	0x05, r1	; 5
    10c2:	08 95       	ret

000010c4 <_GLOBAL__sub_I_myMillis>:
/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */

Millis myMillis;
    10c4:	86 e1       	ldi	r24, 0x16	; 22
    10c6:	93 e0       	ldi	r25, 0x03	; 3
    10c8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_ZN6MillisC1Ev>
    10cc:	08 95       	ret

000010ce <_ZN8UARTtoolC1Ev>:
#include "UARTtool.h"
#include <avr/io.h>
#include <string.h>

UARTtool::UARTtool(){
	UBRR0H = (BAUDRATE>>8);                      // shift the register right by 8 bits
    10ce:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;                           // set baud rate
    10d2:	87 e6       	ldi	r24, 0x67	; 103
    10d4:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B|= (1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);                // enable receiver and transmitter
    10d8:	e1 ec       	ldi	r30, 0xC1	; 193
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	88 69       	ori	r24, 0x98	; 152
    10e0:	80 83       	st	Z, r24
	UCSR0C|= (0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);   // 8bit data format
    10e2:	e2 ec       	ldi	r30, 0xC2	; 194
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	86 60       	ori	r24, 0x06	; 6
    10ea:	80 83       	st	Z, r24
    10ec:	08 95       	ret

000010ee <_ZN8UARTtool13uart_transmitEc>:
	
}

void UARTtool::uart_transmit (char data){
	while (!( UCSR0A & (1<<UDRE0)));                // wait while register is free
    10ee:	e0 ec       	ldi	r30, 0xC0	; 192
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	85 ff       	sbrs	r24, 5
    10f6:	fd cf       	rjmp	.-6      	; 0x10f2 <_ZN8UARTtool13uart_transmitEc+0x4>
	UDR0 = data;
    10f8:	60 93 c6 00 	sts	0x00C6, r22
    10fc:	08 95       	ret

000010fe <_ZN8UARTtool20uart_transmit_stringEPc>:
}

void UARTtool::uart_transmit_string(char data[]){
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	7c 01       	movw	r14, r24
	
	int i= strlen(data);
    1110:	fb 01       	movw	r30, r22
    1112:	01 90       	ld	r0, Z+
    1114:	00 20       	and	r0, r0
    1116:	e9 f7       	brne	.-6      	; 0x1112 <_ZN8UARTtool20uart_transmit_stringEPc+0x14>
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	6f 01       	movw	r12, r30
    111c:	c6 1a       	sub	r12, r22
    111e:	d7 0a       	sbc	r13, r23
	for (int j=0;j<=i;j++)
    1120:	6a f0       	brmi	.+26     	; 0x113c <_ZN8UARTtool20uart_transmit_stringEPc+0x3e>
    1122:	8b 01       	movw	r16, r22
    1124:	c0 e0       	ldi	r28, 0x00	; 0
    1126:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uart_transmit(data[j]);
    1128:	f8 01       	movw	r30, r16
    112a:	61 91       	ld	r22, Z+
    112c:	8f 01       	movw	r16, r30
    112e:	c7 01       	movw	r24, r14
    1130:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN8UARTtool13uart_transmitEc>
}

void UARTtool::uart_transmit_string(char data[]){
	
	int i= strlen(data);
	for (int j=0;j<=i;j++)
    1134:	21 96       	adiw	r28, 0x01	; 1
    1136:	cc 16       	cp	r12, r28
    1138:	dd 06       	cpc	r13, r29
    113a:	b4 f7       	brge	.-20     	; 0x1128 <_ZN8UARTtool20uart_transmit_stringEPc+0x2a>
	{
		uart_transmit(data[j]);
		
	}
	uart_transmit(0x0A);
    113c:	6a e0       	ldi	r22, 0x0A	; 10
    113e:	c7 01       	movw	r24, r14
    1140:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN8UARTtool13uart_transmitEc>
	uart_transmit(0x0D);//newline
    1144:	6d e0       	ldi	r22, 0x0D	; 13
    1146:	c7 01       	movw	r24, r14
    1148:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN8UARTtool13uart_transmitEc>
	
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	08 95       	ret

0000115e <__subsf3>:
    115e:	50 58       	subi	r21, 0x80	; 128

00001160 <__addsf3>:
    1160:	bb 27       	eor	r27, r27
    1162:	aa 27       	eor	r26, r26
    1164:	0e d0       	rcall	.+28     	; 0x1182 <__addsf3x>
    1166:	75 c1       	rjmp	.+746    	; 0x1452 <__fp_round>
    1168:	66 d1       	rcall	.+716    	; 0x1436 <__fp_pscA>
    116a:	30 f0       	brcs	.+12     	; 0x1178 <__addsf3+0x18>
    116c:	6b d1       	rcall	.+726    	; 0x1444 <__fp_pscB>
    116e:	20 f0       	brcs	.+8      	; 0x1178 <__addsf3+0x18>
    1170:	31 f4       	brne	.+12     	; 0x117e <__addsf3+0x1e>
    1172:	9f 3f       	cpi	r25, 0xFF	; 255
    1174:	11 f4       	brne	.+4      	; 0x117a <__addsf3+0x1a>
    1176:	1e f4       	brtc	.+6      	; 0x117e <__addsf3+0x1e>
    1178:	5b c1       	rjmp	.+694    	; 0x1430 <__fp_nan>
    117a:	0e f4       	brtc	.+2      	; 0x117e <__addsf3+0x1e>
    117c:	e0 95       	com	r30
    117e:	e7 fb       	bst	r30, 7
    1180:	51 c1       	rjmp	.+674    	; 0x1424 <__fp_inf>

00001182 <__addsf3x>:
    1182:	e9 2f       	mov	r30, r25
    1184:	77 d1       	rcall	.+750    	; 0x1474 <__fp_split3>
    1186:	80 f3       	brcs	.-32     	; 0x1168 <__addsf3+0x8>
    1188:	ba 17       	cp	r27, r26
    118a:	62 07       	cpc	r22, r18
    118c:	73 07       	cpc	r23, r19
    118e:	84 07       	cpc	r24, r20
    1190:	95 07       	cpc	r25, r21
    1192:	18 f0       	brcs	.+6      	; 0x119a <__addsf3x+0x18>
    1194:	71 f4       	brne	.+28     	; 0x11b2 <__addsf3x+0x30>
    1196:	9e f5       	brtc	.+102    	; 0x11fe <__addsf3x+0x7c>
    1198:	8f c1       	rjmp	.+798    	; 0x14b8 <__fp_zero>
    119a:	0e f4       	brtc	.+2      	; 0x119e <__addsf3x+0x1c>
    119c:	e0 95       	com	r30
    119e:	0b 2e       	mov	r0, r27
    11a0:	ba 2f       	mov	r27, r26
    11a2:	a0 2d       	mov	r26, r0
    11a4:	0b 01       	movw	r0, r22
    11a6:	b9 01       	movw	r22, r18
    11a8:	90 01       	movw	r18, r0
    11aa:	0c 01       	movw	r0, r24
    11ac:	ca 01       	movw	r24, r20
    11ae:	a0 01       	movw	r20, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	ff 27       	eor	r31, r31
    11b4:	59 1b       	sub	r21, r25
    11b6:	99 f0       	breq	.+38     	; 0x11de <__addsf3x+0x5c>
    11b8:	59 3f       	cpi	r21, 0xF9	; 249
    11ba:	50 f4       	brcc	.+20     	; 0x11d0 <__addsf3x+0x4e>
    11bc:	50 3e       	cpi	r21, 0xE0	; 224
    11be:	68 f1       	brcs	.+90     	; 0x121a <__addsf3x+0x98>
    11c0:	1a 16       	cp	r1, r26
    11c2:	f0 40       	sbci	r31, 0x00	; 0
    11c4:	a2 2f       	mov	r26, r18
    11c6:	23 2f       	mov	r18, r19
    11c8:	34 2f       	mov	r19, r20
    11ca:	44 27       	eor	r20, r20
    11cc:	58 5f       	subi	r21, 0xF8	; 248
    11ce:	f3 cf       	rjmp	.-26     	; 0x11b6 <__addsf3x+0x34>
    11d0:	46 95       	lsr	r20
    11d2:	37 95       	ror	r19
    11d4:	27 95       	ror	r18
    11d6:	a7 95       	ror	r26
    11d8:	f0 40       	sbci	r31, 0x00	; 0
    11da:	53 95       	inc	r21
    11dc:	c9 f7       	brne	.-14     	; 0x11d0 <__addsf3x+0x4e>
    11de:	7e f4       	brtc	.+30     	; 0x11fe <__addsf3x+0x7c>
    11e0:	1f 16       	cp	r1, r31
    11e2:	ba 0b       	sbc	r27, r26
    11e4:	62 0b       	sbc	r22, r18
    11e6:	73 0b       	sbc	r23, r19
    11e8:	84 0b       	sbc	r24, r20
    11ea:	ba f0       	brmi	.+46     	; 0x121a <__addsf3x+0x98>
    11ec:	91 50       	subi	r25, 0x01	; 1
    11ee:	a1 f0       	breq	.+40     	; 0x1218 <__addsf3x+0x96>
    11f0:	ff 0f       	add	r31, r31
    11f2:	bb 1f       	adc	r27, r27
    11f4:	66 1f       	adc	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	88 1f       	adc	r24, r24
    11fa:	c2 f7       	brpl	.-16     	; 0x11ec <__addsf3x+0x6a>
    11fc:	0e c0       	rjmp	.+28     	; 0x121a <__addsf3x+0x98>
    11fe:	ba 0f       	add	r27, r26
    1200:	62 1f       	adc	r22, r18
    1202:	73 1f       	adc	r23, r19
    1204:	84 1f       	adc	r24, r20
    1206:	48 f4       	brcc	.+18     	; 0x121a <__addsf3x+0x98>
    1208:	87 95       	ror	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b7 95       	ror	r27
    1210:	f7 95       	ror	r31
    1212:	9e 3f       	cpi	r25, 0xFE	; 254
    1214:	08 f0       	brcs	.+2      	; 0x1218 <__addsf3x+0x96>
    1216:	b3 cf       	rjmp	.-154    	; 0x117e <__addsf3+0x1e>
    1218:	93 95       	inc	r25
    121a:	88 0f       	add	r24, r24
    121c:	08 f0       	brcs	.+2      	; 0x1220 <__addsf3x+0x9e>
    121e:	99 27       	eor	r25, r25
    1220:	ee 0f       	add	r30, r30
    1222:	97 95       	ror	r25
    1224:	87 95       	ror	r24
    1226:	08 95       	ret

00001228 <__cmpsf2>:
    1228:	d9 d0       	rcall	.+434    	; 0x13dc <__fp_cmp>
    122a:	08 f4       	brcc	.+2      	; 0x122e <__cmpsf2+0x6>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	08 95       	ret

00001230 <__divsf3>:
    1230:	0c d0       	rcall	.+24     	; 0x124a <__divsf3x>
    1232:	0f c1       	rjmp	.+542    	; 0x1452 <__fp_round>
    1234:	07 d1       	rcall	.+526    	; 0x1444 <__fp_pscB>
    1236:	40 f0       	brcs	.+16     	; 0x1248 <__divsf3+0x18>
    1238:	fe d0       	rcall	.+508    	; 0x1436 <__fp_pscA>
    123a:	30 f0       	brcs	.+12     	; 0x1248 <__divsf3+0x18>
    123c:	21 f4       	brne	.+8      	; 0x1246 <__divsf3+0x16>
    123e:	5f 3f       	cpi	r21, 0xFF	; 255
    1240:	19 f0       	breq	.+6      	; 0x1248 <__divsf3+0x18>
    1242:	f0 c0       	rjmp	.+480    	; 0x1424 <__fp_inf>
    1244:	51 11       	cpse	r21, r1
    1246:	39 c1       	rjmp	.+626    	; 0x14ba <__fp_szero>
    1248:	f3 c0       	rjmp	.+486    	; 0x1430 <__fp_nan>

0000124a <__divsf3x>:
    124a:	14 d1       	rcall	.+552    	; 0x1474 <__fp_split3>
    124c:	98 f3       	brcs	.-26     	; 0x1234 <__divsf3+0x4>

0000124e <__divsf3_pse>:
    124e:	99 23       	and	r25, r25
    1250:	c9 f3       	breq	.-14     	; 0x1244 <__divsf3+0x14>
    1252:	55 23       	and	r21, r21
    1254:	b1 f3       	breq	.-20     	; 0x1242 <__divsf3+0x12>
    1256:	95 1b       	sub	r25, r21
    1258:	55 0b       	sbc	r21, r21
    125a:	bb 27       	eor	r27, r27
    125c:	aa 27       	eor	r26, r26
    125e:	62 17       	cp	r22, r18
    1260:	73 07       	cpc	r23, r19
    1262:	84 07       	cpc	r24, r20
    1264:	38 f0       	brcs	.+14     	; 0x1274 <__divsf3_pse+0x26>
    1266:	9f 5f       	subi	r25, 0xFF	; 255
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	22 0f       	add	r18, r18
    126c:	33 1f       	adc	r19, r19
    126e:	44 1f       	adc	r20, r20
    1270:	aa 1f       	adc	r26, r26
    1272:	a9 f3       	breq	.-22     	; 0x125e <__divsf3_pse+0x10>
    1274:	33 d0       	rcall	.+102    	; 0x12dc <__divsf3_pse+0x8e>
    1276:	0e 2e       	mov	r0, r30
    1278:	3a f0       	brmi	.+14     	; 0x1288 <__divsf3_pse+0x3a>
    127a:	e0 e8       	ldi	r30, 0x80	; 128
    127c:	30 d0       	rcall	.+96     	; 0x12de <__divsf3_pse+0x90>
    127e:	91 50       	subi	r25, 0x01	; 1
    1280:	50 40       	sbci	r21, 0x00	; 0
    1282:	e6 95       	lsr	r30
    1284:	00 1c       	adc	r0, r0
    1286:	ca f7       	brpl	.-14     	; 0x127a <__divsf3_pse+0x2c>
    1288:	29 d0       	rcall	.+82     	; 0x12dc <__divsf3_pse+0x8e>
    128a:	fe 2f       	mov	r31, r30
    128c:	27 d0       	rcall	.+78     	; 0x12dc <__divsf3_pse+0x8e>
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	bb 1f       	adc	r27, r27
    1296:	26 17       	cp	r18, r22
    1298:	37 07       	cpc	r19, r23
    129a:	48 07       	cpc	r20, r24
    129c:	ab 07       	cpc	r26, r27
    129e:	b0 e8       	ldi	r27, 0x80	; 128
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <__divsf3_pse+0x56>
    12a2:	bb 0b       	sbc	r27, r27
    12a4:	80 2d       	mov	r24, r0
    12a6:	bf 01       	movw	r22, r30
    12a8:	ff 27       	eor	r31, r31
    12aa:	93 58       	subi	r25, 0x83	; 131
    12ac:	5f 4f       	sbci	r21, 0xFF	; 255
    12ae:	2a f0       	brmi	.+10     	; 0x12ba <__divsf3_pse+0x6c>
    12b0:	9e 3f       	cpi	r25, 0xFE	; 254
    12b2:	51 05       	cpc	r21, r1
    12b4:	68 f0       	brcs	.+26     	; 0x12d0 <__divsf3_pse+0x82>
    12b6:	b6 c0       	rjmp	.+364    	; 0x1424 <__fp_inf>
    12b8:	00 c1       	rjmp	.+512    	; 0x14ba <__fp_szero>
    12ba:	5f 3f       	cpi	r21, 0xFF	; 255
    12bc:	ec f3       	brlt	.-6      	; 0x12b8 <__divsf3_pse+0x6a>
    12be:	98 3e       	cpi	r25, 0xE8	; 232
    12c0:	dc f3       	brlt	.-10     	; 0x12b8 <__divsf3_pse+0x6a>
    12c2:	86 95       	lsr	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	f7 95       	ror	r31
    12cc:	9f 5f       	subi	r25, 0xFF	; 255
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__divsf3_pse+0x74>
    12d0:	88 0f       	add	r24, r24
    12d2:	91 1d       	adc	r25, r1
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	97 f9       	bld	r25, 7
    12da:	08 95       	ret
    12dc:	e1 e0       	ldi	r30, 0x01	; 1
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	bb 1f       	adc	r27, r27
    12e6:	62 17       	cp	r22, r18
    12e8:	73 07       	cpc	r23, r19
    12ea:	84 07       	cpc	r24, r20
    12ec:	ba 07       	cpc	r27, r26
    12ee:	20 f0       	brcs	.+8      	; 0x12f8 <__divsf3_pse+0xaa>
    12f0:	62 1b       	sub	r22, r18
    12f2:	73 0b       	sbc	r23, r19
    12f4:	84 0b       	sbc	r24, r20
    12f6:	ba 0b       	sbc	r27, r26
    12f8:	ee 1f       	adc	r30, r30
    12fa:	88 f7       	brcc	.-30     	; 0x12de <__divsf3_pse+0x90>
    12fc:	e0 95       	com	r30
    12fe:	08 95       	ret

00001300 <__fixsfsi>:
    1300:	04 d0       	rcall	.+8      	; 0x130a <__fixunssfsi>
    1302:	68 94       	set
    1304:	b1 11       	cpse	r27, r1
    1306:	d9 c0       	rjmp	.+434    	; 0x14ba <__fp_szero>
    1308:	08 95       	ret

0000130a <__fixunssfsi>:
    130a:	bc d0       	rcall	.+376    	; 0x1484 <__fp_splitA>
    130c:	88 f0       	brcs	.+34     	; 0x1330 <__fixunssfsi+0x26>
    130e:	9f 57       	subi	r25, 0x7F	; 127
    1310:	90 f0       	brcs	.+36     	; 0x1336 <__fixunssfsi+0x2c>
    1312:	b9 2f       	mov	r27, r25
    1314:	99 27       	eor	r25, r25
    1316:	b7 51       	subi	r27, 0x17	; 23
    1318:	a0 f0       	brcs	.+40     	; 0x1342 <__fixunssfsi+0x38>
    131a:	d1 f0       	breq	.+52     	; 0x1350 <__fixunssfsi+0x46>
    131c:	66 0f       	add	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	1a f0       	brmi	.+6      	; 0x132c <__fixunssfsi+0x22>
    1326:	ba 95       	dec	r27
    1328:	c9 f7       	brne	.-14     	; 0x131c <__fixunssfsi+0x12>
    132a:	12 c0       	rjmp	.+36     	; 0x1350 <__fixunssfsi+0x46>
    132c:	b1 30       	cpi	r27, 0x01	; 1
    132e:	81 f0       	breq	.+32     	; 0x1350 <__fixunssfsi+0x46>
    1330:	c3 d0       	rcall	.+390    	; 0x14b8 <__fp_zero>
    1332:	b1 e0       	ldi	r27, 0x01	; 1
    1334:	08 95       	ret
    1336:	c0 c0       	rjmp	.+384    	; 0x14b8 <__fp_zero>
    1338:	67 2f       	mov	r22, r23
    133a:	78 2f       	mov	r23, r24
    133c:	88 27       	eor	r24, r24
    133e:	b8 5f       	subi	r27, 0xF8	; 248
    1340:	39 f0       	breq	.+14     	; 0x1350 <__fixunssfsi+0x46>
    1342:	b9 3f       	cpi	r27, 0xF9	; 249
    1344:	cc f3       	brlt	.-14     	; 0x1338 <__fixunssfsi+0x2e>
    1346:	86 95       	lsr	r24
    1348:	77 95       	ror	r23
    134a:	67 95       	ror	r22
    134c:	b3 95       	inc	r27
    134e:	d9 f7       	brne	.-10     	; 0x1346 <__fixunssfsi+0x3c>
    1350:	3e f4       	brtc	.+14     	; 0x1360 <__fixunssfsi+0x56>
    1352:	90 95       	com	r25
    1354:	80 95       	com	r24
    1356:	70 95       	com	r23
    1358:	61 95       	neg	r22
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	08 95       	ret

00001362 <__floatunsisf>:
    1362:	e8 94       	clt
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <__floatsisf+0x12>

00001366 <__floatsisf>:
    1366:	97 fb       	bst	r25, 7
    1368:	3e f4       	brtc	.+14     	; 0x1378 <__floatsisf+0x12>
    136a:	90 95       	com	r25
    136c:	80 95       	com	r24
    136e:	70 95       	com	r23
    1370:	61 95       	neg	r22
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	99 23       	and	r25, r25
    137a:	a9 f0       	breq	.+42     	; 0x13a6 <__floatsisf+0x40>
    137c:	f9 2f       	mov	r31, r25
    137e:	96 e9       	ldi	r25, 0x96	; 150
    1380:	bb 27       	eor	r27, r27
    1382:	93 95       	inc	r25
    1384:	f6 95       	lsr	r31
    1386:	87 95       	ror	r24
    1388:	77 95       	ror	r23
    138a:	67 95       	ror	r22
    138c:	b7 95       	ror	r27
    138e:	f1 11       	cpse	r31, r1
    1390:	f8 cf       	rjmp	.-16     	; 0x1382 <__floatsisf+0x1c>
    1392:	fa f4       	brpl	.+62     	; 0x13d2 <__floatsisf+0x6c>
    1394:	bb 0f       	add	r27, r27
    1396:	11 f4       	brne	.+4      	; 0x139c <__floatsisf+0x36>
    1398:	60 ff       	sbrs	r22, 0
    139a:	1b c0       	rjmp	.+54     	; 0x13d2 <__floatsisf+0x6c>
    139c:	6f 5f       	subi	r22, 0xFF	; 255
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	8f 4f       	sbci	r24, 0xFF	; 255
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	16 c0       	rjmp	.+44     	; 0x13d2 <__floatsisf+0x6c>
    13a6:	88 23       	and	r24, r24
    13a8:	11 f0       	breq	.+4      	; 0x13ae <__floatsisf+0x48>
    13aa:	96 e9       	ldi	r25, 0x96	; 150
    13ac:	11 c0       	rjmp	.+34     	; 0x13d0 <__floatsisf+0x6a>
    13ae:	77 23       	and	r23, r23
    13b0:	21 f0       	breq	.+8      	; 0x13ba <__floatsisf+0x54>
    13b2:	9e e8       	ldi	r25, 0x8E	; 142
    13b4:	87 2f       	mov	r24, r23
    13b6:	76 2f       	mov	r23, r22
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <__floatsisf+0x5e>
    13ba:	66 23       	and	r22, r22
    13bc:	71 f0       	breq	.+28     	; 0x13da <__floatsisf+0x74>
    13be:	96 e8       	ldi	r25, 0x86	; 134
    13c0:	86 2f       	mov	r24, r22
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	2a f0       	brmi	.+10     	; 0x13d2 <__floatsisf+0x6c>
    13c8:	9a 95       	dec	r25
    13ca:	66 0f       	add	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	88 1f       	adc	r24, r24
    13d0:	da f7       	brpl	.-10     	; 0x13c8 <__floatsisf+0x62>
    13d2:	88 0f       	add	r24, r24
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	97 f9       	bld	r25, 7
    13da:	08 95       	ret

000013dc <__fp_cmp>:
    13dc:	99 0f       	add	r25, r25
    13de:	00 08       	sbc	r0, r0
    13e0:	55 0f       	add	r21, r21
    13e2:	aa 0b       	sbc	r26, r26
    13e4:	e0 e8       	ldi	r30, 0x80	; 128
    13e6:	fe ef       	ldi	r31, 0xFE	; 254
    13e8:	16 16       	cp	r1, r22
    13ea:	17 06       	cpc	r1, r23
    13ec:	e8 07       	cpc	r30, r24
    13ee:	f9 07       	cpc	r31, r25
    13f0:	c0 f0       	brcs	.+48     	; 0x1422 <__fp_cmp+0x46>
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	e4 07       	cpc	r30, r20
    13f8:	f5 07       	cpc	r31, r21
    13fa:	98 f0       	brcs	.+38     	; 0x1422 <__fp_cmp+0x46>
    13fc:	62 1b       	sub	r22, r18
    13fe:	73 0b       	sbc	r23, r19
    1400:	84 0b       	sbc	r24, r20
    1402:	95 0b       	sbc	r25, r21
    1404:	39 f4       	brne	.+14     	; 0x1414 <__fp_cmp+0x38>
    1406:	0a 26       	eor	r0, r26
    1408:	61 f0       	breq	.+24     	; 0x1422 <__fp_cmp+0x46>
    140a:	23 2b       	or	r18, r19
    140c:	24 2b       	or	r18, r20
    140e:	25 2b       	or	r18, r21
    1410:	21 f4       	brne	.+8      	; 0x141a <__fp_cmp+0x3e>
    1412:	08 95       	ret
    1414:	0a 26       	eor	r0, r26
    1416:	09 f4       	brne	.+2      	; 0x141a <__fp_cmp+0x3e>
    1418:	a1 40       	sbci	r26, 0x01	; 1
    141a:	a6 95       	lsr	r26
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	81 1d       	adc	r24, r1
    1420:	81 1d       	adc	r24, r1
    1422:	08 95       	ret

00001424 <__fp_inf>:
    1424:	97 f9       	bld	r25, 7
    1426:	9f 67       	ori	r25, 0x7F	; 127
    1428:	80 e8       	ldi	r24, 0x80	; 128
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	08 95       	ret

00001430 <__fp_nan>:
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	80 ec       	ldi	r24, 0xC0	; 192
    1434:	08 95       	ret

00001436 <__fp_pscA>:
    1436:	00 24       	eor	r0, r0
    1438:	0a 94       	dec	r0
    143a:	16 16       	cp	r1, r22
    143c:	17 06       	cpc	r1, r23
    143e:	18 06       	cpc	r1, r24
    1440:	09 06       	cpc	r0, r25
    1442:	08 95       	ret

00001444 <__fp_pscB>:
    1444:	00 24       	eor	r0, r0
    1446:	0a 94       	dec	r0
    1448:	12 16       	cp	r1, r18
    144a:	13 06       	cpc	r1, r19
    144c:	14 06       	cpc	r1, r20
    144e:	05 06       	cpc	r0, r21
    1450:	08 95       	ret

00001452 <__fp_round>:
    1452:	09 2e       	mov	r0, r25
    1454:	03 94       	inc	r0
    1456:	00 0c       	add	r0, r0
    1458:	11 f4       	brne	.+4      	; 0x145e <__fp_round+0xc>
    145a:	88 23       	and	r24, r24
    145c:	52 f0       	brmi	.+20     	; 0x1472 <__fp_round+0x20>
    145e:	bb 0f       	add	r27, r27
    1460:	40 f4       	brcc	.+16     	; 0x1472 <__fp_round+0x20>
    1462:	bf 2b       	or	r27, r31
    1464:	11 f4       	brne	.+4      	; 0x146a <__fp_round+0x18>
    1466:	60 ff       	sbrs	r22, 0
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__fp_round+0x20>
    146a:	6f 5f       	subi	r22, 0xFF	; 255
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	8f 4f       	sbci	r24, 0xFF	; 255
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	08 95       	ret

00001474 <__fp_split3>:
    1474:	57 fd       	sbrc	r21, 7
    1476:	90 58       	subi	r25, 0x80	; 128
    1478:	44 0f       	add	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	59 f0       	breq	.+22     	; 0x1494 <__fp_splitA+0x10>
    147e:	5f 3f       	cpi	r21, 0xFF	; 255
    1480:	71 f0       	breq	.+28     	; 0x149e <__fp_splitA+0x1a>
    1482:	47 95       	ror	r20

00001484 <__fp_splitA>:
    1484:	88 0f       	add	r24, r24
    1486:	97 fb       	bst	r25, 7
    1488:	99 1f       	adc	r25, r25
    148a:	61 f0       	breq	.+24     	; 0x14a4 <__fp_splitA+0x20>
    148c:	9f 3f       	cpi	r25, 0xFF	; 255
    148e:	79 f0       	breq	.+30     	; 0x14ae <__fp_splitA+0x2a>
    1490:	87 95       	ror	r24
    1492:	08 95       	ret
    1494:	12 16       	cp	r1, r18
    1496:	13 06       	cpc	r1, r19
    1498:	14 06       	cpc	r1, r20
    149a:	55 1f       	adc	r21, r21
    149c:	f2 cf       	rjmp	.-28     	; 0x1482 <__fp_split3+0xe>
    149e:	46 95       	lsr	r20
    14a0:	f1 df       	rcall	.-30     	; 0x1484 <__fp_splitA>
    14a2:	08 c0       	rjmp	.+16     	; 0x14b4 <__fp_splitA+0x30>
    14a4:	16 16       	cp	r1, r22
    14a6:	17 06       	cpc	r1, r23
    14a8:	18 06       	cpc	r1, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	f1 cf       	rjmp	.-30     	; 0x1490 <__fp_splitA+0xc>
    14ae:	86 95       	lsr	r24
    14b0:	71 05       	cpc	r23, r1
    14b2:	61 05       	cpc	r22, r1
    14b4:	08 94       	sec
    14b6:	08 95       	ret

000014b8 <__fp_zero>:
    14b8:	e8 94       	clt

000014ba <__fp_szero>:
    14ba:	bb 27       	eor	r27, r27
    14bc:	66 27       	eor	r22, r22
    14be:	77 27       	eor	r23, r23
    14c0:	cb 01       	movw	r24, r22
    14c2:	97 f9       	bld	r25, 7
    14c4:	08 95       	ret

000014c6 <__gesf2>:
    14c6:	8a df       	rcall	.-236    	; 0x13dc <__fp_cmp>
    14c8:	08 f4       	brcc	.+2      	; 0x14cc <__gesf2+0x6>
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	08 95       	ret

000014ce <__mulsf3>:
    14ce:	0b d0       	rcall	.+22     	; 0x14e6 <__mulsf3x>
    14d0:	c0 cf       	rjmp	.-128    	; 0x1452 <__fp_round>
    14d2:	b1 df       	rcall	.-158    	; 0x1436 <__fp_pscA>
    14d4:	28 f0       	brcs	.+10     	; 0x14e0 <__mulsf3+0x12>
    14d6:	b6 df       	rcall	.-148    	; 0x1444 <__fp_pscB>
    14d8:	18 f0       	brcs	.+6      	; 0x14e0 <__mulsf3+0x12>
    14da:	95 23       	and	r25, r21
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <__mulsf3+0x12>
    14de:	a2 cf       	rjmp	.-188    	; 0x1424 <__fp_inf>
    14e0:	a7 cf       	rjmp	.-178    	; 0x1430 <__fp_nan>
    14e2:	11 24       	eor	r1, r1
    14e4:	ea cf       	rjmp	.-44     	; 0x14ba <__fp_szero>

000014e6 <__mulsf3x>:
    14e6:	c6 df       	rcall	.-116    	; 0x1474 <__fp_split3>
    14e8:	a0 f3       	brcs	.-24     	; 0x14d2 <__mulsf3+0x4>

000014ea <__mulsf3_pse>:
    14ea:	95 9f       	mul	r25, r21
    14ec:	d1 f3       	breq	.-12     	; 0x14e2 <__mulsf3+0x14>
    14ee:	95 0f       	add	r25, r21
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	55 1f       	adc	r21, r21
    14f4:	62 9f       	mul	r22, r18
    14f6:	f0 01       	movw	r30, r0
    14f8:	72 9f       	mul	r23, r18
    14fa:	bb 27       	eor	r27, r27
    14fc:	f0 0d       	add	r31, r0
    14fe:	b1 1d       	adc	r27, r1
    1500:	63 9f       	mul	r22, r19
    1502:	aa 27       	eor	r26, r26
    1504:	f0 0d       	add	r31, r0
    1506:	b1 1d       	adc	r27, r1
    1508:	aa 1f       	adc	r26, r26
    150a:	64 9f       	mul	r22, r20
    150c:	66 27       	eor	r22, r22
    150e:	b0 0d       	add	r27, r0
    1510:	a1 1d       	adc	r26, r1
    1512:	66 1f       	adc	r22, r22
    1514:	82 9f       	mul	r24, r18
    1516:	22 27       	eor	r18, r18
    1518:	b0 0d       	add	r27, r0
    151a:	a1 1d       	adc	r26, r1
    151c:	62 1f       	adc	r22, r18
    151e:	73 9f       	mul	r23, r19
    1520:	b0 0d       	add	r27, r0
    1522:	a1 1d       	adc	r26, r1
    1524:	62 1f       	adc	r22, r18
    1526:	83 9f       	mul	r24, r19
    1528:	a0 0d       	add	r26, r0
    152a:	61 1d       	adc	r22, r1
    152c:	22 1f       	adc	r18, r18
    152e:	74 9f       	mul	r23, r20
    1530:	33 27       	eor	r19, r19
    1532:	a0 0d       	add	r26, r0
    1534:	61 1d       	adc	r22, r1
    1536:	23 1f       	adc	r18, r19
    1538:	84 9f       	mul	r24, r20
    153a:	60 0d       	add	r22, r0
    153c:	21 1d       	adc	r18, r1
    153e:	82 2f       	mov	r24, r18
    1540:	76 2f       	mov	r23, r22
    1542:	6a 2f       	mov	r22, r26
    1544:	11 24       	eor	r1, r1
    1546:	9f 57       	subi	r25, 0x7F	; 127
    1548:	50 40       	sbci	r21, 0x00	; 0
    154a:	8a f0       	brmi	.+34     	; 0x156e <__mulsf3_pse+0x84>
    154c:	e1 f0       	breq	.+56     	; 0x1586 <__mulsf3_pse+0x9c>
    154e:	88 23       	and	r24, r24
    1550:	4a f0       	brmi	.+18     	; 0x1564 <__mulsf3_pse+0x7a>
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	bb 1f       	adc	r27, r27
    1558:	66 1f       	adc	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	91 50       	subi	r25, 0x01	; 1
    1560:	50 40       	sbci	r21, 0x00	; 0
    1562:	a9 f7       	brne	.-22     	; 0x154e <__mulsf3_pse+0x64>
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	51 05       	cpc	r21, r1
    1568:	70 f0       	brcs	.+28     	; 0x1586 <__mulsf3_pse+0x9c>
    156a:	5c cf       	rjmp	.-328    	; 0x1424 <__fp_inf>
    156c:	a6 cf       	rjmp	.-180    	; 0x14ba <__fp_szero>
    156e:	5f 3f       	cpi	r21, 0xFF	; 255
    1570:	ec f3       	brlt	.-6      	; 0x156c <__mulsf3_pse+0x82>
    1572:	98 3e       	cpi	r25, 0xE8	; 232
    1574:	dc f3       	brlt	.-10     	; 0x156c <__mulsf3_pse+0x82>
    1576:	86 95       	lsr	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	b7 95       	ror	r27
    157e:	f7 95       	ror	r31
    1580:	e7 95       	ror	r30
    1582:	9f 5f       	subi	r25, 0xFF	; 255
    1584:	c1 f7       	brne	.-16     	; 0x1576 <__mulsf3_pse+0x8c>
    1586:	fe 2b       	or	r31, r30
    1588:	88 0f       	add	r24, r24
    158a:	91 1d       	adc	r25, r1
    158c:	96 95       	lsr	r25
    158e:	87 95       	ror	r24
    1590:	97 f9       	bld	r25, 7
    1592:	08 95       	ret

00001594 <__divmodsi4>:
    1594:	05 2e       	mov	r0, r21
    1596:	97 fb       	bst	r25, 7
    1598:	1e f4       	brtc	.+6      	; 0x15a0 <__divmodsi4+0xc>
    159a:	00 94       	com	r0
    159c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__negsi2>
    15a0:	57 fd       	sbrc	r21, 7
    15a2:	07 d0       	rcall	.+14     	; 0x15b2 <__divmodsi4_neg2>
    15a4:	0e 94 0d 0b 	call	0x161a	; 0x161a <__udivmodsi4>
    15a8:	07 fc       	sbrc	r0, 7
    15aa:	03 d0       	rcall	.+6      	; 0x15b2 <__divmodsi4_neg2>
    15ac:	4e f4       	brtc	.+18     	; 0x15c0 <__divmodsi4_exit>
    15ae:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__negsi2>

000015b2 <__divmodsi4_neg2>:
    15b2:	50 95       	com	r21
    15b4:	40 95       	com	r20
    15b6:	30 95       	com	r19
    15b8:	21 95       	neg	r18
    15ba:	3f 4f       	sbci	r19, 0xFF	; 255
    15bc:	4f 4f       	sbci	r20, 0xFF	; 255
    15be:	5f 4f       	sbci	r21, 0xFF	; 255

000015c0 <__divmodsi4_exit>:
    15c0:	08 95       	ret

000015c2 <__negsi2>:
    15c2:	90 95       	com	r25
    15c4:	80 95       	com	r24
    15c6:	70 95       	com	r23
    15c8:	61 95       	neg	r22
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	8f 4f       	sbci	r24, 0xFF	; 255
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	08 95       	ret

000015d2 <__tablejump2__>:
    15d2:	ee 0f       	add	r30, r30
    15d4:	ff 1f       	adc	r31, r31

000015d6 <__tablejump__>:
    15d6:	05 90       	lpm	r0, Z+
    15d8:	f4 91       	lpm	r31, Z
    15da:	e0 2d       	mov	r30, r0
    15dc:	09 94       	ijmp

000015de <__adddi3_s8>:
    15de:	00 24       	eor	r0, r0
    15e0:	a7 fd       	sbrc	r26, 7
    15e2:	00 94       	com	r0
    15e4:	2a 0f       	add	r18, r26
    15e6:	30 1d       	adc	r19, r0
    15e8:	40 1d       	adc	r20, r0
    15ea:	50 1d       	adc	r21, r0
    15ec:	60 1d       	adc	r22, r0
    15ee:	70 1d       	adc	r23, r0
    15f0:	80 1d       	adc	r24, r0
    15f2:	90 1d       	adc	r25, r0
    15f4:	08 95       	ret

000015f6 <__subdi3>:
    15f6:	2a 19       	sub	r18, r10
    15f8:	3b 09       	sbc	r19, r11
    15fa:	4c 09       	sbc	r20, r12
    15fc:	5d 09       	sbc	r21, r13
    15fe:	6e 09       	sbc	r22, r14
    1600:	7f 09       	sbc	r23, r15
    1602:	80 0b       	sbc	r24, r16
    1604:	91 0b       	sbc	r25, r17
    1606:	08 95       	ret

00001608 <__cmpdi2>:
    1608:	2a 15       	cp	r18, r10
    160a:	3b 05       	cpc	r19, r11
    160c:	4c 05       	cpc	r20, r12
    160e:	5d 05       	cpc	r21, r13
    1610:	6e 05       	cpc	r22, r14
    1612:	7f 05       	cpc	r23, r15
    1614:	80 07       	cpc	r24, r16
    1616:	91 07       	cpc	r25, r17
    1618:	08 95       	ret

0000161a <__udivmodsi4>:
    161a:	a1 e2       	ldi	r26, 0x21	; 33
    161c:	1a 2e       	mov	r1, r26
    161e:	aa 1b       	sub	r26, r26
    1620:	bb 1b       	sub	r27, r27
    1622:	fd 01       	movw	r30, r26
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <__udivmodsi4_ep>

00001626 <__udivmodsi4_loop>:
    1626:	aa 1f       	adc	r26, r26
    1628:	bb 1f       	adc	r27, r27
    162a:	ee 1f       	adc	r30, r30
    162c:	ff 1f       	adc	r31, r31
    162e:	a2 17       	cp	r26, r18
    1630:	b3 07       	cpc	r27, r19
    1632:	e4 07       	cpc	r30, r20
    1634:	f5 07       	cpc	r31, r21
    1636:	20 f0       	brcs	.+8      	; 0x1640 <__udivmodsi4_ep>
    1638:	a2 1b       	sub	r26, r18
    163a:	b3 0b       	sbc	r27, r19
    163c:	e4 0b       	sbc	r30, r20
    163e:	f5 0b       	sbc	r31, r21

00001640 <__udivmodsi4_ep>:
    1640:	66 1f       	adc	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	1a 94       	dec	r1
    164a:	69 f7       	brne	.-38     	; 0x1626 <__udivmodsi4_loop>
    164c:	60 95       	com	r22
    164e:	70 95       	com	r23
    1650:	80 95       	com	r24
    1652:	90 95       	com	r25
    1654:	9b 01       	movw	r18, r22
    1656:	ac 01       	movw	r20, r24
    1658:	bd 01       	movw	r22, r26
    165a:	cf 01       	movw	r24, r30
    165c:	08 95       	ret

0000165e <dtostrf>:
    165e:	ef 92       	push	r14
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	e8 01       	movw	r28, r16
    166a:	47 ff       	sbrs	r20, 7
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <dtostrf+0x14>
    166e:	34 e1       	ldi	r19, 0x14	; 20
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <dtostrf+0x16>
    1672:	34 e0       	ldi	r19, 0x04	; 4
    1674:	e4 2f       	mov	r30, r20
    1676:	ff 27       	eor	r31, r31
    1678:	e7 fd       	sbrc	r30, 7
    167a:	f0 95       	com	r31
    167c:	f7 ff       	sbrs	r31, 7
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <dtostrf+0x28>
    1680:	f1 95       	neg	r31
    1682:	e1 95       	neg	r30
    1684:	f1 09       	sbc	r31, r1
    1686:	e3 2e       	mov	r14, r19
    1688:	02 2f       	mov	r16, r18
    168a:	2e 2f       	mov	r18, r30
    168c:	ae 01       	movw	r20, r28
    168e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <dtoa_prf>
    1692:	ce 01       	movw	r24, r28
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ef 90       	pop	r14
    169e:	08 95       	ret

000016a0 <atof>:
    16a0:	66 27       	eor	r22, r22
    16a2:	77 27       	eor	r23, r23
    16a4:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <strtod>

000016a8 <dtoa_prf>:
    16a8:	6f 92       	push	r6
    16aa:	7f 92       	push	r7
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	29 97       	sbiw	r28, 0x09	; 9
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	6a 01       	movw	r12, r20
    16d4:	b2 2e       	mov	r11, r18
    16d6:	10 2f       	mov	r17, r16
    16d8:	0c 33       	cpi	r16, 0x3C	; 60
    16da:	20 f4       	brcc	.+8      	; 0x16e4 <dtoa_prf+0x3c>
    16dc:	ff 24       	eor	r15, r15
    16de:	f3 94       	inc	r15
    16e0:	f0 0e       	add	r15, r16
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <dtoa_prf+0x40>
    16e4:	4c e3       	ldi	r20, 0x3C	; 60
    16e6:	f4 2e       	mov	r15, r20
    16e8:	0f 2d       	mov	r16, r15
    16ea:	27 e0       	ldi	r18, 0x07	; 7
    16ec:	ae 01       	movw	r20, r28
    16ee:	4f 5f       	subi	r20, 0xFF	; 255
    16f0:	5f 4f       	sbci	r21, 0xFF	; 255
    16f2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__ftoa_engine>
    16f6:	79 81       	ldd	r23, Y+1	; 0x01
    16f8:	27 2f       	mov	r18, r23
    16fa:	29 70       	andi	r18, 0x09	; 9
    16fc:	21 30       	cpi	r18, 0x01	; 1
    16fe:	31 f0       	breq	.+12     	; 0x170c <dtoa_prf+0x64>
    1700:	e1 fc       	sbrc	r14, 1
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <dtoa_prf+0x68>
    1704:	e0 fc       	sbrc	r14, 0
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <dtoa_prf+0x6c>
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <dtoa_prf+0x6e>
    170c:	6d e2       	ldi	r22, 0x2D	; 45
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <dtoa_prf+0x6e>
    1710:	6b e2       	ldi	r22, 0x2B	; 43
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <dtoa_prf+0x6e>
    1714:	60 e2       	ldi	r22, 0x20	; 32
    1716:	ae 2d       	mov	r26, r14
    1718:	a0 71       	andi	r26, 0x10	; 16
    171a:	73 ff       	sbrs	r23, 3
    171c:	36 c0       	rjmp	.+108    	; 0x178a <dtoa_prf+0xe2>
    171e:	66 23       	and	r22, r22
    1720:	11 f0       	breq	.+4      	; 0x1726 <dtoa_prf+0x7e>
    1722:	84 e0       	ldi	r24, 0x04	; 4
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <dtoa_prf+0x80>
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	8b 15       	cp	r24, r11
    172a:	10 f4       	brcc	.+4      	; 0x1730 <dtoa_prf+0x88>
    172c:	b8 1a       	sub	r11, r24
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <dtoa_prf+0x8a>
    1730:	b1 2c       	mov	r11, r1
    1732:	a1 11       	cpse	r26, r1
    1734:	0b c0       	rjmp	.+22     	; 0x174c <dtoa_prf+0xa4>
    1736:	f6 01       	movw	r30, r12
    1738:	8b 2d       	mov	r24, r11
    173a:	90 e2       	ldi	r25, 0x20	; 32
    173c:	88 23       	and	r24, r24
    173e:	19 f0       	breq	.+6      	; 0x1746 <dtoa_prf+0x9e>
    1740:	91 93       	st	Z+, r25
    1742:	81 50       	subi	r24, 0x01	; 1
    1744:	fb cf       	rjmp	.-10     	; 0x173c <dtoa_prf+0x94>
    1746:	cb 0c       	add	r12, r11
    1748:	d1 1c       	adc	r13, r1
    174a:	b1 2c       	mov	r11, r1
    174c:	66 23       	and	r22, r22
    174e:	31 f0       	breq	.+12     	; 0x175c <dtoa_prf+0xb4>
    1750:	f6 01       	movw	r30, r12
    1752:	60 83       	st	Z, r22
    1754:	96 01       	movw	r18, r12
    1756:	2f 5f       	subi	r18, 0xFF	; 255
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	69 01       	movw	r12, r18
    175c:	c6 01       	movw	r24, r12
    175e:	03 96       	adiw	r24, 0x03	; 3
    1760:	e2 fe       	sbrs	r14, 2
    1762:	05 c0       	rjmp	.+10     	; 0x176e <dtoa_prf+0xc6>
    1764:	2e e4       	ldi	r18, 0x4E	; 78
    1766:	f6 01       	movw	r30, r12
    1768:	20 83       	st	Z, r18
    176a:	31 e4       	ldi	r19, 0x41	; 65
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <dtoa_prf+0xce>
    176e:	2e e6       	ldi	r18, 0x6E	; 110
    1770:	f6 01       	movw	r30, r12
    1772:	20 83       	st	Z, r18
    1774:	31 e6       	ldi	r19, 0x61	; 97
    1776:	31 83       	std	Z+1, r19	; 0x01
    1778:	22 83       	std	Z+2, r18	; 0x02
    177a:	fc 01       	movw	r30, r24
    177c:	2b 2d       	mov	r18, r11
    177e:	30 e2       	ldi	r19, 0x20	; 32
    1780:	22 23       	and	r18, r18
    1782:	f1 f1       	breq	.+124    	; 0x1800 <dtoa_prf+0x158>
    1784:	31 93       	st	Z+, r19
    1786:	21 50       	subi	r18, 0x01	; 1
    1788:	fb cf       	rjmp	.-10     	; 0x1780 <dtoa_prf+0xd8>
    178a:	72 ff       	sbrs	r23, 2
    178c:	40 c0       	rjmp	.+128    	; 0x180e <dtoa_prf+0x166>
    178e:	66 23       	and	r22, r22
    1790:	11 f0       	breq	.+4      	; 0x1796 <dtoa_prf+0xee>
    1792:	84 e0       	ldi	r24, 0x04	; 4
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <dtoa_prf+0xf0>
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	8b 15       	cp	r24, r11
    179a:	10 f4       	brcc	.+4      	; 0x17a0 <dtoa_prf+0xf8>
    179c:	b8 1a       	sub	r11, r24
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <dtoa_prf+0xfa>
    17a0:	b1 2c       	mov	r11, r1
    17a2:	a1 11       	cpse	r26, r1
    17a4:	0b c0       	rjmp	.+22     	; 0x17bc <dtoa_prf+0x114>
    17a6:	f6 01       	movw	r30, r12
    17a8:	8b 2d       	mov	r24, r11
    17aa:	90 e2       	ldi	r25, 0x20	; 32
    17ac:	88 23       	and	r24, r24
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <dtoa_prf+0x10e>
    17b0:	91 93       	st	Z+, r25
    17b2:	81 50       	subi	r24, 0x01	; 1
    17b4:	fb cf       	rjmp	.-10     	; 0x17ac <dtoa_prf+0x104>
    17b6:	cb 0c       	add	r12, r11
    17b8:	d1 1c       	adc	r13, r1
    17ba:	b1 2c       	mov	r11, r1
    17bc:	66 23       	and	r22, r22
    17be:	31 f0       	breq	.+12     	; 0x17cc <dtoa_prf+0x124>
    17c0:	f6 01       	movw	r30, r12
    17c2:	60 83       	st	Z, r22
    17c4:	96 01       	movw	r18, r12
    17c6:	2f 5f       	subi	r18, 0xFF	; 255
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	69 01       	movw	r12, r18
    17cc:	c6 01       	movw	r24, r12
    17ce:	03 96       	adiw	r24, 0x03	; 3
    17d0:	e2 fe       	sbrs	r14, 2
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <dtoa_prf+0x13a>
    17d4:	29 e4       	ldi	r18, 0x49	; 73
    17d6:	f6 01       	movw	r30, r12
    17d8:	20 83       	st	Z, r18
    17da:	2e e4       	ldi	r18, 0x4E	; 78
    17dc:	21 83       	std	Z+1, r18	; 0x01
    17de:	26 e4       	ldi	r18, 0x46	; 70
    17e0:	06 c0       	rjmp	.+12     	; 0x17ee <dtoa_prf+0x146>
    17e2:	29 e6       	ldi	r18, 0x69	; 105
    17e4:	f6 01       	movw	r30, r12
    17e6:	20 83       	st	Z, r18
    17e8:	2e e6       	ldi	r18, 0x6E	; 110
    17ea:	21 83       	std	Z+1, r18	; 0x01
    17ec:	26 e6       	ldi	r18, 0x66	; 102
    17ee:	22 83       	std	Z+2, r18	; 0x02
    17f0:	fc 01       	movw	r30, r24
    17f2:	2b 2d       	mov	r18, r11
    17f4:	30 e2       	ldi	r19, 0x20	; 32
    17f6:	22 23       	and	r18, r18
    17f8:	19 f0       	breq	.+6      	; 0x1800 <dtoa_prf+0x158>
    17fa:	31 93       	st	Z+, r19
    17fc:	21 50       	subi	r18, 0x01	; 1
    17fe:	fb cf       	rjmp	.-10     	; 0x17f6 <dtoa_prf+0x14e>
    1800:	fc 01       	movw	r30, r24
    1802:	eb 0d       	add	r30, r11
    1804:	f1 1d       	adc	r31, r1
    1806:	10 82       	st	Z, r1
    1808:	8e ef       	ldi	r24, 0xFE	; 254
    180a:	9f ef       	ldi	r25, 0xFF	; 255
    180c:	b7 c0       	rjmp	.+366    	; 0x197c <dtoa_prf+0x2d4>
    180e:	b1 e0       	ldi	r27, 0x01	; 1
    1810:	61 11       	cpse	r22, r1
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <dtoa_prf+0x16e>
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	4b 2f       	mov	r20, r27
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	18 16       	cp	r1, r24
    181c:	19 06       	cpc	r1, r25
    181e:	24 f4       	brge	.+8      	; 0x1828 <dtoa_prf+0x180>
    1820:	9c 01       	movw	r18, r24
    1822:	2f 5f       	subi	r18, 0xFF	; 255
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
    1826:	02 c0       	rjmp	.+4      	; 0x182c <dtoa_prf+0x184>
    1828:	21 e0       	ldi	r18, 0x01	; 1
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	24 0f       	add	r18, r20
    182e:	35 1f       	adc	r19, r21
    1830:	11 23       	and	r17, r17
    1832:	29 f0       	breq	.+10     	; 0x183e <dtoa_prf+0x196>
    1834:	41 2f       	mov	r20, r17
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	4f 5f       	subi	r20, 0xFF	; 255
    183a:	5f 4f       	sbci	r21, 0xFF	; 255
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <dtoa_prf+0x19a>
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	42 0f       	add	r20, r18
    1844:	53 1f       	adc	r21, r19
    1846:	2b 2d       	mov	r18, r11
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	42 17       	cp	r20, r18
    184c:	53 07       	cpc	r21, r19
    184e:	14 f4       	brge	.+4      	; 0x1854 <dtoa_prf+0x1ac>
    1850:	b4 1a       	sub	r11, r20
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <dtoa_prf+0x1ae>
    1854:	b1 2c       	mov	r11, r1
    1856:	2e 2d       	mov	r18, r14
    1858:	28 71       	andi	r18, 0x18	; 24
    185a:	59 f4       	brne	.+22     	; 0x1872 <dtoa_prf+0x1ca>
    185c:	f6 01       	movw	r30, r12
    185e:	2b 2d       	mov	r18, r11
    1860:	30 e2       	ldi	r19, 0x20	; 32
    1862:	22 23       	and	r18, r18
    1864:	19 f0       	breq	.+6      	; 0x186c <dtoa_prf+0x1c4>
    1866:	31 93       	st	Z+, r19
    1868:	21 50       	subi	r18, 0x01	; 1
    186a:	fb cf       	rjmp	.-10     	; 0x1862 <dtoa_prf+0x1ba>
    186c:	cb 0c       	add	r12, r11
    186e:	d1 1c       	adc	r13, r1
    1870:	b1 2c       	mov	r11, r1
    1872:	bb 23       	and	r27, r27
    1874:	31 f0       	breq	.+12     	; 0x1882 <dtoa_prf+0x1da>
    1876:	f6 01       	movw	r30, r12
    1878:	60 83       	st	Z, r22
    187a:	96 01       	movw	r18, r12
    187c:	2f 5f       	subi	r18, 0xFF	; 255
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	69 01       	movw	r12, r18
    1882:	a1 11       	cpse	r26, r1
    1884:	0b c0       	rjmp	.+22     	; 0x189c <dtoa_prf+0x1f4>
    1886:	f6 01       	movw	r30, r12
    1888:	2b 2d       	mov	r18, r11
    188a:	30 e3       	ldi	r19, 0x30	; 48
    188c:	22 23       	and	r18, r18
    188e:	19 f0       	breq	.+6      	; 0x1896 <dtoa_prf+0x1ee>
    1890:	31 93       	st	Z+, r19
    1892:	21 50       	subi	r18, 0x01	; 1
    1894:	fb cf       	rjmp	.-10     	; 0x188c <dtoa_prf+0x1e4>
    1896:	cb 0c       	add	r12, r11
    1898:	d1 1c       	adc	r13, r1
    189a:	b1 2c       	mov	r11, r1
    189c:	f8 0e       	add	r15, r24
    189e:	0a 81       	ldd	r16, Y+2	; 0x02
    18a0:	37 2f       	mov	r19, r23
    18a2:	30 71       	andi	r19, 0x10	; 16
    18a4:	a3 2e       	mov	r10, r19
    18a6:	74 ff       	sbrs	r23, 4
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <dtoa_prf+0x208>
    18aa:	01 33       	cpi	r16, 0x31	; 49
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <dtoa_prf+0x208>
    18ae:	fa 94       	dec	r15
    18b0:	1f 14       	cp	r1, r15
    18b2:	2c f4       	brge	.+10     	; 0x18be <dtoa_prf+0x216>
    18b4:	2f 2d       	mov	r18, r15
    18b6:	29 30       	cpi	r18, 0x09	; 9
    18b8:	18 f0       	brcs	.+6      	; 0x18c0 <dtoa_prf+0x218>
    18ba:	28 e0       	ldi	r18, 0x08	; 8
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <dtoa_prf+0x218>
    18be:	21 e0       	ldi	r18, 0x01	; 1
    18c0:	68 2f       	mov	r22, r24
    18c2:	39 2f       	mov	r19, r25
    18c4:	97 ff       	sbrs	r25, 7
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <dtoa_prf+0x224>
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	46 2f       	mov	r20, r22
    18ce:	53 2f       	mov	r21, r19
    18d0:	61 2c       	mov	r6, r1
    18d2:	71 2c       	mov	r7, r1
    18d4:	3e e2       	ldi	r19, 0x2E	; 46
    18d6:	93 2e       	mov	r9, r19
    18d8:	bc 01       	movw	r22, r24
    18da:	62 1b       	sub	r22, r18
    18dc:	71 09       	sbc	r23, r1
    18de:	9b 01       	movw	r18, r22
    18e0:	dc 01       	movw	r26, r24
    18e2:	a4 1b       	sub	r26, r20
    18e4:	b5 0b       	sbc	r27, r21
    18e6:	e1 e0       	ldi	r30, 0x01	; 1
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	ec 0f       	add	r30, r28
    18ec:	fd 1f       	adc	r31, r29
    18ee:	ae 0f       	add	r26, r30
    18f0:	bf 1f       	adc	r27, r31
    18f2:	e1 2e       	mov	r14, r17
    18f4:	f1 2c       	mov	r15, r1
    18f6:	f1 94       	neg	r15
    18f8:	e1 94       	neg	r14
    18fa:	f1 08       	sbc	r15, r1
    18fc:	4f 3f       	cpi	r20, 0xFF	; 255
    18fe:	ff ef       	ldi	r31, 0xFF	; 255
    1900:	5f 07       	cpc	r21, r31
    1902:	31 f4       	brne	.+12     	; 0x1910 <dtoa_prf+0x268>
    1904:	f6 01       	movw	r30, r12
    1906:	90 82       	st	Z, r9
    1908:	b6 01       	movw	r22, r12
    190a:	6f 5f       	subi	r22, 0xFF	; 255
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	6b 01       	movw	r12, r22
    1910:	84 17       	cp	r24, r20
    1912:	95 07       	cpc	r25, r21
    1914:	4c f0       	brlt	.+18     	; 0x1928 <dtoa_prf+0x280>
    1916:	24 17       	cp	r18, r20
    1918:	35 07       	cpc	r19, r21
    191a:	34 f4       	brge	.+12     	; 0x1928 <dtoa_prf+0x280>
    191c:	bd 01       	movw	r22, r26
    191e:	66 0d       	add	r22, r6
    1920:	77 1d       	adc	r23, r7
    1922:	fb 01       	movw	r30, r22
    1924:	11 81       	ldd	r17, Z+1	; 0x01
    1926:	01 c0       	rjmp	.+2      	; 0x192a <dtoa_prf+0x282>
    1928:	10 e3       	ldi	r17, 0x30	; 48
    192a:	41 50       	subi	r20, 0x01	; 1
    192c:	51 09       	sbc	r21, r1
    192e:	ff ef       	ldi	r31, 0xFF	; 255
    1930:	6f 1a       	sub	r6, r31
    1932:	7f 0a       	sbc	r7, r31
    1934:	b6 01       	movw	r22, r12
    1936:	6f 5f       	subi	r22, 0xFF	; 255
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	4e 15       	cp	r20, r14
    193c:	5f 05       	cpc	r21, r15
    193e:	24 f0       	brlt	.+8      	; 0x1948 <dtoa_prf+0x2a0>
    1940:	f6 01       	movw	r30, r12
    1942:	10 83       	st	Z, r17
    1944:	6b 01       	movw	r12, r22
    1946:	da cf       	rjmp	.-76     	; 0x18fc <dtoa_prf+0x254>
    1948:	48 17       	cp	r20, r24
    194a:	59 07       	cpc	r21, r25
    194c:	39 f4       	brne	.+14     	; 0x195c <dtoa_prf+0x2b4>
    194e:	06 33       	cpi	r16, 0x36	; 54
    1950:	20 f4       	brcc	.+8      	; 0x195a <dtoa_prf+0x2b2>
    1952:	05 33       	cpi	r16, 0x35	; 53
    1954:	19 f4       	brne	.+6      	; 0x195c <dtoa_prf+0x2b4>
    1956:	a1 10       	cpse	r10, r1
    1958:	01 c0       	rjmp	.+2      	; 0x195c <dtoa_prf+0x2b4>
    195a:	11 e3       	ldi	r17, 0x31	; 49
    195c:	f6 01       	movw	r30, r12
    195e:	10 83       	st	Z, r17
    1960:	fb 01       	movw	r30, r22
    1962:	8b 2d       	mov	r24, r11
    1964:	90 e2       	ldi	r25, 0x20	; 32
    1966:	88 23       	and	r24, r24
    1968:	19 f0       	breq	.+6      	; 0x1970 <dtoa_prf+0x2c8>
    196a:	91 93       	st	Z+, r25
    196c:	81 50       	subi	r24, 0x01	; 1
    196e:	fb cf       	rjmp	.-10     	; 0x1966 <dtoa_prf+0x2be>
    1970:	fb 01       	movw	r30, r22
    1972:	eb 0d       	add	r30, r11
    1974:	f1 1d       	adc	r31, r1
    1976:	10 82       	st	Z, r1
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	29 96       	adiw	r28, 0x09	; 9
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	bf 90       	pop	r11
    199a:	af 90       	pop	r10
    199c:	9f 90       	pop	r9
    199e:	7f 90       	pop	r7
    19a0:	6f 90       	pop	r6
    19a2:	08 95       	ret

000019a4 <strtod>:
    19a4:	a0 e0       	ldi	r26, 0x00	; 0
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 ed       	ldi	r30, 0xD8	; 216
    19aa:	fc e0       	ldi	r31, 0x0C	; 12
    19ac:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__prologue_saves__+0xc>
    19b0:	8b 01       	movw	r16, r22
    19b2:	61 15       	cp	r22, r1
    19b4:	71 05       	cpc	r23, r1
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <strtod+0x1c>
    19b8:	db 01       	movw	r26, r22
    19ba:	8c 93       	st	X, r24
    19bc:	11 96       	adiw	r26, 0x01	; 1
    19be:	9c 93       	st	X, r25
    19c0:	ec 01       	movw	r28, r24
    19c2:	5e 01       	movw	r10, r28
    19c4:	bf ef       	ldi	r27, 0xFF	; 255
    19c6:	ab 1a       	sub	r10, r27
    19c8:	bb 0a       	sbc	r11, r27
    19ca:	75 01       	movw	r14, r10
    19cc:	c8 80       	ld	r12, Y
    19ce:	8c 2d       	mov	r24, r12
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <isspace>
    19d6:	89 2b       	or	r24, r25
    19d8:	11 f0       	breq	.+4      	; 0x19de <strtod+0x3a>
    19da:	e5 01       	movw	r28, r10
    19dc:	f2 cf       	rjmp	.-28     	; 0x19c2 <strtod+0x1e>
    19de:	ed e2       	ldi	r30, 0x2D	; 45
    19e0:	ce 12       	cpse	r12, r30
    19e2:	08 c0       	rjmp	.+16     	; 0x19f4 <strtod+0x50>
    19e4:	7e 01       	movw	r14, r28
    19e6:	f2 e0       	ldi	r31, 0x02	; 2
    19e8:	ef 0e       	add	r14, r31
    19ea:	f1 1c       	adc	r15, r1
    19ec:	c9 80       	ldd	r12, Y+1	; 0x01
    19ee:	dd 24       	eor	r13, r13
    19f0:	d3 94       	inc	r13
    19f2:	09 c0       	rjmp	.+18     	; 0x1a06 <strtod+0x62>
    19f4:	2b e2       	ldi	r18, 0x2B	; 43
    19f6:	c2 12       	cpse	r12, r18
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <strtod+0x60>
    19fa:	7e 01       	movw	r14, r28
    19fc:	42 e0       	ldi	r20, 0x02	; 2
    19fe:	e4 0e       	add	r14, r20
    1a00:	f1 1c       	adc	r15, r1
    1a02:	c9 80       	ldd	r12, Y+1	; 0x01
    1a04:	d1 2c       	mov	r13, r1
    1a06:	e7 01       	movw	r28, r14
    1a08:	21 97       	sbiw	r28, 0x01	; 1
    1a0a:	43 e0       	ldi	r20, 0x03	; 3
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	60 e8       	ldi	r22, 0x80	; 128
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	ce 01       	movw	r24, r28
    1a14:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <strncasecmp_P>
    1a18:	89 2b       	or	r24, r25
    1a1a:	c1 f4       	brne	.+48     	; 0x1a4c <strtod+0xa8>
    1a1c:	23 96       	adiw	r28, 0x03	; 3
    1a1e:	45 e0       	ldi	r20, 0x05	; 5
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	6b e7       	ldi	r22, 0x7B	; 123
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	ce 01       	movw	r24, r28
    1a28:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <strncasecmp_P>
    1a2c:	89 2b       	or	r24, r25
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <strtod+0x8e>
    1a30:	25 96       	adiw	r28, 0x05	; 5
    1a32:	01 15       	cp	r16, r1
    1a34:	11 05       	cpc	r17, r1
    1a36:	19 f0       	breq	.+6      	; 0x1a3e <strtod+0x9a>
    1a38:	d8 01       	movw	r26, r16
    1a3a:	cd 93       	st	X+, r28
    1a3c:	dc 93       	st	X, r29
    1a3e:	d1 10       	cpse	r13, r1
    1a40:	06 c1       	rjmp	.+524    	; 0x1c4e <strtod+0x2aa>
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 e8       	ldi	r24, 0x80	; 128
    1a48:	9f e7       	ldi	r25, 0x7F	; 127
    1a4a:	0a c1       	rjmp	.+532    	; 0x1c60 <strtod+0x2bc>
    1a4c:	43 e0       	ldi	r20, 0x03	; 3
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	68 e7       	ldi	r22, 0x78	; 120
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	ce 01       	movw	r24, r28
    1a56:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <strncasecmp_P>
    1a5a:	89 2b       	or	r24, r25
    1a5c:	59 f4       	brne	.+22     	; 0x1a74 <strtod+0xd0>
    1a5e:	01 15       	cp	r16, r1
    1a60:	11 05       	cpc	r17, r1
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <strtod+0xc2>
    1a64:	f9 c0       	rjmp	.+498    	; 0x1c58 <strtod+0x2b4>
    1a66:	b2 e0       	ldi	r27, 0x02	; 2
    1a68:	eb 0e       	add	r14, r27
    1a6a:	f1 1c       	adc	r15, r1
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	f1 82       	std	Z+1, r15	; 0x01
    1a70:	e0 82       	st	Z, r14
    1a72:	f2 c0       	rjmp	.+484    	; 0x1c58 <strtod+0x2b4>
    1a74:	f7 01       	movw	r30, r14
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	c0 e0       	ldi	r28, 0x00	; 0
    1a7e:	d0 e0       	ldi	r29, 0x00	; 0
    1a80:	7f 01       	movw	r14, r30
    1a82:	a0 ed       	ldi	r26, 0xD0	; 208
    1a84:	aa 2e       	mov	r10, r26
    1a86:	ac 0c       	add	r10, r12
    1a88:	29 e0       	ldi	r18, 0x09	; 9
    1a8a:	2a 15       	cp	r18, r10
    1a8c:	30 f1       	brcs	.+76     	; 0x1ada <strtod+0x136>
    1a8e:	4d 2d       	mov	r20, r13
    1a90:	42 60       	ori	r20, 0x02	; 2
    1a92:	b4 2e       	mov	r11, r20
    1a94:	2d 2d       	mov	r18, r13
    1a96:	28 70       	andi	r18, 0x08	; 8
    1a98:	d2 fe       	sbrs	r13, 2
    1a9a:	04 c0       	rjmp	.+8      	; 0x1aa4 <strtod+0x100>
    1a9c:	21 11       	cpse	r18, r1
    1a9e:	25 c0       	rjmp	.+74     	; 0x1aea <strtod+0x146>
    1aa0:	21 96       	adiw	r28, 0x01	; 1
    1aa2:	23 c0       	rjmp	.+70     	; 0x1aea <strtod+0x146>
    1aa4:	21 11       	cpse	r18, r1
    1aa6:	21 97       	sbiw	r28, 0x01	; 1
    1aa8:	a5 e0       	ldi	r26, 0x05	; 5
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	9b 01       	movw	r18, r22
    1aae:	ac 01       	movw	r20, r24
    1ab0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__muluhisi3>
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	6a 0d       	add	r22, r10
    1abe:	71 1d       	adc	r23, r1
    1ac0:	81 1d       	adc	r24, r1
    1ac2:	91 1d       	adc	r25, r1
    1ac4:	68 39       	cpi	r22, 0x98	; 152
    1ac6:	a9 e9       	ldi	r26, 0x99	; 153
    1ac8:	7a 07       	cpc	r23, r26
    1aca:	8a 07       	cpc	r24, r26
    1acc:	a9 e1       	ldi	r26, 0x19	; 25
    1ace:	9a 07       	cpc	r25, r26
    1ad0:	60 f0       	brcs	.+24     	; 0x1aea <strtod+0x146>
    1ad2:	bd 2d       	mov	r27, r13
    1ad4:	b6 60       	ori	r27, 0x06	; 6
    1ad6:	bb 2e       	mov	r11, r27
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <strtod+0x146>
    1ada:	2e ef       	ldi	r18, 0xFE	; 254
    1adc:	a2 12       	cpse	r10, r18
    1ade:	0a c0       	rjmp	.+20     	; 0x1af4 <strtod+0x150>
    1ae0:	d3 fc       	sbrc	r13, 3
    1ae2:	50 c0       	rjmp	.+160    	; 0x1b84 <strtod+0x1e0>
    1ae4:	4d 2d       	mov	r20, r13
    1ae6:	48 60       	ori	r20, 0x08	; 8
    1ae8:	b4 2e       	mov	r11, r20
    1aea:	31 96       	adiw	r30, 0x01	; 1
    1aec:	d7 01       	movw	r26, r14
    1aee:	cc 90       	ld	r12, X
    1af0:	db 2c       	mov	r13, r11
    1af2:	c6 cf       	rjmp	.-116    	; 0x1a80 <strtod+0xdc>
    1af4:	2c 2d       	mov	r18, r12
    1af6:	2f 7d       	andi	r18, 0xDF	; 223
    1af8:	25 34       	cpi	r18, 0x45	; 69
    1afa:	09 f0       	breq	.+2      	; 0x1afe <strtod+0x15a>
    1afc:	43 c0       	rjmp	.+134    	; 0x1b84 <strtod+0x1e0>
    1afe:	a0 81       	ld	r26, Z
    1b00:	ad 32       	cpi	r26, 0x2D	; 45
    1b02:	41 f4       	brne	.+16     	; 0x1b14 <strtod+0x170>
    1b04:	bd 2d       	mov	r27, r13
    1b06:	b0 61       	ori	r27, 0x10	; 16
    1b08:	db 2e       	mov	r13, r27
    1b0a:	7f 01       	movw	r14, r30
    1b0c:	22 e0       	ldi	r18, 0x02	; 2
    1b0e:	e2 0e       	add	r14, r18
    1b10:	f1 1c       	adc	r15, r1
    1b12:	0c c0       	rjmp	.+24     	; 0x1b2c <strtod+0x188>
    1b14:	7f 01       	movw	r14, r30
    1b16:	ab 32       	cpi	r26, 0x2B	; 43
    1b18:	31 f0       	breq	.+12     	; 0x1b26 <strtod+0x182>
    1b1a:	4f ef       	ldi	r20, 0xFF	; 255
    1b1c:	e4 1a       	sub	r14, r20
    1b1e:	f4 0a       	sbc	r15, r20
    1b20:	21 e0       	ldi	r18, 0x01	; 1
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	06 c0       	rjmp	.+12     	; 0x1b32 <strtod+0x18e>
    1b26:	a2 e0       	ldi	r26, 0x02	; 2
    1b28:	ea 0e       	add	r14, r26
    1b2a:	f1 1c       	adc	r15, r1
    1b2c:	a1 81       	ldd	r26, Z+1	; 0x01
    1b2e:	22 e0       	ldi	r18, 0x02	; 2
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	a0 53       	subi	r26, 0x30	; 48
    1b34:	aa 30       	cpi	r26, 0x0A	; 10
    1b36:	18 f0       	brcs	.+6      	; 0x1b3e <strtod+0x19a>
    1b38:	e2 1a       	sub	r14, r18
    1b3a:	f3 0a       	sbc	r15, r19
    1b3c:	23 c0       	rjmp	.+70     	; 0x1b84 <strtod+0x1e0>
    1b3e:	f7 01       	movw	r30, r14
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	20 38       	cpi	r18, 0x80	; 128
    1b46:	bc e0       	ldi	r27, 0x0C	; 12
    1b48:	3b 07       	cpc	r19, r27
    1b4a:	5c f4       	brge	.+22     	; 0x1b62 <strtod+0x1be>
    1b4c:	a9 01       	movw	r20, r18
    1b4e:	44 0f       	add	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	44 0f       	add	r20, r20
    1b54:	55 1f       	adc	r21, r21
    1b56:	24 0f       	add	r18, r20
    1b58:	35 1f       	adc	r19, r21
    1b5a:	22 0f       	add	r18, r18
    1b5c:	33 1f       	adc	r19, r19
    1b5e:	2a 0f       	add	r18, r26
    1b60:	31 1d       	adc	r19, r1
    1b62:	af 01       	movw	r20, r30
    1b64:	4f 5f       	subi	r20, 0xFF	; 255
    1b66:	5f 4f       	sbci	r21, 0xFF	; 255
    1b68:	7a 01       	movw	r14, r20
    1b6a:	a0 81       	ld	r26, Z
    1b6c:	a0 53       	subi	r26, 0x30	; 48
    1b6e:	aa 30       	cpi	r26, 0x0A	; 10
    1b70:	10 f4       	brcc	.+4      	; 0x1b76 <strtod+0x1d2>
    1b72:	fa 01       	movw	r30, r20
    1b74:	e7 cf       	rjmp	.-50     	; 0x1b44 <strtod+0x1a0>
    1b76:	d4 fe       	sbrs	r13, 4
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <strtod+0x1dc>
    1b7a:	31 95       	neg	r19
    1b7c:	21 95       	neg	r18
    1b7e:	31 09       	sbc	r19, r1
    1b80:	c2 0f       	add	r28, r18
    1b82:	d3 1f       	adc	r29, r19
    1b84:	d1 fe       	sbrs	r13, 1
    1b86:	09 c0       	rjmp	.+18     	; 0x1b9a <strtod+0x1f6>
    1b88:	01 15       	cp	r16, r1
    1b8a:	11 05       	cpc	r17, r1
    1b8c:	31 f0       	breq	.+12     	; 0x1b9a <strtod+0x1f6>
    1b8e:	e1 e0       	ldi	r30, 0x01	; 1
    1b90:	ee 1a       	sub	r14, r30
    1b92:	f1 08       	sbc	r15, r1
    1b94:	d8 01       	movw	r26, r16
    1b96:	ed 92       	st	X+, r14
    1b98:	fc 92       	st	X, r15
    1b9a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatunsisf>
    1b9e:	2d 2d       	mov	r18, r13
    1ba0:	23 70       	andi	r18, 0x03	; 3
    1ba2:	23 30       	cpi	r18, 0x03	; 3
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <strtod+0x208>
    1ba6:	4b 01       	movw	r8, r22
    1ba8:	5c 01       	movw	r10, r24
    1baa:	06 c0       	rjmp	.+12     	; 0x1bb8 <strtod+0x214>
    1bac:	4b 01       	movw	r8, r22
    1bae:	5c 01       	movw	r10, r24
    1bb0:	b7 fa       	bst	r11, 7
    1bb2:	b0 94       	com	r11
    1bb4:	b7 f8       	bld	r11, 7
    1bb6:	b0 94       	com	r11
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	c5 01       	movw	r24, r10
    1bc0:	b4 01       	movw	r22, r8
    1bc2:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <strtod+0x228>
    1bca:	3e c0       	rjmp	.+124    	; 0x1c48 <strtod+0x2a4>
    1bcc:	d7 ff       	sbrs	r29, 7
    1bce:	06 c0       	rjmp	.+12     	; 0x1bdc <strtod+0x238>
    1bd0:	d1 95       	neg	r29
    1bd2:	c1 95       	neg	r28
    1bd4:	d1 09       	sbc	r29, r1
    1bd6:	07 e9       	ldi	r16, 0x97	; 151
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <strtod+0x23c>
    1bdc:	0f ea       	ldi	r16, 0xAF	; 175
    1bde:	10 e0       	ldi	r17, 0x00	; 0
    1be0:	68 01       	movw	r12, r16
    1be2:	b8 e1       	ldi	r27, 0x18	; 24
    1be4:	cb 1a       	sub	r12, r27
    1be6:	d1 08       	sbc	r13, r1
    1be8:	90 e2       	ldi	r25, 0x20	; 32
    1bea:	e9 2e       	mov	r14, r25
    1bec:	f1 2c       	mov	r15, r1
    1bee:	ce 15       	cp	r28, r14
    1bf0:	df 05       	cpc	r29, r15
    1bf2:	74 f0       	brlt	.+28     	; 0x1c10 <strtod+0x26c>
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	25 91       	lpm	r18, Z+
    1bf8:	35 91       	lpm	r19, Z+
    1bfa:	45 91       	lpm	r20, Z+
    1bfc:	54 91       	lpm	r21, Z
    1bfe:	c5 01       	movw	r24, r10
    1c00:	b4 01       	movw	r22, r8
    1c02:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
    1c06:	4b 01       	movw	r8, r22
    1c08:	5c 01       	movw	r10, r24
    1c0a:	ce 19       	sub	r28, r14
    1c0c:	df 09       	sbc	r29, r15
    1c0e:	ef cf       	rjmp	.-34     	; 0x1bee <strtod+0x24a>
    1c10:	04 50       	subi	r16, 0x04	; 4
    1c12:	11 09       	sbc	r17, r1
    1c14:	f5 94       	asr	r15
    1c16:	e7 94       	ror	r14
    1c18:	0c 15       	cp	r16, r12
    1c1a:	1d 05       	cpc	r17, r13
    1c1c:	41 f7       	brne	.-48     	; 0x1bee <strtod+0x24a>
    1c1e:	8a 2d       	mov	r24, r10
    1c20:	88 0f       	add	r24, r24
    1c22:	8b 2d       	mov	r24, r11
    1c24:	88 1f       	adc	r24, r24
    1c26:	8f 3f       	cpi	r24, 0xFF	; 255
    1c28:	49 f0       	breq	.+18     	; 0x1c3c <strtod+0x298>
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	a9 01       	movw	r20, r18
    1c30:	c5 01       	movw	r24, r10
    1c32:	b4 01       	movw	r22, r8
    1c34:	0e 94 14 09 	call	0x1228	; 0x1228 <__cmpsf2>
    1c38:	81 11       	cpse	r24, r1
    1c3a:	06 c0       	rjmp	.+12     	; 0x1c48 <strtod+0x2a4>
    1c3c:	82 e2       	ldi	r24, 0x22	; 34
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	90 93 18 03 	sts	0x0318, r25
    1c44:	80 93 17 03 	sts	0x0317, r24
    1c48:	c5 01       	movw	r24, r10
    1c4a:	b4 01       	movw	r22, r8
    1c4c:	09 c0       	rjmp	.+18     	; 0x1c60 <strtod+0x2bc>
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	80 e8       	ldi	r24, 0x80	; 128
    1c54:	9f ef       	ldi	r25, 0xFF	; 255
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <strtod+0x2bc>
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	80 ec       	ldi	r24, 0xC0	; 192
    1c5e:	9f e7       	ldi	r25, 0x7F	; 127
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	ec e0       	ldi	r30, 0x0C	; 12
    1c66:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__epilogue_restores__+0xc>

00001c6a <__ftoa_engine>:
    1c6a:	28 30       	cpi	r18, 0x08	; 8
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <__ftoa_engine+0x6>
    1c6e:	27 e0       	ldi	r18, 0x07	; 7
    1c70:	33 27       	eor	r19, r19
    1c72:	da 01       	movw	r26, r20
    1c74:	99 0f       	add	r25, r25
    1c76:	31 1d       	adc	r19, r1
    1c78:	87 fd       	sbrc	r24, 7
    1c7a:	91 60       	ori	r25, 0x01	; 1
    1c7c:	00 96       	adiw	r24, 0x00	; 0
    1c7e:	61 05       	cpc	r22, r1
    1c80:	71 05       	cpc	r23, r1
    1c82:	39 f4       	brne	.+14     	; 0x1c92 <__ftoa_engine+0x28>
    1c84:	32 60       	ori	r19, 0x02	; 2
    1c86:	2e 5f       	subi	r18, 0xFE	; 254
    1c88:	3d 93       	st	X+, r19
    1c8a:	30 e3       	ldi	r19, 0x30	; 48
    1c8c:	2a 95       	dec	r18
    1c8e:	e1 f7       	brne	.-8      	; 0x1c88 <__ftoa_engine+0x1e>
    1c90:	08 95       	ret
    1c92:	9f 3f       	cpi	r25, 0xFF	; 255
    1c94:	30 f0       	brcs	.+12     	; 0x1ca2 <__ftoa_engine+0x38>
    1c96:	80 38       	cpi	r24, 0x80	; 128
    1c98:	71 05       	cpc	r23, r1
    1c9a:	61 05       	cpc	r22, r1
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <__ftoa_engine+0x36>
    1c9e:	3c 5f       	subi	r19, 0xFC	; 252
    1ca0:	3c 5f       	subi	r19, 0xFC	; 252
    1ca2:	3d 93       	st	X+, r19
    1ca4:	91 30       	cpi	r25, 0x01	; 1
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <__ftoa_engine+0x40>
    1ca8:	80 68       	ori	r24, 0x80	; 128
    1caa:	91 1d       	adc	r25, r1
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	1f 93       	push	r17
    1cb2:	0f 93       	push	r16
    1cb4:	ff 92       	push	r15
    1cb6:	ef 92       	push	r14
    1cb8:	19 2f       	mov	r17, r25
    1cba:	98 7f       	andi	r25, 0xF8	; 248
    1cbc:	96 95       	lsr	r25
    1cbe:	e9 2f       	mov	r30, r25
    1cc0:	96 95       	lsr	r25
    1cc2:	96 95       	lsr	r25
    1cc4:	e9 0f       	add	r30, r25
    1cc6:	ff 27       	eor	r31, r31
    1cc8:	e3 5f       	subi	r30, 0xF3	; 243
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	99 27       	eor	r25, r25
    1cce:	33 27       	eor	r19, r19
    1cd0:	ee 24       	eor	r14, r14
    1cd2:	ff 24       	eor	r15, r15
    1cd4:	a7 01       	movw	r20, r14
    1cd6:	e7 01       	movw	r28, r14
    1cd8:	05 90       	lpm	r0, Z+
    1cda:	08 94       	sec
    1cdc:	07 94       	ror	r0
    1cde:	28 f4       	brcc	.+10     	; 0x1cea <__ftoa_engine+0x80>
    1ce0:	36 0f       	add	r19, r22
    1ce2:	e7 1e       	adc	r14, r23
    1ce4:	f8 1e       	adc	r15, r24
    1ce6:	49 1f       	adc	r20, r25
    1ce8:	51 1d       	adc	r21, r1
    1cea:	66 0f       	add	r22, r22
    1cec:	77 1f       	adc	r23, r23
    1cee:	88 1f       	adc	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	06 94       	lsr	r0
    1cf4:	a1 f7       	brne	.-24     	; 0x1cde <__ftoa_engine+0x74>
    1cf6:	05 90       	lpm	r0, Z+
    1cf8:	07 94       	ror	r0
    1cfa:	28 f4       	brcc	.+10     	; 0x1d06 <__ftoa_engine+0x9c>
    1cfc:	e7 0e       	add	r14, r23
    1cfe:	f8 1e       	adc	r15, r24
    1d00:	49 1f       	adc	r20, r25
    1d02:	56 1f       	adc	r21, r22
    1d04:	c1 1d       	adc	r28, r1
    1d06:	77 0f       	add	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	66 1f       	adc	r22, r22
    1d0e:	06 94       	lsr	r0
    1d10:	a1 f7       	brne	.-24     	; 0x1cfa <__ftoa_engine+0x90>
    1d12:	05 90       	lpm	r0, Z+
    1d14:	07 94       	ror	r0
    1d16:	28 f4       	brcc	.+10     	; 0x1d22 <__ftoa_engine+0xb8>
    1d18:	f8 0e       	add	r15, r24
    1d1a:	49 1f       	adc	r20, r25
    1d1c:	56 1f       	adc	r21, r22
    1d1e:	c7 1f       	adc	r28, r23
    1d20:	d1 1d       	adc	r29, r1
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	66 1f       	adc	r22, r22
    1d28:	77 1f       	adc	r23, r23
    1d2a:	06 94       	lsr	r0
    1d2c:	a1 f7       	brne	.-24     	; 0x1d16 <__ftoa_engine+0xac>
    1d2e:	05 90       	lpm	r0, Z+
    1d30:	07 94       	ror	r0
    1d32:	20 f4       	brcc	.+8      	; 0x1d3c <__ftoa_engine+0xd2>
    1d34:	49 0f       	add	r20, r25
    1d36:	56 1f       	adc	r21, r22
    1d38:	c7 1f       	adc	r28, r23
    1d3a:	d8 1f       	adc	r29, r24
    1d3c:	99 0f       	add	r25, r25
    1d3e:	66 1f       	adc	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	88 1f       	adc	r24, r24
    1d44:	06 94       	lsr	r0
    1d46:	a9 f7       	brne	.-22     	; 0x1d32 <__ftoa_engine+0xc8>
    1d48:	84 91       	lpm	r24, Z
    1d4a:	10 95       	com	r17
    1d4c:	17 70       	andi	r17, 0x07	; 7
    1d4e:	41 f0       	breq	.+16     	; 0x1d60 <__ftoa_engine+0xf6>
    1d50:	d6 95       	lsr	r29
    1d52:	c7 95       	ror	r28
    1d54:	57 95       	ror	r21
    1d56:	47 95       	ror	r20
    1d58:	f7 94       	ror	r15
    1d5a:	e7 94       	ror	r14
    1d5c:	1a 95       	dec	r17
    1d5e:	c1 f7       	brne	.-16     	; 0x1d50 <__ftoa_engine+0xe6>
    1d60:	e3 eb       	ldi	r30, 0xB3	; 179
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	68 94       	set
    1d66:	15 90       	lpm	r1, Z+
    1d68:	15 91       	lpm	r17, Z+
    1d6a:	35 91       	lpm	r19, Z+
    1d6c:	65 91       	lpm	r22, Z+
    1d6e:	95 91       	lpm	r25, Z+
    1d70:	05 90       	lpm	r0, Z+
    1d72:	7f e2       	ldi	r23, 0x2F	; 47
    1d74:	73 95       	inc	r23
    1d76:	e1 18       	sub	r14, r1
    1d78:	f1 0a       	sbc	r15, r17
    1d7a:	43 0b       	sbc	r20, r19
    1d7c:	56 0b       	sbc	r21, r22
    1d7e:	c9 0b       	sbc	r28, r25
    1d80:	d0 09       	sbc	r29, r0
    1d82:	c0 f7       	brcc	.-16     	; 0x1d74 <__ftoa_engine+0x10a>
    1d84:	e1 0c       	add	r14, r1
    1d86:	f1 1e       	adc	r15, r17
    1d88:	43 1f       	adc	r20, r19
    1d8a:	56 1f       	adc	r21, r22
    1d8c:	c9 1f       	adc	r28, r25
    1d8e:	d0 1d       	adc	r29, r0
    1d90:	7e f4       	brtc	.+30     	; 0x1db0 <__ftoa_engine+0x146>
    1d92:	70 33       	cpi	r23, 0x30	; 48
    1d94:	11 f4       	brne	.+4      	; 0x1d9a <__ftoa_engine+0x130>
    1d96:	8a 95       	dec	r24
    1d98:	e6 cf       	rjmp	.-52     	; 0x1d66 <__ftoa_engine+0xfc>
    1d9a:	e8 94       	clt
    1d9c:	01 50       	subi	r16, 0x01	; 1
    1d9e:	30 f0       	brcs	.+12     	; 0x1dac <__ftoa_engine+0x142>
    1da0:	08 0f       	add	r16, r24
    1da2:	0a f4       	brpl	.+2      	; 0x1da6 <__ftoa_engine+0x13c>
    1da4:	00 27       	eor	r16, r16
    1da6:	02 17       	cp	r16, r18
    1da8:	08 f4       	brcc	.+2      	; 0x1dac <__ftoa_engine+0x142>
    1daa:	20 2f       	mov	r18, r16
    1dac:	23 95       	inc	r18
    1dae:	02 2f       	mov	r16, r18
    1db0:	7a 33       	cpi	r23, 0x3A	; 58
    1db2:	28 f0       	brcs	.+10     	; 0x1dbe <__ftoa_engine+0x154>
    1db4:	79 e3       	ldi	r23, 0x39	; 57
    1db6:	7d 93       	st	X+, r23
    1db8:	2a 95       	dec	r18
    1dba:	e9 f7       	brne	.-6      	; 0x1db6 <__ftoa_engine+0x14c>
    1dbc:	10 c0       	rjmp	.+32     	; 0x1dde <__ftoa_engine+0x174>
    1dbe:	7d 93       	st	X+, r23
    1dc0:	2a 95       	dec	r18
    1dc2:	89 f6       	brne	.-94     	; 0x1d66 <__ftoa_engine+0xfc>
    1dc4:	06 94       	lsr	r0
    1dc6:	97 95       	ror	r25
    1dc8:	67 95       	ror	r22
    1dca:	37 95       	ror	r19
    1dcc:	17 95       	ror	r17
    1dce:	17 94       	ror	r1
    1dd0:	e1 18       	sub	r14, r1
    1dd2:	f1 0a       	sbc	r15, r17
    1dd4:	43 0b       	sbc	r20, r19
    1dd6:	56 0b       	sbc	r21, r22
    1dd8:	c9 0b       	sbc	r28, r25
    1dda:	d0 09       	sbc	r29, r0
    1ddc:	98 f0       	brcs	.+38     	; 0x1e04 <__ftoa_engine+0x19a>
    1dde:	23 95       	inc	r18
    1de0:	7e 91       	ld	r23, -X
    1de2:	73 95       	inc	r23
    1de4:	7a 33       	cpi	r23, 0x3A	; 58
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <__ftoa_engine+0x180>
    1de8:	70 e3       	ldi	r23, 0x30	; 48
    1dea:	7c 93       	st	X, r23
    1dec:	20 13       	cpse	r18, r16
    1dee:	b8 f7       	brcc	.-18     	; 0x1dde <__ftoa_engine+0x174>
    1df0:	7e 91       	ld	r23, -X
    1df2:	70 61       	ori	r23, 0x10	; 16
    1df4:	7d 93       	st	X+, r23
    1df6:	30 f0       	brcs	.+12     	; 0x1e04 <__ftoa_engine+0x19a>
    1df8:	83 95       	inc	r24
    1dfa:	71 e3       	ldi	r23, 0x31	; 49
    1dfc:	7d 93       	st	X+, r23
    1dfe:	70 e3       	ldi	r23, 0x30	; 48
    1e00:	2a 95       	dec	r18
    1e02:	e1 f7       	brne	.-8      	; 0x1dfc <__ftoa_engine+0x192>
    1e04:	11 24       	eor	r1, r1
    1e06:	ef 90       	pop	r14
    1e08:	ff 90       	pop	r15
    1e0a:	0f 91       	pop	r16
    1e0c:	1f 91       	pop	r17
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	99 27       	eor	r25, r25
    1e14:	87 fd       	sbrc	r24, 7
    1e16:	90 95       	com	r25
    1e18:	08 95       	ret

00001e1a <isspace>:
    1e1a:	91 11       	cpse	r25, r1
    1e1c:	1e c0       	rjmp	.+60     	; 0x1e5a <__ctype_isfalse>
    1e1e:	80 32       	cpi	r24, 0x20	; 32
    1e20:	19 f0       	breq	.+6      	; 0x1e28 <isspace+0xe>
    1e22:	89 50       	subi	r24, 0x09	; 9
    1e24:	85 50       	subi	r24, 0x05	; 5
    1e26:	d0 f7       	brcc	.-12     	; 0x1e1c <isspace+0x2>
    1e28:	08 95       	ret

00001e2a <strncasecmp_P>:
    1e2a:	fb 01       	movw	r30, r22
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	41 50       	subi	r20, 0x01	; 1
    1e30:	50 40       	sbci	r21, 0x00	; 0
    1e32:	88 f0       	brcs	.+34     	; 0x1e56 <strncasecmp_P+0x2c>
    1e34:	8d 91       	ld	r24, X+
    1e36:	81 34       	cpi	r24, 0x41	; 65
    1e38:	1c f0       	brlt	.+6      	; 0x1e40 <strncasecmp_P+0x16>
    1e3a:	8b 35       	cpi	r24, 0x5B	; 91
    1e3c:	0c f4       	brge	.+2      	; 0x1e40 <strncasecmp_P+0x16>
    1e3e:	80 5e       	subi	r24, 0xE0	; 224
    1e40:	65 91       	lpm	r22, Z+
    1e42:	61 34       	cpi	r22, 0x41	; 65
    1e44:	1c f0       	brlt	.+6      	; 0x1e4c <strncasecmp_P+0x22>
    1e46:	6b 35       	cpi	r22, 0x5B	; 91
    1e48:	0c f4       	brge	.+2      	; 0x1e4c <strncasecmp_P+0x22>
    1e4a:	60 5e       	subi	r22, 0xE0	; 224
    1e4c:	86 1b       	sub	r24, r22
    1e4e:	61 11       	cpse	r22, r1
    1e50:	71 f3       	breq	.-36     	; 0x1e2e <strncasecmp_P+0x4>
    1e52:	99 0b       	sbc	r25, r25
    1e54:	08 95       	ret
    1e56:	88 1b       	sub	r24, r24
    1e58:	fc cf       	rjmp	.-8      	; 0x1e52 <strncasecmp_P+0x28>

00001e5a <__ctype_isfalse>:
    1e5a:	99 27       	eor	r25, r25
    1e5c:	88 27       	eor	r24, r24

00001e5e <__ctype_istrue>:
    1e5e:	08 95       	ret

00001e60 <__muluhisi3>:
    1e60:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__umulhisi3>
    1e64:	a5 9f       	mul	r26, r21
    1e66:	90 0d       	add	r25, r0
    1e68:	b4 9f       	mul	r27, r20
    1e6a:	90 0d       	add	r25, r0
    1e6c:	a4 9f       	mul	r26, r20
    1e6e:	80 0d       	add	r24, r0
    1e70:	91 1d       	adc	r25, r1
    1e72:	11 24       	eor	r1, r1
    1e74:	08 95       	ret

00001e76 <__prologue_saves__>:
    1e76:	2f 92       	push	r2
    1e78:	3f 92       	push	r3
    1e7a:	4f 92       	push	r4
    1e7c:	5f 92       	push	r5
    1e7e:	6f 92       	push	r6
    1e80:	7f 92       	push	r7
    1e82:	8f 92       	push	r8
    1e84:	9f 92       	push	r9
    1e86:	af 92       	push	r10
    1e88:	bf 92       	push	r11
    1e8a:	cf 92       	push	r12
    1e8c:	df 92       	push	r13
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	ca 1b       	sub	r28, r26
    1ea0:	db 0b       	sbc	r29, r27
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	09 94       	ijmp

00001eae <__epilogue_restores__>:
    1eae:	2a 88       	ldd	r2, Y+18	; 0x12
    1eb0:	39 88       	ldd	r3, Y+17	; 0x11
    1eb2:	48 88       	ldd	r4, Y+16	; 0x10
    1eb4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eb6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eb8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eba:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ebc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ebe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ec0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ec2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ec4:	df 80       	ldd	r13, Y+7	; 0x07
    1ec6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ec8:	fd 80       	ldd	r15, Y+5	; 0x05
    1eca:	0c 81       	ldd	r16, Y+4	; 0x04
    1ecc:	1b 81       	ldd	r17, Y+3	; 0x03
    1ece:	aa 81       	ldd	r26, Y+2	; 0x02
    1ed0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ed2:	ce 0f       	add	r28, r30
    1ed4:	d1 1d       	adc	r29, r1
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	ed 01       	movw	r28, r26
    1ee2:	08 95       	ret

00001ee4 <__umulhisi3>:
    1ee4:	a2 9f       	mul	r26, r18
    1ee6:	b0 01       	movw	r22, r0
    1ee8:	b3 9f       	mul	r27, r19
    1eea:	c0 01       	movw	r24, r0
    1eec:	a3 9f       	mul	r26, r19
    1eee:	70 0d       	add	r23, r0
    1ef0:	81 1d       	adc	r24, r1
    1ef2:	11 24       	eor	r1, r1
    1ef4:	91 1d       	adc	r25, r1
    1ef6:	b2 9f       	mul	r27, r18
    1ef8:	70 0d       	add	r23, r0
    1efa:	81 1d       	adc	r24, r1
    1efc:	11 24       	eor	r1, r1
    1efe:	91 1d       	adc	r25, r1
    1f00:	08 95       	ret

00001f02 <_exit>:
    1f02:	f8 94       	cli

00001f04 <__stop_program>:
    1f04:	ff cf       	rjmp	.-2      	; 0x1f04 <__stop_program>
