
stepmotor0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800100  00001d46  00001dda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800392  00800392  0000206c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c7d  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011c9  00000000  00000000  00004fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000afa  00000000  00000000  00006186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006c8  00000000  00000000  00006c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ad8  00000000  00000000  00007348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000193a  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  0000975a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_16>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_18>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	sbci	r20, 0x9E	; 158

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     10b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     11b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     12b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     13b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     14b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     15b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     16b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     17b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     18b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     19b:	3d 27 00                                            ='.

0000019e <__ctors_start>:
     19e:	7c 01       	movw	r14, r24
     1a0:	92 05       	cpc	r25, r2
     1a2:	35 06       	cpc	r3, r21
     1a4:	82 07       	cpc	r24, r18

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	13 e0       	ldi	r17, 0x03	; 3
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e6 e4       	ldi	r30, 0x46	; 70
     1ba:	fd e1       	ldi	r31, 0x1D	; 29
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a2 39       	cpi	r26, 0x92	; 146
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	23 e0       	ldi	r18, 0x03	; 3
     1ca:	a2 e9       	ldi	r26, 0x92	; 146
     1cc:	b3 e0       	ldi	r27, 0x03	; 3
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ad 3c       	cpi	r26, 0xCD	; 205
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>

000001d8 <__do_global_ctors>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	c6 ea       	ldi	r28, 0xA6	; 166
     1dc:	d1 e0       	ldi	r29, 0x01	; 1
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <__do_global_ctors+0x10>
     1e0:	22 97       	sbiw	r28, 0x02	; 2
     1e2:	fe 01       	movw	r30, r28
     1e4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__tablejump__>
     1e8:	ce 39       	cpi	r28, 0x9E	; 158
     1ea:	d1 07       	cpc	r29, r17
     1ec:	c9 f7       	brne	.-14     	; 0x1e0 <__do_global_ctors+0x8>
     1ee:	0e 94 2b 06 	call	0xc56	; 0xc56 <main>
     1f2:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <_ZN4ADC2C1Ev>:

ADC2::ADC2(){
	//Channel ADC0 is chosen
	//MUX3...0 =0000
	//Configure the PORTC0
	DDRC &= !_BV(0);
     1fa:	87 b1       	in	r24, 0x07	; 7
     1fc:	17 b8       	out	0x07, r1	; 7
	//Enable ADC with prescaller 128 (16000000/128=125000Hz)
	//Required 50K-200KHz
	ADCSRA |= _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
     1fe:	ea e7       	ldi	r30, 0x7A	; 122
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	87 68       	ori	r24, 0x87	; 135
     206:	80 83       	st	Z, r24
	//Internal 1.1V Voltage Reference with external capacitor at AREF pin 
	ADMUX |=  _BV(REFS0);//|_BV(REFS1);
     208:	ec e7       	ldi	r30, 0x7C	; 124
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	80 64       	ori	r24, 0x40	; 64
     210:	80 83       	st	Z, r24
     212:	08 95       	ret

00000214 <_ZN7ADS1115C1Ev>:


I2C ADS1115i2c;


ADS1115::ADS1115(){}
     214:	08 95       	ret

00000216 <_ZN7ADS111512init_ADS1115Ev>:

	
void ADS1115::init_ADS1115(){
	
	ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     216:	60 e9       	ldi	r22, 0x90	; 144
     218:	82 e9       	ldi	r24, 0x92	; 146
     21a:	93 e0       	ldi	r25, 0x03	; 3
     21c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN3I2C9i2c_startEh>
	ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONFIG); // set pointer to Config register
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	82 e9       	ldi	r24, 0x92	; 146
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	0e 94 82 02 	call	0x504	; 0x504 <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0>>8)); // write MSB of the Config register
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	82 e9       	ldi	r24, 0x92	; 146
     22e:	93 e0       	ldi	r25, 0x03	; 3
     230:	0e 94 82 02 	call	0x504	; 0x504 <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0&0xFF)); // write LSB of the Config register
     234:	63 ee       	ldi	r22, 0xE3	; 227
     236:	82 e9       	ldi	r24, 0x92	; 146
     238:	93 e0       	ldi	r25, 0x03	; 3
     23a:	0e 94 82 02 	call	0x504	; 0x504 <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_stop();
     23e:	82 e9       	ldi	r24, 0x92	; 146
     240:	93 e0       	ldi	r25, 0x03	; 3
     242:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN3I2C8i2c_stopEv>
     246:	08 95       	ret

00000248 <_ZN7ADS111511readADS1115Ev>:
	
}

uint16_t ADS1115::readADS1115(){
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
	 
	 int a=ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     24c:	60 e9       	ldi	r22, 0x90	; 144
     24e:	82 e9       	ldi	r24, 0x92	; 146
     250:	93 e0       	ldi	r25, 0x03	; 3
     252:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN3I2C9i2c_startEh>
	 if (a==1)
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	29 f0       	breq	.+10     	; 0x264 <_ZN7ADS111511readADS1115Ev+0x1c>
	 {
	 }
	 else{
		 ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONVERT); // set pointer to X axis MSB
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	82 e9       	ldi	r24, 0x92	; 146
     25e:	93 e0       	ldi	r25, 0x03	; 3
     260:	0e 94 82 02 	call	0x504	; 0x504 <_ZN3I2C9i2c_writeEh>
		 
	 }
	 ADS1115i2c.i2c_stop();
     264:	82 e9       	ldi	r24, 0x92	; 146
     266:	93 e0       	ldi	r25, 0x03	; 3
     268:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN3I2C8i2c_stopEv>

	 int b=ADS1115i2c.i2c_start((ADS1115_ADDRESS|0x01));
     26c:	61 e9       	ldi	r22, 0x91	; 145
     26e:	82 e9       	ldi	r24, 0x92	; 146
     270:	93 e0       	ldi	r25, 0x03	; 3
     272:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN3I2C9i2c_startEh>
	 if (b==1)
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	59 f0       	breq	.+22     	; 0x290 <_ZN7ADS111511readADS1115Ev+0x48>
	 {
	 }
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
     27a:	82 e9       	ldi	r24, 0x92	; 146
     27c:	93 e0       	ldi	r25, 0x03	; 3
     27e:	0e 94 94 02 	call	0x528	; 0x528 <_ZN3I2C12i2c_read_ackEv>
     282:	c8 2f       	mov	r28, r24
		 LSB = ADS1115i2c.i2c_read_ack();
     284:	82 e9       	ldi	r24, 0x92	; 146
     286:	93 e0       	ldi	r25, 0x03	; 3
     288:	0e 94 94 02 	call	0x528	; 0x528 <_ZN3I2C12i2c_read_ackEv>
     28c:	d8 2f       	mov	r29, r24
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_ZN7ADS111511readADS1115Ev+0x4c>
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
     290:	d0 e0       	ldi	r29, 0x00	; 0
	
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
     292:	c0 e0       	ldi	r28, 0x00	; 0
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
		 LSB = ADS1115i2c.i2c_read_ack();
		 
	 }
	 ADS1115i2c.i2c_stop();
     294:	82 e9       	ldi	r24, 0x92	; 146
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN3I2C8i2c_stopEv>

	 result =((MSB<<8)|LSB)>>4;
     29c:	2d 2f       	mov	r18, r29
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	c9 01       	movw	r24, r18
     2a2:	9c 2b       	or	r25, r28
	 return result;
}
     2a4:	95 95       	asr	r25
     2a6:	87 95       	ror	r24
     2a8:	95 95       	asr	r25
     2aa:	87 95       	ror	r24
     2ac:	95 95       	asr	r25
     2ae:	87 95       	ror	r24
     2b0:	95 95       	asr	r25
     2b2:	87 95       	ror	r24
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <_ZN7ADS111511readVoltageEv>:

double ADS1115::readVoltage(){
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
	init_ADS1115();
     2c0:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN7ADS111512init_ADS1115Ev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c4:	2f ef       	ldi	r18, 0xFF	; 255
     2c6:	89 ef       	ldi	r24, 0xF9	; 249
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	21 50       	subi	r18, 0x01	; 1
     2cc:	80 40       	sbci	r24, 0x00	; 0
     2ce:	90 40       	sbci	r25, 0x00	; 0
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <_ZN7ADS111511readVoltageEv+0x10>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_ZN7ADS111511readVoltageEv+0x1a>
     2d4:	00 00       	nop
	_delay_ms(20);
	uint16_t readResult= readADS1115();
     2d6:	ce 01       	movw	r24, r28
     2d8:	0e 94 24 01 	call	0x248	; 0x248 <_ZN7ADS111511readADS1115Ev>
	double voltage = 0.003*readResult;
     2dc:	bc 01       	movw	r22, r24
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__floatunsisf>
     2e6:	26 ea       	ldi	r18, 0xA6	; 166
     2e8:	3b e9       	ldi	r19, 0x9B	; 155
     2ea:	44 e4       	ldi	r20, 0x44	; 68
     2ec:	5b e3       	ldi	r21, 0x3B	; 59
     2ee:	0e 94 87 09 	call	0x130e	; 0x130e <__mulsf3>
	return voltage;
	
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <_GLOBAL__sub_I_ADS1115i2c>:
#include <stdlib.h>
#include "ADS1115.h"
#include "i2c.h"


I2C ADS1115i2c;
     2f8:	82 e9       	ldi	r24, 0x92	; 146
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_ZN3I2CC1Ev>
     300:	08 95       	ret

00000302 <_ZN7VolTodBC1Ev>:
double static k[]={-8.4383,-9.0240,-9.3759,-8.8337,-8.8376,-8.2690,-7.2632,-6.8190,-6.7341,-5.8107,-8.6300, -9.3397, -8.9357,-8.6917, -9.4855,-8.3984,-9.0112, -8.3600,-7.6434,-8.1179, -8.0753,-8.7957,-9.1952,-9.1295,-9.2685,-9.6407, -11.3759, -10.0213};
double static t[]={5.7987,6.1970,6.4794,5.9629,5.9792,5.3368,4.0244,3.3762,3.2552,1.7153,6.8552,8.2216,7.3785,6.8769,8.6709,5.9893,7.5672,5.8135,3.7710,5.1349,5.0075,7.3585,8.6997,8.4799,9.0063,10.4154,16.9396,11.7330};
double static dBPoint[]={0,-1.05,-2.22,-3.345,-4.42,-5.44,-6.375,-7.24,-8.055,-8.8,-9.81,-10.955,-12.095,-13.21,-14.395,-15.515,-16.61,-17.675,-18.65,-19.675,-20.65,-21.71,-22.83,-23.98,-25.095,-26.29,-27.615,-28.925};
double initVolDifference=0;

VolTodB::VolTodB(){};
     302:	08 95       	ret

00000304 <_ZN7VolTodB5getdBEd>:
	
double VolTodB::getdB(double voltage){
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	6a 01       	movw	r12, r20
     316:	7b 01       	movw	r14, r22
     318:	cd e5       	ldi	r28, 0x5D	; 93
     31a:	d2 e0       	ldi	r29, 0x02	; 2
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     31c:	00 e0       	ldi	r16, 0x00	; 0
     31e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (voltage>voltagePoint[i]&&voltage<=voltagePoint[i+1])
     320:	69 91       	ld	r22, Y+
     322:	79 91       	ld	r23, Y+
     324:	89 91       	ld	r24, Y+
     326:	99 91       	ld	r25, Y+
     328:	a7 01       	movw	r20, r14
     32a:	96 01       	movw	r18, r12
     32c:	0e 94 34 08 	call	0x1068	; 0x1068 <__cmpsf2>
     330:	88 23       	and	r24, r24
     332:	6c f5       	brge	.+90     	; 0x38e <_ZN7VolTodB5getdBEd+0x8a>
     334:	28 81       	ld	r18, Y
     336:	39 81       	ldd	r19, Y+1	; 0x01
     338:	4a 81       	ldd	r20, Y+2	; 0x02
     33a:	5b 81       	ldd	r21, Y+3	; 0x03
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 34 08 	call	0x1068	; 0x1068 <__cmpsf2>
     344:	18 16       	cp	r1, r24
     346:	1c f1       	brlt	.+70     	; 0x38e <_ZN7VolTodB5getdBEd+0x8a>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
     348:	00 0f       	add	r16, r16
     34a:	11 1f       	adc	r17, r17
     34c:	00 0f       	add	r16, r16
     34e:	11 1f       	adc	r17, r17
     350:	e8 01       	movw	r28, r16
     352:	c3 51       	subi	r28, 0x13	; 19
     354:	de 4f       	sbci	r29, 0xFE	; 254
     356:	20 91 93 03 	lds	r18, 0x0393
     35a:	30 91 94 03 	lds	r19, 0x0394
     35e:	40 91 95 03 	lds	r20, 0x0395
     362:	50 91 96 03 	lds	r21, 0x0396
     366:	c7 01       	movw	r24, r14
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     36e:	28 81       	ld	r18, Y
     370:	39 81       	ldd	r19, Y+1	; 0x01
     372:	4a 81       	ldd	r20, Y+2	; 0x02
     374:	5b 81       	ldd	r21, Y+3	; 0x03
     376:	0e 94 87 09 	call	0x130e	; 0x130e <__mulsf3>
     37a:	f8 01       	movw	r30, r16
     37c:	e3 58       	subi	r30, 0x83	; 131
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	20 81       	ld	r18, Z
     382:	31 81       	ldd	r19, Z+1	; 0x01
     384:	42 81       	ldd	r20, Z+2	; 0x02
     386:	53 81       	ldd	r21, Z+3	; 0x03
     388:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__addsf3>
     38c:	03 c0       	rjmp	.+6      	; 0x394 <_ZN7VolTodB5getdBEd+0x90>
VolTodB::VolTodB(){};
	
double VolTodB::getdB(double voltage){
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     38e:	0f 5f       	subi	r16, 0xFF	; 255
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	c6 cf       	rjmp	.-116    	; 0x320 <_ZN7VolTodB5getdBEd+0x1c>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
		}
	}
	
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	08 95       	ret

000003a6 <_ZN7VolTodB14setInitVoltageEd>:

void VolTodB::setInitVoltage(double voltage){
     3a6:	cb 01       	movw	r24, r22
     3a8:	ba 01       	movw	r22, r20
	initVolDifference= voltage-0.687;
     3aa:	2b e3       	ldi	r18, 0x3B	; 59
     3ac:	3f ed       	ldi	r19, 0xDF	; 223
     3ae:	4f e2       	ldi	r20, 0x2F	; 47
     3b0:	5f e3       	ldi	r21, 0x3F	; 63
     3b2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     3b6:	60 93 93 03 	sts	0x0393, r22
     3ba:	70 93 94 03 	sts	0x0394, r23
     3be:	80 93 95 03 	sts	0x0395, r24
     3c2:	90 93 96 03 	sts	0x0396, r25
     3c6:	08 95       	ret

000003c8 <_ZN7VolTodB10getVoltageEd>:
}

double VolTodB::getVoltage(double dB){
     3c8:	8f 92       	push	r8
     3ca:	9f 92       	push	r9
     3cc:	af 92       	push	r10
     3ce:	bf 92       	push	r11
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
     3e0:	9a 01       	movw	r18, r20
     3e2:	ab 01       	movw	r20, r22
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	cb 01       	movw	r24, r22
     3ea:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     3ee:	6b 01       	movw	r12, r22
     3f0:	7c 01       	movw	r14, r24
	double voltage=0;
	if (inv_dB==0)
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	a9 01       	movw	r20, r18
     3f8:	0e 94 34 08 	call	0x1068	; 0x1068 <__cmpsf2>
     3fc:	81 11       	cpse	r24, r1
     3fe:	11 c0       	rjmp	.+34     	; 0x422 <_ZN7VolTodB10getVoltageEd+0x5a>
	{
		voltage=((inv_dB-t[0])/k[0]);
     400:	23 ef       	ldi	r18, 0xF3	; 243
     402:	3e e8       	ldi	r19, 0x8E	; 142
     404:	49 eb       	ldi	r20, 0xB9	; 185
     406:	50 e4       	ldi	r21, 0x40	; 64
     408:	c7 01       	movw	r24, r14
     40a:	b6 01       	movw	r22, r12
     40c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     410:	27 e4       	ldi	r18, 0x47	; 71
     412:	33 e0       	ldi	r19, 0x03	; 3
     414:	47 e0       	ldi	r20, 0x07	; 7
     416:	51 ec       	ldi	r21, 0xC1	; 193
     418:	0e 94 38 08 	call	0x1070	; 0x1070 <__divsf3>
     41c:	4b 01       	movw	r8, r22
     41e:	5c 01       	movw	r10, r24
     420:	39 c0       	rjmp	.+114    	; 0x494 <_ZN7VolTodB10getVoltageEd+0xcc>
     422:	0d e0       	ldi	r16, 0x0D	; 13
     424:	11 e0       	ldi	r17, 0x01	; 1

double VolTodB::getVoltage(double dB){
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
	double voltage=0;
	if (inv_dB==0)
     426:	c0 e0       	ldi	r28, 0x00	; 0
     428:	d0 e0       	ldi	r29, 0x00	; 0
     42a:	81 2c       	mov	r8, r1
     42c:	91 2c       	mov	r9, r1
     42e:	54 01       	movw	r10, r8
	}
	
	else{
	for (int i=0;i<size-1;i++)
	{
		if (inv_dB<dBPoint[i]&&inv_dB>=dBPoint[i+1])
     430:	f8 01       	movw	r30, r16
     432:	21 91       	ld	r18, Z+
     434:	31 91       	ld	r19, Z+
     436:	41 91       	ld	r20, Z+
     438:	51 91       	ld	r21, Z+
     43a:	8f 01       	movw	r16, r30
     43c:	c7 01       	movw	r24, r14
     43e:	b6 01       	movw	r22, r12
     440:	0e 94 34 08 	call	0x1068	; 0x1068 <__cmpsf2>
     444:	88 23       	and	r24, r24
     446:	0c f5       	brge	.+66     	; 0x48a <_ZN7VolTodB10getVoltageEd+0xc2>
     448:	f8 01       	movw	r30, r16
     44a:	20 81       	ld	r18, Z
     44c:	31 81       	ldd	r19, Z+1	; 0x01
     44e:	42 81       	ldd	r20, Z+2	; 0x02
     450:	53 81       	ldd	r21, Z+3	; 0x03
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	0e 94 83 09 	call	0x1306	; 0x1306 <__gesf2>
     45a:	88 23       	and	r24, r24
     45c:	b4 f0       	brlt	.+44     	; 0x48a <_ZN7VolTodB10getVoltageEd+0xc2>
     45e:	fe 01       	movw	r30, r28
     460:	e3 58       	subi	r30, 0x83	; 131
     462:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			voltage= ((inv_dB-t[i])/k[i]);
     464:	20 81       	ld	r18, Z
     466:	31 81       	ldd	r19, Z+1	; 0x01
     468:	42 81       	ldd	r20, Z+2	; 0x02
     46a:	53 81       	ldd	r21, Z+3	; 0x03
     46c:	c7 01       	movw	r24, r14
     46e:	b6 01       	movw	r22, r12
     470:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     474:	fe 01       	movw	r30, r28
     476:	e3 51       	subi	r30, 0x13	; 19
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	20 81       	ld	r18, Z
     47c:	31 81       	ldd	r19, Z+1	; 0x01
     47e:	42 81       	ldd	r20, Z+2	; 0x02
     480:	53 81       	ldd	r21, Z+3	; 0x03
     482:	0e 94 38 08 	call	0x1070	; 0x1070 <__divsf3>
     486:	4b 01       	movw	r8, r22
     488:	5c 01       	movw	r10, r24
     48a:	24 96       	adiw	r28, 0x04	; 4
	{
		voltage=((inv_dB-t[0])/k[0]);
	}
	
	else{
	for (int i=0;i<size-1;i++)
     48c:	cc 3b       	cpi	r28, 0xBC	; 188
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	df 07       	cpc	r29, r31
     492:	71 f6       	brne	.-100    	; 0x430 <_ZN7VolTodB10getVoltageEd+0x68>
		}
	}
	
	}
	return voltage;
}
     494:	c5 01       	movw	r24, r10
     496:	b4 01       	movw	r22, r8
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	bf 90       	pop	r11
     4aa:	af 90       	pop	r10
     4ac:	9f 90       	pop	r9
     4ae:	8f 90       	pop	r8
     4b0:	08 95       	ret

000004b2 <_ZN3I2CC1Ev>:

I2C::I2C(){ i2c_init();}
	
void I2C::i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     4b2:	88 e4       	ldi	r24, 0x48	; 72
     4b4:	80 93 b8 00 	sts	0x00B8, r24
     4b8:	08 95       	ret

000004ba <_ZN3I2C9i2c_startEh>:
}

uint8_t I2C::i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     4ba:	ec eb       	ldi	r30, 0xBC	; 188
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     4c0:	84 ea       	ldi	r24, 0xA4	; 164
     4c2:	80 83       	st	Z, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4c4:	80 81       	ld	r24, Z
     4c6:	88 23       	and	r24, r24
     4c8:	ec f7       	brge	.-6      	; 0x4c4 <_ZN3I2C9i2c_startEh+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     4ca:	80 91 b9 00 	lds	r24, 0x00B9
     4ce:	88 7f       	andi	r24, 0xF8	; 248
     4d0:	88 30       	cpi	r24, 0x08	; 8
     4d2:	a1 f4       	brne	.+40     	; 0x4fc <_ZN3I2C9i2c_startEh+0x42>
	
	// load slave address into data register
	TWDR = address;
     4d4:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     4d8:	84 e8       	ldi	r24, 0x84	; 132
     4da:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4de:	ec eb       	ldi	r30, 0xBC	; 188
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	88 23       	and	r24, r24
     4e6:	ec f7       	brge	.-6      	; 0x4e2 <_ZN3I2C9i2c_startEh+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     4e8:	90 91 b9 00 	lds	r25, 0x00B9
     4ec:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     4ee:	98 31       	cpi	r25, 0x18	; 24
     4f0:	39 f0       	breq	.+14     	; 0x500 <_ZN3I2C9i2c_startEh+0x46>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	90 34       	cpi	r25, 0x40	; 64
     4f6:	29 f4       	brne	.+10     	; 0x502 <_ZN3I2C9i2c_startEh+0x48>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     500:	80 e0       	ldi	r24, 0x00	; 0
}
     502:	08 95       	ret

00000504 <_ZN3I2C9i2c_writeEh>:

uint8_t I2C::i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     504:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     508:	84 e8       	ldi	r24, 0x84	; 132
     50a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     50e:	ec eb       	ldi	r30, 0xBC	; 188
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	88 23       	and	r24, r24
     516:	ec f7       	brge	.-6      	; 0x512 <_ZN3I2C9i2c_writeEh+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     518:	90 91 b9 00 	lds	r25, 0x00B9
     51c:	98 7f       	andi	r25, 0xF8	; 248
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	98 32       	cpi	r25, 0x28	; 40
     522:	09 f4       	brne	.+2      	; 0x526 <_ZN3I2C9i2c_writeEh+0x22>
     524:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     526:	08 95       	ret

00000528 <_ZN3I2C12i2c_read_ackEv>:

uint8_t I2C::i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     528:	84 ec       	ldi	r24, 0xC4	; 196
     52a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     52e:	ec eb       	ldi	r30, 0xBC	; 188
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	88 23       	and	r24, r24
     536:	ec f7       	brge	.-6      	; 0x532 <_ZN3I2C12i2c_read_ackEv+0xa>
	// return received data from TWDR
	return TWDR;
     538:	80 91 bb 00 	lds	r24, 0x00BB
}
     53c:	08 95       	ret

0000053e <_ZN3I2C8i2c_stopEv>:
}

void I2C::i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     53e:	84 e9       	ldi	r24, 0x94	; 148
     540:	80 93 bc 00 	sts	0x00BC, r24
     544:	08 95       	ret

00000546 <_ZN4MenuC1Ev>:
bool modelR=false;
bool modelT=false;


	
Menu::Menu(){
     546:	0e 94 87 07 	call	0xf0e	; 0xf0e <_ZN8UARTtoolC1Ev>
     54a:	08 95       	ret

0000054c <_Z9replyListi>:
	

	
	
}
void replyList(int index){
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	a8 97       	sbiw	r28, 0x28	; 40
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
	
	
		if (index==1)
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 05       	cpc	r25, r1
     564:	89 f4       	brne	.+34     	; 0x588 <_Z9replyListi+0x3c>
		{
			char testmsg1[]="Mode A: W + or S -";
     566:	83 e1       	ldi	r24, 0x13	; 19
     568:	ed ec       	ldi	r30, 0xCD	; 205
     56a:	f2 e0       	ldi	r31, 0x02	; 2
     56c:	de 01       	movw	r26, r28
     56e:	11 96       	adiw	r26, 0x01	; 1
     570:	01 90       	ld	r0, Z+
     572:	0d 92       	st	X+, r0
     574:	8a 95       	dec	r24
     576:	e1 f7       	brne	.-8      	; 0x570 <_Z9replyListi+0x24>
			myUART.uart_transmit_string(testmsg1);
     578:	be 01       	movw	r22, r28
     57a:	6f 5f       	subi	r22, 0xFF	; 255
     57c:	7f 4f       	sbci	r23, 0xFF	; 255
     57e:	8a ea       	ldi	r24, 0xAA	; 170
     580:	93 e0       	ldi	r25, 0x03	; 3
     582:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
     586:	3a c0       	rjmp	.+116    	; 0x5fc <_Z9replyListi+0xb0>
		}
		else if (index==2)
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	91 05       	cpc	r25, r1
     58c:	89 f4       	brne	.+34     	; 0x5b0 <_Z9replyListi+0x64>
		{
			char testmsg2[]="Mode B: Input target voltage: 0.80-4.20";
     58e:	88 e2       	ldi	r24, 0x28	; 40
     590:	e0 ee       	ldi	r30, 0xE0	; 224
     592:	f2 e0       	ldi	r31, 0x02	; 2
     594:	de 01       	movw	r26, r28
     596:	11 96       	adiw	r26, 0x01	; 1
     598:	01 90       	ld	r0, Z+
     59a:	0d 92       	st	X+, r0
     59c:	8a 95       	dec	r24
     59e:	e1 f7       	brne	.-8      	; 0x598 <_Z9replyListi+0x4c>
			myUART.uart_transmit_string(testmsg2);
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	8a ea       	ldi	r24, 0xAA	; 170
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
     5ae:	26 c0       	rjmp	.+76     	; 0x5fc <_Z9replyListi+0xb0>
		}
		
		else if (index==3)
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	91 05       	cpc	r25, r1
     5b4:	89 f4       	brne	.+34     	; 0x5d8 <_Z9replyListi+0x8c>
		{
			char testmsg3[]="Reset to 0 dB";
     5b6:	8e e0       	ldi	r24, 0x0E	; 14
     5b8:	e8 e0       	ldi	r30, 0x08	; 8
     5ba:	f3 e0       	ldi	r31, 0x03	; 3
     5bc:	de 01       	movw	r26, r28
     5be:	11 96       	adiw	r26, 0x01	; 1
     5c0:	01 90       	ld	r0, Z+
     5c2:	0d 92       	st	X+, r0
     5c4:	8a 95       	dec	r24
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <_Z9replyListi+0x74>
			myUART.uart_transmit_string(testmsg3);
     5c8:	be 01       	movw	r22, r28
     5ca:	6f 5f       	subi	r22, 0xFF	; 255
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	8a ea       	ldi	r24, 0xAA	; 170
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
     5d6:	12 c0       	rjmp	.+36     	; 0x5fc <_Z9replyListi+0xb0>
		}
		
		else if (index==4)
     5d8:	04 97       	sbiw	r24, 0x04	; 4
     5da:	81 f4       	brne	.+32     	; 0x5fc <_Z9replyListi+0xb0>
		{
			char testmsg4[]="Input target dB: 0.0-(-28.5)";
     5dc:	8d e1       	ldi	r24, 0x1D	; 29
     5de:	e6 e1       	ldi	r30, 0x16	; 22
     5e0:	f3 e0       	ldi	r31, 0x03	; 3
     5e2:	de 01       	movw	r26, r28
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	01 90       	ld	r0, Z+
     5e8:	0d 92       	st	X+, r0
     5ea:	8a 95       	dec	r24
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <_Z9replyListi+0x9a>
			myUART.uart_transmit_string(testmsg4);
     5ee:	be 01       	movw	r22, r28
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	8a ea       	ldi	r24, 0xAA	; 170
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
		}
		
}
     5fc:	a8 96       	adiw	r28, 0x28	; 40
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <_Z9menuStartv>:


void menuStart(){
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	c3 55       	subi	r28, 0x53	; 83
     618:	d1 09       	sbc	r29, r1
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
			char msg1[]="Welcome";
     624:	88 e0       	ldi	r24, 0x08	; 8
     626:	e3 e3       	ldi	r30, 0x33	; 51
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	de 01       	movw	r26, r28
     62c:	a4 5b       	subi	r26, 0xB4	; 180
     62e:	bf 4f       	sbci	r27, 0xFF	; 255
     630:	01 90       	ld	r0, Z+
     632:	0d 92       	st	X+, r0
     634:	8a 95       	dec	r24
     636:	e1 f7       	brne	.-8      	; 0x630 <_Z9menuStartv+0x22>
			char msg2[]="========= Menu =========";
     638:	89 e1       	ldi	r24, 0x19	; 25
     63a:	eb e3       	ldi	r30, 0x3B	; 59
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	de 01       	movw	r26, r28
     640:	5d 96       	adiw	r26, 0x1d	; 29
     642:	01 90       	ld	r0, Z+
     644:	0d 92       	st	X+, r0
     646:	8a 95       	dec	r24
     648:	e1 f7       	brne	.-8      	; 0x642 <_Z9menuStartv+0x34>
			char msg3[]="A. Step by step: W+ and S-.";
     64a:	8c e1       	ldi	r24, 0x1C	; 28
     64c:	e4 e5       	ldi	r30, 0x54	; 84
     64e:	f3 e0       	ldi	r31, 0x03	; 3
     650:	de 01       	movw	r26, r28
     652:	11 96       	adiw	r26, 0x01	; 1
     654:	01 90       	ld	r0, Z+
     656:	0d 92       	st	X+, r0
     658:	8a 95       	dec	r24
     65a:	e1 f7       	brne	.-8      	; 0x654 <_Z9menuStartv+0x46>
			char msg4[]="R. Reset";
     65c:	89 e0       	ldi	r24, 0x09	; 9
     65e:	e0 e7       	ldi	r30, 0x70	; 112
     660:	f3 e0       	ldi	r31, 0x03	; 3
     662:	de 01       	movw	r26, r28
     664:	ad 5b       	subi	r26, 0xBD	; 189
     666:	bf 4f       	sbci	r27, 0xFF	; 255
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	8a 95       	dec	r24
     66e:	e1 f7       	brne	.-8      	; 0x668 <_Z9menuStartv+0x5a>
			char msg5[]="T. Target dB";
     670:	8d e0       	ldi	r24, 0x0D	; 13
     672:	e9 e7       	ldi	r30, 0x79	; 121
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	de 01       	movw	r26, r28
     678:	d6 96       	adiw	r26, 0x36	; 54
     67a:	01 90       	ld	r0, Z+
     67c:	0d 92       	st	X+, r0
     67e:	8a 95       	dec	r24
     680:	e1 f7       	brne	.-8      	; 0x67a <_Z9menuStartv+0x6c>
			
			myUART.uart_transmit_string(msg1);
     682:	be 01       	movw	r22, r28
     684:	64 5b       	subi	r22, 0xB4	; 180
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	8a ea       	ldi	r24, 0xAA	; 170
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg2);
     690:	be 01       	movw	r22, r28
     692:	63 5e       	subi	r22, 0xE3	; 227
     694:	7f 4f       	sbci	r23, 0xFF	; 255
     696:	8a ea       	ldi	r24, 0xAA	; 170
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg3);
     69e:	be 01       	movw	r22, r28
     6a0:	6f 5f       	subi	r22, 0xFF	; 255
     6a2:	7f 4f       	sbci	r23, 0xFF	; 255
     6a4:	8a ea       	ldi	r24, 0xAA	; 170
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg4);
     6ac:	be 01       	movw	r22, r28
     6ae:	6d 5b       	subi	r22, 0xBD	; 189
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	8a ea       	ldi	r24, 0xAA	; 170
     6b4:	93 e0       	ldi	r25, 0x03	; 3
     6b6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg5);
     6ba:	be 01       	movw	r22, r28
     6bc:	6a 5c       	subi	r22, 0xCA	; 202
     6be:	7f 4f       	sbci	r23, 0xFF	; 255
     6c0:	8a ea       	ldi	r24, 0xAA	; 170
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
		
}
     6c8:	cd 5a       	subi	r28, 0xAD	; 173
     6ca:	df 4f       	sbci	r29, 0xFF	; 255
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <_Z14moveUpDownLitei>:
	
}

void moveUpDownLite(int stepdown){
	
	myStepper.step(stepdown);
     6dc:	bc 01       	movw	r22, r24
     6de:	8b ea       	ldi	r24, 0xAB	; 171
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN7Stepper4stepEi>
     6e6:	2f ef       	ldi	r18, 0xFF	; 255
     6e8:	89 e6       	ldi	r24, 0x69	; 105
     6ea:	98 e1       	ldi	r25, 0x18	; 24
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	90 40       	sbci	r25, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <_Z14moveUpDownLitei+0x10>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <_Z14moveUpDownLitei+0x1a>
     6f6:	00 00       	nop
	_delay_ms(500);
	myStepper.motorOff();
     6f8:	8b ea       	ldi	r24, 0xAB	; 171
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN7Stepper8motorOffEv>
     700:	08 95       	ret

00000702 <_Z11stepperStopv>:
}

void stepperStop(){
	myStepper.motorOff();
     702:	8b ea       	ldi	r24, 0xAB	; 171
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN7Stepper8motorOffEv>
     70a:	08 95       	ret

0000070c <_ZN4Menu9MenuStartEv>:
Menu::Menu(){
	
}

void Menu::MenuStart(){
		menuStart();
     70c:	0e 94 07 03 	call	0x60e	; 0x60e <_Z9menuStartv>
		myStepper.setSpeed(4);//Set the speed of the stepper
     710:	44 e0       	ldi	r20, 0x04	; 4
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	8b ea       	ldi	r24, 0xAB	; 171
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN7Stepper8setSpeedEl>
		stepperStop();
     720:	0e 94 81 03 	call	0x702	; 0x702 <_Z11stepperStopv>
     724:	08 95       	ret

00000726 <_Z11readVoltagev>:
void stepperStop(){
	myStepper.motorOff();
}


double readVoltage(){
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	2d 97       	sbiw	r28, 0x0d	; 13
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	00 e1       	ldi	r16, 0x10	; 16
     748:	10 e0       	ldi	r17, 0x00	; 0
	
	double voltage=0;
	double voltageSum=0;
     74a:	c1 2c       	mov	r12, r1
     74c:	d1 2c       	mov	r13, r1
     74e:	76 01       	movw	r14, r12
	for (int i=0;i<16;i++)
	{
		 voltage= myADS1115.readVoltage();
     750:	88 ea       	ldi	r24, 0xA8	; 168
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_ZN7ADS111511readVoltageEv>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
		 voltageSum=voltageSum+voltage;
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__addsf3>
     764:	6b 01       	movw	r12, r22
     766:	7c 01       	movw	r14, r24
     768:	01 50       	subi	r16, 0x01	; 1
     76a:	11 09       	sbc	r17, r1

double readVoltage(){
	
	double voltage=0;
	double voltageSum=0;
	for (int i=0;i<16;i++)
     76c:	01 15       	cp	r16, r1
     76e:	11 05       	cpc	r17, r1
     770:	79 f7       	brne	.-34     	; 0x750 <_Z11readVoltagev+0x2a>
	{
		 voltage= myADS1115.readVoltage();
		 voltageSum=voltageSum+voltage;
	}
	voltage = voltageSum/16;
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e8       	ldi	r20, 0x80	; 128
     778:	5d e3       	ldi	r21, 0x3D	; 61
     77a:	0e 94 87 09 	call	0x130e	; 0x130e <__mulsf3>
     77e:	6b 01       	movw	r12, r22
     780:	7c 01       	movw	r14, r24
	char buffer0[10];
	//Convert double to stringw
	dtostrf(voltage, 6, 3, buffer0);
     782:	8e 01       	movw	r16, r28
     784:	0f 5f       	subi	r16, 0xFF	; 255
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	23 e0       	ldi	r18, 0x03	; 3
     78a:	46 e0       	ldi	r20, 0x06	; 6
     78c:	0e 94 4f 0a 	call	0x149e	; 0x149e <dtostrf>
	//dtostrf(voltagePot,4,2,buffer1);
	myUART.uart_transmit_string(wiperv_msg);
     790:	64 e0       	ldi	r22, 0x04	; 4
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	8a ea       	ldi	r24, 0xAA	; 170
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     79c:	b8 01       	movw	r22, r16
     79e:	8a ea       	ldi	r24, 0xAA	; 170
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
	
	//get dB
	double dB = myVolTodB.getdB(voltage);
     7a6:	b7 01       	movw	r22, r14
     7a8:	a6 01       	movw	r20, r12
     7aa:	87 ea       	ldi	r24, 0xA7	; 167
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7VolTodB5getdBEd>
	dtostrf(dB, 6, 3, buffer0);
     7b2:	23 e0       	ldi	r18, 0x03	; 3
     7b4:	46 e0       	ldi	r20, 0x06	; 6
     7b6:	0e 94 4f 0a 	call	0x149e	; 0x149e <dtostrf>
	char temp_msg[]="dB";
     7ba:	84 e6       	ldi	r24, 0x64	; 100
     7bc:	92 e4       	ldi	r25, 0x42	; 66
     7be:	a0 e0       	ldi	r26, 0x00	; 0
     7c0:	8b 87       	std	Y+11, r24	; 0x0b
     7c2:	9c 87       	std	Y+12, r25	; 0x0c
     7c4:	ad 87       	std	Y+13, r26	; 0x0d
	myUART.uart_transmit_string(temp_msg);
     7c6:	be 01       	movw	r22, r28
     7c8:	65 5f       	subi	r22, 0xF5	; 245
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
     7cc:	8a ea       	ldi	r24, 0xAA	; 170
     7ce:	93 e0       	ldi	r25, 0x03	; 3
     7d0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     7d4:	b8 01       	movw	r22, r16
     7d6:	8a ea       	ldi	r24, 0xAA	; 170
     7d8:	93 e0       	ldi	r25, 0x03	; 3
     7da:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
	
	return voltage;
}
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	2d 96       	adiw	r28, 0x0d	; 13
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <_Z10moveUpDowni>:
		
}

void moveUpDown(int stepup){
	
	myStepper.step(stepup);
     800:	bc 01       	movw	r22, r24
     802:	8b ea       	ldi	r24, 0xAB	; 171
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN7Stepper4stepEi>
     80a:	2f ef       	ldi	r18, 0xFF	; 255
     80c:	83 ec       	ldi	r24, 0xC3	; 195
     80e:	99 e0       	ldi	r25, 0x09	; 9
     810:	21 50       	subi	r18, 0x01	; 1
     812:	80 40       	sbci	r24, 0x00	; 0
     814:	90 40       	sbci	r25, 0x00	; 0
     816:	e1 f7       	brne	.-8      	; 0x810 <_Z10moveUpDowni+0x10>
     818:	00 c0       	rjmp	.+0      	; 0x81a <_Z10moveUpDowni+0x1a>
     81a:	00 00       	nop
	_delay_ms(200);
	myStepper.motorOff();
     81c:	8b ea       	ldi	r24, 0xAB	; 171
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN7Stepper8motorOffEv>
     824:	2f ef       	ldi	r18, 0xFF	; 255
     826:	83 ed       	ldi	r24, 0xD3	; 211
     828:	90 e3       	ldi	r25, 0x30	; 48
     82a:	21 50       	subi	r18, 0x01	; 1
     82c:	80 40       	sbci	r24, 0x00	; 0
     82e:	90 40       	sbci	r25, 0x00	; 0
     830:	e1 f7       	brne	.-8      	; 0x82a <_Z10moveUpDowni+0x2a>
     832:	00 c0       	rjmp	.+0      	; 0x834 <_Z10moveUpDowni+0x34>
     834:	00 00       	nop
	_delay_ms(1000);
	readVoltage();
     836:	0e 94 93 03 	call	0x726	; 0x726 <_Z11readVoltagev>
     83a:	08 95       	ret

0000083c <_Z15readVoltageLitev>:
}

double readVoltageLite(){
	
	double voltage=0;
	voltage= myADS1115.readVoltage();
     83c:	88 ea       	ldi	r24, 0xA8	; 168
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_ZN7ADS111511readVoltageEv>
	return voltage;
}
     844:	08 95       	ret

00000846 <_Z5resetv>:

void reset(){
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	2c 97       	sbiw	r28, 0x0c	; 12
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
	    double presentVol= readVoltageLite();
     862:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z15readVoltageLitev>
     866:	6b 01       	movw	r12, r22
     868:	7c 01       	movw	r14, r24
		double downLimit= 0.7;
		double upperLimit=4.0;
		
		//Move with big steps
		if (presentVol>downLimit)
     86a:	23 e3       	ldi	r18, 0x33	; 51
     86c:	33 e3       	ldi	r19, 0x33	; 51
     86e:	43 e3       	ldi	r20, 0x33	; 51
     870:	5f e3       	ldi	r21, 0x3F	; 63
     872:	0e 94 83 09 	call	0x1306	; 0x1306 <__gesf2>
     876:	18 16       	cp	r1, r24
     878:	64 f5       	brge	.+88     	; 0x8d2 <_Z5resetv+0x8c>
		{
			int tempStep= ((presentVol-0.7)/0.03)*STEP_TO_DOWN;
     87a:	23 e3       	ldi	r18, 0x33	; 51
     87c:	33 e3       	ldi	r19, 0x33	; 51
     87e:	43 e3       	ldi	r20, 0x33	; 51
     880:	5f e3       	ldi	r21, 0x3F	; 63
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     88a:	2f e8       	ldi	r18, 0x8F	; 143
     88c:	32 ec       	ldi	r19, 0xC2	; 194
     88e:	45 ef       	ldi	r20, 0xF5	; 245
     890:	5c e3       	ldi	r21, 0x3C	; 60
     892:	0e 94 38 08 	call	0x1070	; 0x1070 <__divsf3>
     896:	6b 01       	movw	r12, r22
     898:	7c 01       	movw	r14, r24
     89a:	60 91 00 01 	lds	r22, 0x0100
     89e:	70 91 01 01 	lds	r23, 0x0101
     8a2:	88 27       	eor	r24, r24
     8a4:	77 fd       	sbrc	r23, 7
     8a6:	80 95       	com	r24
     8a8:	98 2f       	mov	r25, r24
     8aa:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	c7 01       	movw	r24, r14
     8b4:	b6 01       	movw	r22, r12
     8b6:	0e 94 87 09 	call	0x130e	; 0x130e <__mulsf3>
     8ba:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fixsfsi>
			moveUpDownLite(tempStep);
     8be:	cb 01       	movw	r24, r22
     8c0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_Z14moveUpDownLitei>
     8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <_Z5resetv+0x8c>
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
		{
			moveUpDownLite(STEP_TO_DOWN);
     8c6:	80 91 00 01 	lds	r24, 0x0100
     8ca:	90 91 01 01 	lds	r25, 0x0101
     8ce:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_Z14moveUpDownLitei>
			int tempStep= ((presentVol-0.7)/0.03)*STEP_TO_DOWN;
			moveUpDownLite(tempStep);
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
     8d2:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z15readVoltageLitev>
     8d6:	23 e3       	ldi	r18, 0x33	; 51
     8d8:	33 e3       	ldi	r19, 0x33	; 51
     8da:	43 e3       	ldi	r20, 0x33	; 51
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	0e 94 83 09 	call	0x1306	; 0x1306 <__gesf2>
     8e2:	18 16       	cp	r1, r24
     8e4:	84 f3       	brlt	.-32     	; 0x8c6 <_Z5resetv+0x80>
		{
			moveUpDownLite(STEP_TO_DOWN);
		}
		
		double initVolt=readVoltageLite();
     8e6:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z15readVoltageLitev>
     8ea:	ab 01       	movw	r20, r22
     8ec:	bc 01       	movw	r22, r24
		myVolTodB.setInitVoltage(initVolt);
     8ee:	87 ea       	ldi	r24, 0xA7	; 167
     8f0:	93 e0       	ldi	r25, 0x03	; 3
     8f2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN7VolTodB14setInitVoltageEd>
		
		//Finish reset
		char msg[]="Reset down!";
     8f6:	8c e0       	ldi	r24, 0x0C	; 12
     8f8:	e6 e8       	ldi	r30, 0x86	; 134
     8fa:	f3 e0       	ldi	r31, 0x03	; 3
     8fc:	de 01       	movw	r26, r28
     8fe:	11 96       	adiw	r26, 0x01	; 1
     900:	01 90       	ld	r0, Z+
     902:	0d 92       	st	X+, r0
     904:	8a 95       	dec	r24
     906:	e1 f7       	brne	.-8      	; 0x900 <__stack+0x1>
		myUART.uart_transmit_string(msg);
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	8a ea       	ldi	r24, 0xAA	; 170
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
}
     916:	2c 96       	adiw	r28, 0x0c	; 12
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	df 90       	pop	r13
     92c:	cf 90       	pop	r12
     92e:	08 95       	ret

00000930 <__vector_18>:
		stepperStop();
}



ISR (USART_RX_vect){
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	4f 93       	push	r20
     94c:	5f 93       	push	r21
     94e:	6f 93       	push	r22
     950:	7f 93       	push	r23
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	2a 97       	sbiw	r28, 0x0a	; 10
     968:	de bf       	out	0x3e, r29	; 62
     96a:	cd bf       	out	0x3d, r28	; 61
	char userInput = UDR0;
     96c:	e6 ec       	ldi	r30, 0xC6	; 198
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	20 81       	ld	r18, Z
	UDR0=userInput; // echo back
     972:	20 83       	st	Z, r18
	
	if (userInput !=9) //tab - use to confirm the input
     974:	29 30       	cpi	r18, 0x09	; 9
     976:	81 f0       	breq	.+32     	; 0x998 <__vector_18+0x68>
	{
		userInputSub=userInput;//store the last input
     978:	20 93 9c 03 	sts	0x039C, r18
		userInputString[userInputIdex]=userInput;//store the string input
     97c:	80 91 9a 03 	lds	r24, 0x039A
     980:	90 91 9b 03 	lds	r25, 0x039B
     984:	fc 01       	movw	r30, r24
     986:	e3 56       	subi	r30, 0x63	; 99
     988:	fc 4f       	sbci	r31, 0xFC	; 252
     98a:	20 83       	st	Z, r18
		userInputIdex++;
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	90 93 9b 03 	sts	0x039B, r25
     992:	80 93 9a 03 	sts	0x039A, r24
     996:	a7 c0       	rjmp	.+334    	; 0xae6 <__vector_18+0x1b6>
	}
	
	else{
	
	//Setting the mode
	if (userInputSub=='A'||userInputSub=='a')
     998:	90 91 9c 03 	lds	r25, 0x039C
     99c:	89 2f       	mov	r24, r25
     99e:	8f 7d       	andi	r24, 0xDF	; 223
     9a0:	81 34       	cpi	r24, 0x41	; 65
     9a2:	61 f4       	brne	.+24     	; 0x9bc <__vector_18+0x8c>
	{
		replyList(1);
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z9replyListi>
		modelA=true;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 93 99 03 	sts	0x0399, r24
		modelR=false;
     9b2:	10 92 98 03 	sts	0x0398, r1
		modelT=false;
     9b6:	10 92 97 03 	sts	0x0397, r1
     9ba:	26 c0       	rjmp	.+76     	; 0xa08 <__vector_18+0xd8>
	}

	else if (userInputSub=='R'||userInputSub=='r') //reset to the minimum attenuation
     9bc:	82 35       	cpi	r24, 0x52	; 82
     9be:	61 f4       	brne	.+24     	; 0x9d8 <__vector_18+0xa8>
	{
		replyList(3);
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z9replyListi>
		modelR=true;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 98 03 	sts	0x0398, r24
		modelA=false;
     9ce:	10 92 99 03 	sts	0x0399, r1
		modelT=false;
     9d2:	10 92 97 03 	sts	0x0397, r1
     9d6:	18 c0       	rjmp	.+48     	; 0xa08 <__vector_18+0xd8>
		
	}
	else if (userInputSub=='T'||userInputSub=='t') //Target voltage mode
     9d8:	84 35       	cpi	r24, 0x54	; 84
     9da:	61 f4       	brne	.+24     	; 0x9f4 <__vector_18+0xc4>
	{
		replyList(4);
     9dc:	84 e0       	ldi	r24, 0x04	; 4
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z9replyListi>
		modelR=false;
     9e4:	10 92 98 03 	sts	0x0398, r1
		modelA=false;
     9e8:	10 92 99 03 	sts	0x0399, r1
		modelT=true;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 97 03 	sts	0x0397, r24
     9f2:	0a c0       	rjmp	.+20     	; 0xa08 <__vector_18+0xd8>
		
	}
	else if (userInputSub==27)//ESC
     9f4:	9b 31       	cpi	r25, 0x1B	; 27
     9f6:	41 f4       	brne	.+16     	; 0xa08 <__vector_18+0xd8>
	{
		menuStart();
     9f8:	0e 94 07 03 	call	0x60e	; 0x60e <_Z9menuStartv>
		modelA=false;
     9fc:	10 92 99 03 	sts	0x0399, r1
		modelR=false;
     a00:	10 92 98 03 	sts	0x0398, r1
		modelT=false;
     a04:	10 92 97 03 	sts	0x0397, r1
	}

	
	//Mode A: Move up or down step by step
	if (modelA)
     a08:	80 91 99 03 	lds	r24, 0x0399
     a0c:	88 23       	and	r24, r24
     a0e:	61 f1       	breq	.+88     	; 0xa68 <__vector_18+0x138>
	{
		if (userInputSub=='w'||userInputSub=='W')
     a10:	80 91 9c 03 	lds	r24, 0x039C
     a14:	8f 7d       	andi	r24, 0xDF	; 223
     a16:	87 35       	cpi	r24, 0x57	; 87
     a18:	91 f4       	brne	.+36     	; 0xa3e <__vector_18+0x10e>
		{
			if (readVoltageLite()<4.00)
     a1a:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z15readVoltageLitev>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e8       	ldi	r20, 0x80	; 128
     a24:	50 e4       	ldi	r21, 0x40	; 64
     a26:	0e 94 34 08 	call	0x1068	; 0x1068 <__cmpsf2>
     a2a:	88 23       	and	r24, r24
     a2c:	0c f0       	brlt	.+2      	; 0xa30 <__vector_18+0x100>
     a2e:	55 c0       	rjmp	.+170    	; 0xada <__vector_18+0x1aa>
			{
				moveUpDown(STEP_TO_UP);
     a30:	80 91 02 01 	lds	r24, 0x0102
     a34:	90 91 03 01 	lds	r25, 0x0103
     a38:	0e 94 00 04 	call	0x800	; 0x800 <_Z10moveUpDowni>
     a3c:	4e c0       	rjmp	.+156    	; 0xada <__vector_18+0x1aa>
			}
			
		}
		else if (userInputSub=='s'||userInputSub=='S')
     a3e:	83 35       	cpi	r24, 0x53	; 83
     a40:	09 f0       	breq	.+2      	; 0xa44 <__vector_18+0x114>
     a42:	4b c0       	rjmp	.+150    	; 0xada <__vector_18+0x1aa>
		{
			if (readVoltageLite()>0.2)
     a44:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z15readVoltageLitev>
     a48:	2d ec       	ldi	r18, 0xCD	; 205
     a4a:	3c ec       	ldi	r19, 0xCC	; 204
     a4c:	4c e4       	ldi	r20, 0x4C	; 76
     a4e:	5e e3       	ldi	r21, 0x3E	; 62
     a50:	0e 94 83 09 	call	0x1306	; 0x1306 <__gesf2>
     a54:	18 16       	cp	r1, r24
     a56:	0c f0       	brlt	.+2      	; 0xa5a <__vector_18+0x12a>
     a58:	40 c0       	rjmp	.+128    	; 0xada <__vector_18+0x1aa>
			{
				moveUpDown(STEP_TO_DOWN);
     a5a:	80 91 00 01 	lds	r24, 0x0100
     a5e:	90 91 01 01 	lds	r25, 0x0101
     a62:	0e 94 00 04 	call	0x800	; 0x800 <_Z10moveUpDowni>
     a66:	39 c0       	rjmp	.+114    	; 0xada <__vector_18+0x1aa>
			}
			
		}
	}
	
	else if (modelR)
     a68:	80 91 98 03 	lds	r24, 0x0398
     a6c:	88 23       	and	r24, r24
     a6e:	19 f0       	breq	.+6      	; 0xa76 <__vector_18+0x146>
	{
		reset();
     a70:	0e 94 23 04 	call	0x846	; 0x846 <_Z5resetv>
     a74:	32 c0       	rjmp	.+100    	; 0xada <__vector_18+0x1aa>
	}
	
	else if (modelT)
     a76:	80 91 97 03 	lds	r24, 0x0397
     a7a:	88 23       	and	r24, r24
     a7c:	71 f1       	breq	.+92     	; 0xada <__vector_18+0x1aa>
	{
		if (userInputSub=='T'||userInputSub=='t')
     a7e:	80 91 9c 03 	lds	r24, 0x039C
     a82:	8f 7d       	andi	r24, 0xDF	; 223
     a84:	84 35       	cpi	r24, 0x54	; 84
     a86:	49 f1       	breq	.+82     	; 0xada <__vector_18+0x1aa>
		{ //do nothing
		}
		else{
		char bufferx[10];
		double dB= atof(userInputString);
     a88:	8d e9       	ldi	r24, 0x9D	; 157
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <atof>
     a90:	6b 01       	movw	r12, r22
     a92:	7c 01       	movw	r14, r24
		if (dB>0&&dB<=29)
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	a9 01       	movw	r20, r18
     a9a:	0e 94 83 09 	call	0x1306	; 0x1306 <__gesf2>
     a9e:	18 16       	cp	r1, r24
     aa0:	e4 f4       	brge	.+56     	; 0xada <__vector_18+0x1aa>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	48 ee       	ldi	r20, 0xE8	; 232
     aa8:	51 e4       	ldi	r21, 0x41	; 65
     aaa:	c7 01       	movw	r24, r14
     aac:	b6 01       	movw	r22, r12
     aae:	0e 94 34 08 	call	0x1068	; 0x1068 <__cmpsf2>
     ab2:	18 16       	cp	r1, r24
     ab4:	94 f0       	brlt	.+36     	; 0xada <__vector_18+0x1aa>
		{
			double targetVol=myVolTodB.getVoltage(dB);
     ab6:	b7 01       	movw	r22, r14
     ab8:	a6 01       	movw	r20, r12
     aba:	87 ea       	ldi	r24, 0xA7	; 167
     abc:	93 e0       	ldi	r25, 0x03	; 3
     abe:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN7VolTodB10getVoltageEd>
			dtostrf(targetVol,4,2,bufferx);
     ac2:	8e 01       	movw	r16, r28
     ac4:	0f 5f       	subi	r16, 0xFF	; 255
     ac6:	1f 4f       	sbci	r17, 0xFF	; 255
     ac8:	22 e0       	ldi	r18, 0x02	; 2
     aca:	44 e0       	ldi	r20, 0x04	; 4
     acc:	0e 94 4f 0a 	call	0x149e	; 0x149e <dtostrf>
			myUART.uart_transmit_string(bufferx);
     ad0:	b8 01       	movw	r22, r16
     ad2:	8a ea       	ldi	r24, 0xAA	; 170
     ad4:	93 e0       	ldi	r25, 0x03	; 3
     ad6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN8UARTtool20uart_transmit_stringEPc>
			//goToTargetVol(targetVol);
		}
		}
	}
	
	strcpy(userInputString,"");
     ada:	10 92 9d 03 	sts	0x039D, r1
	userInputIdex=0;
     ade:	10 92 9b 03 	sts	0x039B, r1
     ae2:	10 92 9a 03 	sts	0x039A, r1
	}
	

	
	
}
     ae6:	2a 96       	adiw	r28, 0x0a	; 10
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <_GLOBAL__sub_I_myStepper>:
#include "ADC.h"
#include "UARTtool.h"
#include "Menu.h"
#include "VolTodB.h"

Stepper  myStepper;
     b24:	8b ea       	ldi	r24, 0xAB	; 171
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN7StepperC1Ev>
UARTtool myUART;
     b2c:	8a ea       	ldi	r24, 0xAA	; 170
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	0e 94 87 07 	call	0xf0e	; 0xf0e <_ZN8UARTtoolC1Ev>
ADC2     myADC;
     b34:	89 ea       	ldi	r24, 0xA9	; 169
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN4ADC2C1Ev>
ADS1115  myADS1115;
     b3c:	88 ea       	ldi	r24, 0xA8	; 168
     b3e:	93 e0       	ldi	r25, 0x03	; 3
     b40:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN7ADS1115C1Ev>
VolTodB  myVolTodB;
     b44:	87 ea       	ldi	r24, 0xA7	; 167
     b46:	93 e0       	ldi	r25, 0x03	; 3
     b48:	0e 94 81 01 	call	0x302	; 0x302 <_ZN7VolTodBC1Ev>
     b4c:	08 95       	ret

00000b4e <_ZN6MillisC1Ev>:
uint64_t _millis = 0;
uint16_t _1000us = 0;
uint64_t old_millis = 0;
	

Millis::Millis(void){
     b4e:	08 95       	ret

00000b50 <__vector_16>:
	;
	}

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	11 24       	eor	r1, r1
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	ef 93       	push	r30
     b6e:	ff 93       	push	r31
	_1000us += 128;
     b70:	e0 91 bf 03 	lds	r30, 0x03BF
     b74:	f0 91 c0 03 	lds	r31, 0x03C0
     b78:	e0 58       	subi	r30, 0x80	; 128
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	f0 93 c0 03 	sts	0x03C0, r31
     b80:	e0 93 bf 03 	sts	0x03BF, r30
	while (_1000us > 1000) {
     b84:	e9 3e       	cpi	r30, 0xE9	; 233
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	f8 07       	cpc	r31, r24
     b8a:	68 f1       	brcs	.+90     	; 0xbe6 <__vector_16+0x96>
     b8c:	20 91 c1 03 	lds	r18, 0x03C1
     b90:	30 91 c2 03 	lds	r19, 0x03C2
     b94:	40 91 c3 03 	lds	r20, 0x03C3
     b98:	50 91 c4 03 	lds	r21, 0x03C4
     b9c:	60 91 c5 03 	lds	r22, 0x03C5
     ba0:	70 91 c6 03 	lds	r23, 0x03C6
     ba4:	80 91 c7 03 	lds	r24, 0x03C7
     ba8:	90 91 c8 03 	lds	r25, 0x03C8
		_millis++;
     bac:	a1 e0       	ldi	r26, 0x01	; 1
     bae:	0e 94 0f 0a 	call	0x141e	; 0x141e <__adddi3_s8>
		_1000us -= 1000;
     bb2:	e8 5e       	subi	r30, 0xE8	; 232
     bb4:	f3 40       	sbci	r31, 0x03	; 3

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
	_1000us += 128;
	while (_1000us > 1000) {
     bb6:	e9 3e       	cpi	r30, 0xE9	; 233
     bb8:	a3 e0       	ldi	r26, 0x03	; 3
     bba:	fa 07       	cpc	r31, r26
     bbc:	b8 f7       	brcc	.-18     	; 0xbac <__vector_16+0x5c>
     bbe:	20 93 c1 03 	sts	0x03C1, r18
     bc2:	30 93 c2 03 	sts	0x03C2, r19
     bc6:	40 93 c3 03 	sts	0x03C3, r20
     bca:	50 93 c4 03 	sts	0x03C4, r21
     bce:	60 93 c5 03 	sts	0x03C5, r22
     bd2:	70 93 c6 03 	sts	0x03C6, r23
     bd6:	80 93 c7 03 	sts	0x03C7, r24
     bda:	90 93 c8 03 	sts	0x03C8, r25
     bde:	f0 93 c0 03 	sts	0x03C0, r31
     be2:	e0 93 bf 03 	sts	0x03BF, r30
		_millis++;
		_1000us -= 1000;
	}
}
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	af 91       	pop	r26
     bec:	9f 91       	pop	r25
     bee:	8f 91       	pop	r24
     bf0:	7f 91       	pop	r23
     bf2:	6f 91       	pop	r22
     bf4:	5f 91       	pop	r21
     bf6:	4f 91       	pop	r20
     bf8:	3f 91       	pop	r19
     bfa:	2f 91       	pop	r18
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <_ZN6Millis6millisEv>:

// safe access to millis counter
uint64_t Millis::millis() {
	uint64_t m;
	cli();
     c06:	f8 94       	cli
	m = _millis;
     c08:	20 91 c1 03 	lds	r18, 0x03C1
     c0c:	30 91 c2 03 	lds	r19, 0x03C2
     c10:	40 91 c3 03 	lds	r20, 0x03C3
     c14:	50 91 c4 03 	lds	r21, 0x03C4
     c18:	60 91 c5 03 	lds	r22, 0x03C5
     c1c:	70 91 c6 03 	lds	r23, 0x03C6
     c20:	80 91 c7 03 	lds	r24, 0x03C7
     c24:	90 91 c8 03 	lds	r25, 0x03C8
	sei();
     c28:	78 94       	sei
	return m;
}
     c2a:	08 95       	ret

00000c2c <_ZN6Millis5setupEv>:
	//PORTB |= _BV(PB3); // turn the LED on

	/* interrup setup */
	// prescale timer0 to 1/8th the clock rate
	// overflow timer0 every 0.256 ms
	TCCR0B |= (1<<CS01);
     c2c:	85 b5       	in	r24, 0x25	; 37
     c2e:	82 60       	ori	r24, 0x02	; 2
     c30:	85 bd       	out	0x25, r24	; 37
	// enable timer overflow interrupt
	TIMSK0  |= 1<<TOIE0;
     c32:	ee e6       	ldi	r30, 0x6E	; 110
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	81 60       	ori	r24, 0x01	; 1
     c3a:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
     c3c:	78 94       	sei
     c3e:	08 95       	ret

00000c40 <_Z9pin_setupv>:
   }
	
}

void pin_setup(){
	DDRD &= !_BV(5); //PD5  T1
     c40:	8a b1       	in	r24, 0x0a	; 10
     c42:	1a b8       	out	0x0a, r1	; 10
	//DDRD &= !_BV(3); //INT1
	DDRD |= _BV(7);
     c44:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= _BV(7); //Used to enable the L293D
     c46:	5f 9a       	sbi	0x0b, 7	; 11
     c48:	08 95       	ret

00000c4a <_Z14register_setupv>:
	
}

void register_setup(){
	//Enable T1
	TCCR1B |= _BV(CS10) | _BV(CS11) | _BV(CS12);
     c4a:	e1 e8       	ldi	r30, 0x81	; 129
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	87 60       	ori	r24, 0x07	; 7
     c52:	80 83       	st	Z, r24
     c54:	08 95       	ret

00000c56 <main>:
Menu     myMenu;


int main(void)
{
	pin_setup();
     c56:	0e 94 20 06 	call	0xc40	; 0xc40 <_Z9pin_setupv>
	register_setup();
     c5a:	0e 94 25 06 	call	0xc4a	; 0xc4a <_Z14register_setupv>
	sei();
     c5e:	78 94       	sei
	myMenu.MenuStart();
     c60:	89 ec       	ldi	r24, 0xC9	; 201
     c62:	93 e0       	ldi	r25, 0x03	; 3
     c64:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN4Menu9MenuStartEv>
     c68:	ff cf       	rjmp	.-2      	; 0xc68 <main+0x12>

00000c6a <_GLOBAL__sub_I_myMenu>:
#include "Menu.h"

void pin_setup();
void register_setup();

Menu     myMenu;
     c6a:	89 ec       	ldi	r24, 0xC9	; 201
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN4MenuC1Ev>
     c72:	08 95       	ret

00000c74 <_ZN7StepperC1Ev>:
 *   Sets which wires should control the motor.
 */

Millis myMillis;

Stepper::Stepper()//int number_of_steps, int motor_pin_1, int motor_pin_2, int motor_pin_3, int motor_pin_4
     c74:	fc 01       	movw	r30, r24
{
  step_number = 0;      // which step the motor is on
     c76:	15 86       	std	Z+13, r1	; 0x0d
     c78:	14 86       	std	Z+12, r1	; 0x0c
  speed = 0;        // the motor speed, in revolutions per minute
     c7a:	13 82       	std	Z+3, r1	; 0x03
     c7c:	12 82       	std	Z+2, r1	; 0x02
  direction = 0;      // motor direction
     c7e:	11 82       	std	Z+1, r1	; 0x01
     c80:	10 82       	st	Z, r1
  last_step_time = 0;    // time stamp in ms of the last step taken
     c82:	10 8a       	std	Z+16, r1	; 0x10
     c84:	11 8a       	std	Z+17, r1	; 0x11
     c86:	12 8a       	std	Z+18, r1	; 0x12
     c88:	13 8a       	std	Z+19, r1	; 0x13
  number_of_steps = 2000;
     c8a:	80 ed       	ldi	r24, 0xD0	; 208
     c8c:	97 e0       	ldi	r25, 0x07	; 7
     c8e:	91 87       	std	Z+9, r25	; 0x09
     c90:	80 87       	std	Z+8, r24	; 0x08
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);
  */
  
  DDRB= 0X0F;
     c92:	8f e0       	ldi	r24, 0x0F	; 15
     c94:	84 b9       	out	0x04, r24	; 4
  PORTB &= !_BV(0);
     c96:	85 b1       	in	r24, 0x05	; 5
     c98:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(1);
     c9a:	85 b1       	in	r24, 0x05	; 5
     c9c:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(2);
     c9e:	85 b1       	in	r24, 0x05	; 5
     ca0:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(3);
     ca2:	85 b1       	in	r24, 0x05	; 5
     ca4:	15 b8       	out	0x05, r1	; 5
  
  // pin_count is used by the stepMotor() method:  
  pin_count = 4; 
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	93 87       	std	Z+11, r25	; 0x0b
     cac:	82 87       	std	Z+10, r24	; 0x0a
  
  //Initialize the milis
  
  myMillis.setup();
     cae:	8a ec       	ldi	r24, 0xCA	; 202
     cb0:	93 e0       	ldi	r25, 0x03	; 3
     cb2:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN6Millis5setupEv>
     cb6:	08 95       	ret

00000cb8 <_ZN7Stepper8setSpeedEl>:
/*
  Sets the speed in revs per minute

*/
void Stepper::setSpeed(long whatSpeed)
{
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
     cc6:	6a 01       	movw	r12, r20
     cc8:	7b 01       	movw	r14, r22
  step_delay = 60L * 1000L / this->number_of_steps / whatSpeed;
     cca:	28 85       	ldd	r18, Y+8	; 0x08
     ccc:	39 85       	ldd	r19, Y+9	; 0x09
     cce:	44 27       	eor	r20, r20
     cd0:	37 fd       	sbrc	r19, 7
     cd2:	40 95       	com	r20
     cd4:	54 2f       	mov	r21, r20
     cd6:	60 e6       	ldi	r22, 0x60	; 96
     cd8:	7a ee       	ldi	r23, 0xEA	; 234
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__divmodsi4>
     ce2:	ca 01       	movw	r24, r20
     ce4:	b9 01       	movw	r22, r18
     ce6:	a7 01       	movw	r20, r14
     ce8:	96 01       	movw	r18, r12
     cea:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__divmodsi4>
     cee:	2c 83       	std	Y+4, r18	; 0x04
     cf0:	3d 83       	std	Y+5, r19	; 0x05
     cf2:	4e 83       	std	Y+6, r20	; 0x06
     cf4:	5f 83       	std	Y+7, r21	; 0x07
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	08 95       	ret

00000d04 <_ZN7Stepper9stepMotorEi>:
		PORTB |= _BV(3);
		PORTB &= !_BV(3);
		
	*/
   
	   switch (thisStep) {
     d04:	61 30       	cpi	r22, 0x01	; 1
     d06:	71 05       	cpc	r23, r1
     d08:	91 f0       	breq	.+36     	; 0xd2e <_ZN7Stepper9stepMotorEi+0x2a>
     d0a:	1c f4       	brge	.+6      	; 0xd12 <_ZN7Stepper9stepMotorEi+0xe>
     d0c:	67 2b       	or	r22, r23
     d0e:	41 f0       	breq	.+16     	; 0xd20 <_ZN7Stepper9stepMotorEi+0x1c>
     d10:	08 95       	ret
     d12:	62 30       	cpi	r22, 0x02	; 2
     d14:	71 05       	cpc	r23, r1
     d16:	91 f0       	breq	.+36     	; 0xd3c <_ZN7Stepper9stepMotorEi+0x38>
     d18:	63 30       	cpi	r22, 0x03	; 3
     d1a:	71 05       	cpc	r23, r1
     d1c:	b1 f0       	breq	.+44     	; 0xd4a <_ZN7Stepper9stepMotorEi+0x46>
     d1e:	08 95       	ret
		   
		   case 0:    // 0011
		   PORTB &= !_BV(0);
     d20:	85 b1       	in	r24, 0x05	; 5
     d22:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     d24:	85 b1       	in	r24, 0x05	; 5
     d26:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(3);
     d28:	2b 9a       	sbi	0x05, 3	; 5
		   PORTB |= _BV(2);
     d2a:	2a 9a       	sbi	0x05, 2	; 5

		   break;
     d2c:	08 95       	ret
		   case 1:    // 0101
           PORTB &= !_BV(0);
     d2e:	85 b1       	in	r24, 0x05	; 5
     d30:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     d32:	85 b1       	in	r24, 0x05	; 5
     d34:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(1);
     d36:	29 9a       	sbi	0x05, 1	; 5
		   PORTB |= _BV(3);
     d38:	2b 9a       	sbi	0x05, 3	; 5
		   
		  
		   break;
     d3a:	08 95       	ret
		   case 2:    //1100
		  
		   PORTB &= !_BV(2);
     d3c:	85 b1       	in	r24, 0x05	; 5
     d3e:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     d40:	85 b1       	in	r24, 0x05	; 5
     d42:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(0);
     d44:	28 9a       	sbi	0x05, 0	; 5
		   PORTB |= _BV(1);
     d46:	29 9a       	sbi	0x05, 1	; 5

		   break;
     d48:	08 95       	ret
		   case 3:    //1010
		   PORTB &= !_BV(3);
     d4a:	85 b1       	in	r24, 0x05	; 5
     d4c:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     d4e:	85 b1       	in	r24, 0x05	; 5
     d50:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(2);
     d52:	2a 9a       	sbi	0x05, 2	; 5
		   PORTB |= _BV(0);
     d54:	28 9a       	sbi	0x05, 0	; 5
     d56:	08 95       	ret

00000d58 <_ZN7Stepper4stepEi>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
   the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{  
     d58:	2f 92       	push	r2
     d5a:	3f 92       	push	r3
     d5c:	4f 92       	push	r4
     d5e:	5f 92       	push	r5
     d60:	6f 92       	push	r6
     d62:	7f 92       	push	r7
     d64:	8f 92       	push	r8
     d66:	9f 92       	push	r9
     d68:	af 92       	push	r10
     d6a:	bf 92       	push	r11
     d6c:	cf 92       	push	r12
     d6e:	df 92       	push	r13
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <_ZN7Stepper4stepEi+0x26>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <_ZN7Stepper4stepEi+0x28>
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
  int steps_left = abs(steps_to_move);  // how many steps to take
     d88:	4b 01       	movw	r8, r22
     d8a:	77 23       	and	r23, r23
     d8c:	24 f4       	brge	.+8      	; 0xd96 <_ZN7Stepper4stepEi+0x3e>
     d8e:	88 24       	eor	r8, r8
     d90:	99 24       	eor	r9, r9
     d92:	86 1a       	sub	r8, r22
     d94:	97 0a       	sbc	r9, r23
     d96:	9a 82       	std	Y+2, r9	; 0x02
     d98:	89 82       	std	Y+1, r8	; 0x01
  
  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) {direction = 1;}
     d9a:	16 16       	cp	r1, r22
     d9c:	17 06       	cpc	r1, r23
     d9e:	34 f4       	brge	.+12     	; 0xdac <_ZN7Stepper4stepEi+0x54>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	ab 81       	ldd	r26, Y+3	; 0x03
     da6:	bc 81       	ldd	r27, Y+4	; 0x04
     da8:	8d 93       	st	X+, r24
     daa:	9c 93       	st	X, r25
  if (steps_to_move < 0) {direction = 0;}
     dac:	77 23       	and	r23, r23
     dae:	0c f0       	brlt	.+2      	; 0xdb2 <_ZN7Stepper4stepEi+0x5a>
     db0:	83 c0       	rjmp	.+262    	; 0xeb8 <_ZN7Stepper4stepEi+0x160>
     db2:	eb 81       	ldd	r30, Y+3	; 0x03
     db4:	fc 81       	ldd	r31, Y+4	; 0x04
     db6:	11 82       	std	Z+1, r1	; 0x01
     db8:	10 82       	st	Z, r1
     dba:	7e c0       	rjmp	.+252    	; 0xeb8 <_ZN7Stepper4stepEi+0x160>
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
  // move only if the appropriate delay has passed:
  if (myMillis.millis() - last_step_time >= step_delay) {//this->step_delay
     dbc:	8a ec       	ldi	r24, 0xCA	; 202
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	0e 94 03 06 	call	0xc06	; 0xc06 <_ZN6Millis6millisEv>
     dc4:	ab 81       	ldd	r26, Y+3	; 0x03
     dc6:	bc 81       	ldd	r27, Y+4	; 0x04
     dc8:	50 96       	adiw	r26, 0x10	; 16
     dca:	ed 90       	ld	r14, X+
     dcc:	fd 90       	ld	r15, X+
     dce:	0d 91       	ld	r16, X+
     dd0:	1c 91       	ld	r17, X
     dd2:	53 97       	sbiw	r26, 0x13	; 19
     dd4:	27 01       	movw	r4, r14
     dd6:	38 01       	movw	r6, r16
     dd8:	77 0c       	add	r7, r7
     dda:	44 08       	sbc	r4, r4
     ddc:	54 2c       	mov	r5, r4
     dde:	32 01       	movw	r6, r4
     de0:	ae 2c       	mov	r10, r14
     de2:	bf 2c       	mov	r11, r15
     de4:	c0 2e       	mov	r12, r16
     de6:	d1 2e       	mov	r13, r17
     de8:	e4 2c       	mov	r14, r4
     dea:	f4 2c       	mov	r15, r4
     dec:	04 2d       	mov	r16, r4
     dee:	14 2d       	mov	r17, r4
     df0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__subdi3>
     df4:	f2 2f       	mov	r31, r18
     df6:	e3 2f       	mov	r30, r19
     df8:	14 96       	adiw	r26, 0x04	; 4
     dfa:	0d 91       	ld	r16, X+
     dfc:	1d 91       	ld	r17, X+
     dfe:	2d 91       	ld	r18, X+
     e00:	3c 91       	ld	r19, X
     e02:	17 97       	sbiw	r26, 0x07	; 7
     e04:	18 01       	movw	r2, r16
     e06:	29 01       	movw	r4, r18
     e08:	2f 2f       	mov	r18, r31
     e0a:	3e 2f       	mov	r19, r30
     e0c:	a2 2c       	mov	r10, r2
     e0e:	b3 2c       	mov	r11, r3
     e10:	c4 2c       	mov	r12, r4
     e12:	d5 2c       	mov	r13, r5
     e14:	e1 2c       	mov	r14, r1
     e16:	f1 2c       	mov	r15, r1
     e18:	00 e0       	ldi	r16, 0x00	; 0
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	0e 94 24 0a 	call	0x1448	; 0x1448 <__cmpdi2>
     e20:	68 f2       	brcs	.-102    	; 0xdbc <_ZN7Stepper4stepEi+0x64>
      // get the timeStamp of when you stepped:
      last_step_time = myMillis.millis();
     e22:	8a ec       	ldi	r24, 0xCA	; 202
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	0e 94 03 06 	call	0xc06	; 0xc06 <_ZN6Millis6millisEv>
     e2a:	eb 81       	ldd	r30, Y+3	; 0x03
     e2c:	fc 81       	ldd	r31, Y+4	; 0x04
     e2e:	20 8b       	std	Z+16, r18	; 0x10
     e30:	31 8b       	std	Z+17, r19	; 0x11
     e32:	42 8b       	std	Z+18, r20	; 0x12
     e34:	53 8b       	std	Z+19, r21	; 0x13
      // increment or decrement the step number,
      // depending on direction:
      if (direction == 1) {
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	69 f4       	brne	.+26     	; 0xe58 <_ZN7Stepper4stepEi+0x100>
        step_number++;
     e3e:	84 85       	ldd	r24, Z+12	; 0x0c
     e40:	95 85       	ldd	r25, Z+13	; 0x0d
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	95 87       	std	Z+13, r25	; 0x0d
     e46:	84 87       	std	Z+12, r24	; 0x0c
        if (step_number == number_of_steps) {
     e48:	20 85       	ldd	r18, Z+8	; 0x08
     e4a:	31 85       	ldd	r19, Z+9	; 0x09
     e4c:	82 17       	cp	r24, r18
     e4e:	93 07       	cpc	r25, r19
     e50:	d1 f4       	brne	.+52     	; 0xe86 <_ZN7Stepper4stepEi+0x12e>
          step_number = 0;
     e52:	15 86       	std	Z+13, r1	; 0x0d
     e54:	14 86       	std	Z+12, r1	; 0x0c
     e56:	17 c0       	rjmp	.+46     	; 0xe86 <_ZN7Stepper4stepEi+0x12e>
        }
      } 
      else { 
        if (step_number == 0) {
     e58:	ab 81       	ldd	r26, Y+3	; 0x03
     e5a:	bc 81       	ldd	r27, Y+4	; 0x04
     e5c:	1c 96       	adiw	r26, 0x0c	; 12
     e5e:	8d 91       	ld	r24, X+
     e60:	9c 91       	ld	r25, X
     e62:	1d 97       	sbiw	r26, 0x0d	; 13
     e64:	89 2b       	or	r24, r25
     e66:	41 f4       	brne	.+16     	; 0xe78 <_ZN7Stepper4stepEi+0x120>
         step_number = number_of_steps;
     e68:	18 96       	adiw	r26, 0x08	; 8
     e6a:	8d 91       	ld	r24, X+
     e6c:	9c 91       	ld	r25, X
     e6e:	19 97       	sbiw	r26, 0x09	; 9
     e70:	1d 96       	adiw	r26, 0x0d	; 13
     e72:	9c 93       	st	X, r25
     e74:	8e 93       	st	-X, r24
     e76:	1c 97       	sbiw	r26, 0x0c	; 12
        }
        step_number--;
     e78:	eb 81       	ldd	r30, Y+3	; 0x03
     e7a:	fc 81       	ldd	r31, Y+4	; 0x04
     e7c:	84 85       	ldd	r24, Z+12	; 0x0c
     e7e:	95 85       	ldd	r25, Z+13	; 0x0d
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	95 87       	std	Z+13, r25	; 0x0d
     e84:	84 87       	std	Z+12, r24	; 0x0c
      }
      // decrement the steps left:
      steps_left--;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 4);
     e90:	ab 81       	ldd	r26, Y+3	; 0x03
     e92:	bc 81       	ldd	r27, Y+4	; 0x04
     e94:	1c 96       	adiw	r26, 0x0c	; 12
     e96:	6d 91       	ld	r22, X+
     e98:	7c 91       	ld	r23, X
     e9a:	1d 97       	sbiw	r26, 0x0d	; 13
     e9c:	63 70       	andi	r22, 0x03	; 3
     e9e:	70 78       	andi	r23, 0x80	; 128
     ea0:	77 23       	and	r23, r23
     ea2:	34 f4       	brge	.+12     	; 0xeb0 <_ZN7Stepper4stepEi+0x158>
     ea4:	61 50       	subi	r22, 0x01	; 1
     ea6:	71 09       	sbc	r23, r1
     ea8:	6c 6f       	ori	r22, 0xFC	; 252
     eaa:	7f 6f       	ori	r23, 0xFF	; 255
     eac:	6f 5f       	subi	r22, 0xFF	; 255
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN7Stepper9stepMotorEi>
  if (steps_to_move > 0) {direction = 1;}
  if (steps_to_move < 0) {direction = 0;}
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
     eb8:	e9 81       	ldd	r30, Y+1	; 0x01
     eba:	fa 81       	ldd	r31, Y+2	; 0x02
     ebc:	1e 16       	cp	r1, r30
     ebe:	1f 06       	cpc	r1, r31
     ec0:	0c f4       	brge	.+2      	; 0xec4 <_ZN7Stepper4stepEi+0x16c>
     ec2:	7c cf       	rjmp	.-264    	; 0xdbc <_ZN7Stepper4stepEi+0x64>
      steps_left--;
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 4);
    }
  }
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	9f 90       	pop	r9
     ee2:	8f 90       	pop	r8
     ee4:	7f 90       	pop	r7
     ee6:	6f 90       	pop	r6
     ee8:	5f 90       	pop	r5
     eea:	4f 90       	pop	r4
     eec:	3f 90       	pop	r3
     eee:	2f 90       	pop	r2
     ef0:	08 95       	ret

00000ef2 <_ZN7Stepper8motorOffEv>:
{
     //digitalWrite(motor_pin_1, LOW);
     //digitalWrite(motor_pin_2, LOW);
     //digitalWrite(motor_pin_3, LOW);
     //digitalWrite(motor_pin_4, LOW);
	  PORTB &= !_BV(0);
     ef2:	85 b1       	in	r24, 0x05	; 5
     ef4:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(1);
     ef6:	85 b1       	in	r24, 0x05	; 5
     ef8:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(2);
     efa:	85 b1       	in	r24, 0x05	; 5
     efc:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(3);
     efe:	85 b1       	in	r24, 0x05	; 5
     f00:	15 b8       	out	0x05, r1	; 5
     f02:	08 95       	ret

00000f04 <_GLOBAL__sub_I_myMillis>:
/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */

Millis myMillis;
     f04:	8a ec       	ldi	r24, 0xCA	; 202
     f06:	93 e0       	ldi	r25, 0x03	; 3
     f08:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6MillisC1Ev>
     f0c:	08 95       	ret

00000f0e <_ZN8UARTtoolC1Ev>:
#include "UARTtool.h"
#include <avr/io.h>
#include <string.h>

UARTtool::UARTtool(){
	UBRR0H = (BAUDRATE>>8);                      // shift the register right by 8 bits
     f0e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;                           // set baud rate
     f12:	87 e6       	ldi	r24, 0x67	; 103
     f14:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B|= (1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);                // enable receiver and transmitter
     f18:	e1 ec       	ldi	r30, 0xC1	; 193
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	88 69       	ori	r24, 0x98	; 152
     f20:	80 83       	st	Z, r24
	UCSR0C|= (0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);   // 8bit data format
     f22:	e2 ec       	ldi	r30, 0xC2	; 194
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	86 60       	ori	r24, 0x06	; 6
     f2a:	80 83       	st	Z, r24
     f2c:	08 95       	ret

00000f2e <_ZN8UARTtool13uart_transmitEc>:
	
}

void UARTtool::uart_transmit (char data){
	while (!( UCSR0A & (1<<UDRE0)));                // wait while register is free
     f2e:	e0 ec       	ldi	r30, 0xC0	; 192
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	85 ff       	sbrs	r24, 5
     f36:	fd cf       	rjmp	.-6      	; 0xf32 <_ZN8UARTtool13uart_transmitEc+0x4>
	UDR0 = data;
     f38:	60 93 c6 00 	sts	0x00C6, r22
     f3c:	08 95       	ret

00000f3e <_ZN8UARTtool20uart_transmit_stringEPc>:
}

void UARTtool::uart_transmit_string(char data[]){
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	7c 01       	movw	r14, r24
	
	int i= strlen(data);
     f50:	fb 01       	movw	r30, r22
     f52:	01 90       	ld	r0, Z+
     f54:	00 20       	and	r0, r0
     f56:	e9 f7       	brne	.-6      	; 0xf52 <_ZN8UARTtool20uart_transmit_stringEPc+0x14>
     f58:	31 97       	sbiw	r30, 0x01	; 1
     f5a:	6f 01       	movw	r12, r30
     f5c:	c6 1a       	sub	r12, r22
     f5e:	d7 0a       	sbc	r13, r23
	for (int j=0;j<=i;j++)
     f60:	6a f0       	brmi	.+26     	; 0xf7c <_ZN8UARTtool20uart_transmit_stringEPc+0x3e>
     f62:	8b 01       	movw	r16, r22
     f64:	c0 e0       	ldi	r28, 0x00	; 0
     f66:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uart_transmit(data[j]);
     f68:	f8 01       	movw	r30, r16
     f6a:	61 91       	ld	r22, Z+
     f6c:	8f 01       	movw	r16, r30
     f6e:	c7 01       	movw	r24, r14
     f70:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN8UARTtool13uart_transmitEc>
}

void UARTtool::uart_transmit_string(char data[]){
	
	int i= strlen(data);
	for (int j=0;j<=i;j++)
     f74:	21 96       	adiw	r28, 0x01	; 1
     f76:	cc 16       	cp	r12, r28
     f78:	dd 06       	cpc	r13, r29
     f7a:	b4 f7       	brge	.-20     	; 0xf68 <_ZN8UARTtool20uart_transmit_stringEPc+0x2a>
	{
		uart_transmit(data[j]);
		
	}
	uart_transmit(0x0A);
     f7c:	6a e0       	ldi	r22, 0x0A	; 10
     f7e:	c7 01       	movw	r24, r14
     f80:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN8UARTtool13uart_transmitEc>
	uart_transmit(0x0D);//newline
     f84:	6d e0       	ldi	r22, 0x0D	; 13
     f86:	c7 01       	movw	r24, r14
     f88:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN8UARTtool13uart_transmitEc>
	
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	08 95       	ret

00000f9e <__subsf3>:
     f9e:	50 58       	subi	r21, 0x80	; 128

00000fa0 <__addsf3>:
     fa0:	bb 27       	eor	r27, r27
     fa2:	aa 27       	eor	r26, r26
     fa4:	0e d0       	rcall	.+28     	; 0xfc2 <__addsf3x>
     fa6:	75 c1       	rjmp	.+746    	; 0x1292 <__fp_round>
     fa8:	66 d1       	rcall	.+716    	; 0x1276 <__fp_pscA>
     faa:	30 f0       	brcs	.+12     	; 0xfb8 <__addsf3+0x18>
     fac:	6b d1       	rcall	.+726    	; 0x1284 <__fp_pscB>
     fae:	20 f0       	brcs	.+8      	; 0xfb8 <__addsf3+0x18>
     fb0:	31 f4       	brne	.+12     	; 0xfbe <__addsf3+0x1e>
     fb2:	9f 3f       	cpi	r25, 0xFF	; 255
     fb4:	11 f4       	brne	.+4      	; 0xfba <__addsf3+0x1a>
     fb6:	1e f4       	brtc	.+6      	; 0xfbe <__addsf3+0x1e>
     fb8:	5b c1       	rjmp	.+694    	; 0x1270 <__fp_nan>
     fba:	0e f4       	brtc	.+2      	; 0xfbe <__addsf3+0x1e>
     fbc:	e0 95       	com	r30
     fbe:	e7 fb       	bst	r30, 7
     fc0:	51 c1       	rjmp	.+674    	; 0x1264 <__fp_inf>

00000fc2 <__addsf3x>:
     fc2:	e9 2f       	mov	r30, r25
     fc4:	77 d1       	rcall	.+750    	; 0x12b4 <__fp_split3>
     fc6:	80 f3       	brcs	.-32     	; 0xfa8 <__addsf3+0x8>
     fc8:	ba 17       	cp	r27, r26
     fca:	62 07       	cpc	r22, r18
     fcc:	73 07       	cpc	r23, r19
     fce:	84 07       	cpc	r24, r20
     fd0:	95 07       	cpc	r25, r21
     fd2:	18 f0       	brcs	.+6      	; 0xfda <__addsf3x+0x18>
     fd4:	71 f4       	brne	.+28     	; 0xff2 <__addsf3x+0x30>
     fd6:	9e f5       	brtc	.+102    	; 0x103e <__addsf3x+0x7c>
     fd8:	8f c1       	rjmp	.+798    	; 0x12f8 <__fp_zero>
     fda:	0e f4       	brtc	.+2      	; 0xfde <__addsf3x+0x1c>
     fdc:	e0 95       	com	r30
     fde:	0b 2e       	mov	r0, r27
     fe0:	ba 2f       	mov	r27, r26
     fe2:	a0 2d       	mov	r26, r0
     fe4:	0b 01       	movw	r0, r22
     fe6:	b9 01       	movw	r22, r18
     fe8:	90 01       	movw	r18, r0
     fea:	0c 01       	movw	r0, r24
     fec:	ca 01       	movw	r24, r20
     fee:	a0 01       	movw	r20, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	ff 27       	eor	r31, r31
     ff4:	59 1b       	sub	r21, r25
     ff6:	99 f0       	breq	.+38     	; 0x101e <__addsf3x+0x5c>
     ff8:	59 3f       	cpi	r21, 0xF9	; 249
     ffa:	50 f4       	brcc	.+20     	; 0x1010 <__addsf3x+0x4e>
     ffc:	50 3e       	cpi	r21, 0xE0	; 224
     ffe:	68 f1       	brcs	.+90     	; 0x105a <__addsf3x+0x98>
    1000:	1a 16       	cp	r1, r26
    1002:	f0 40       	sbci	r31, 0x00	; 0
    1004:	a2 2f       	mov	r26, r18
    1006:	23 2f       	mov	r18, r19
    1008:	34 2f       	mov	r19, r20
    100a:	44 27       	eor	r20, r20
    100c:	58 5f       	subi	r21, 0xF8	; 248
    100e:	f3 cf       	rjmp	.-26     	; 0xff6 <__addsf3x+0x34>
    1010:	46 95       	lsr	r20
    1012:	37 95       	ror	r19
    1014:	27 95       	ror	r18
    1016:	a7 95       	ror	r26
    1018:	f0 40       	sbci	r31, 0x00	; 0
    101a:	53 95       	inc	r21
    101c:	c9 f7       	brne	.-14     	; 0x1010 <__addsf3x+0x4e>
    101e:	7e f4       	brtc	.+30     	; 0x103e <__addsf3x+0x7c>
    1020:	1f 16       	cp	r1, r31
    1022:	ba 0b       	sbc	r27, r26
    1024:	62 0b       	sbc	r22, r18
    1026:	73 0b       	sbc	r23, r19
    1028:	84 0b       	sbc	r24, r20
    102a:	ba f0       	brmi	.+46     	; 0x105a <__addsf3x+0x98>
    102c:	91 50       	subi	r25, 0x01	; 1
    102e:	a1 f0       	breq	.+40     	; 0x1058 <__addsf3x+0x96>
    1030:	ff 0f       	add	r31, r31
    1032:	bb 1f       	adc	r27, r27
    1034:	66 1f       	adc	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	c2 f7       	brpl	.-16     	; 0x102c <__addsf3x+0x6a>
    103c:	0e c0       	rjmp	.+28     	; 0x105a <__addsf3x+0x98>
    103e:	ba 0f       	add	r27, r26
    1040:	62 1f       	adc	r22, r18
    1042:	73 1f       	adc	r23, r19
    1044:	84 1f       	adc	r24, r20
    1046:	48 f4       	brcc	.+18     	; 0x105a <__addsf3x+0x98>
    1048:	87 95       	ror	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	b7 95       	ror	r27
    1050:	f7 95       	ror	r31
    1052:	9e 3f       	cpi	r25, 0xFE	; 254
    1054:	08 f0       	brcs	.+2      	; 0x1058 <__addsf3x+0x96>
    1056:	b3 cf       	rjmp	.-154    	; 0xfbe <__addsf3+0x1e>
    1058:	93 95       	inc	r25
    105a:	88 0f       	add	r24, r24
    105c:	08 f0       	brcs	.+2      	; 0x1060 <__addsf3x+0x9e>
    105e:	99 27       	eor	r25, r25
    1060:	ee 0f       	add	r30, r30
    1062:	97 95       	ror	r25
    1064:	87 95       	ror	r24
    1066:	08 95       	ret

00001068 <__cmpsf2>:
    1068:	d9 d0       	rcall	.+434    	; 0x121c <__fp_cmp>
    106a:	08 f4       	brcc	.+2      	; 0x106e <__cmpsf2+0x6>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	08 95       	ret

00001070 <__divsf3>:
    1070:	0c d0       	rcall	.+24     	; 0x108a <__divsf3x>
    1072:	0f c1       	rjmp	.+542    	; 0x1292 <__fp_round>
    1074:	07 d1       	rcall	.+526    	; 0x1284 <__fp_pscB>
    1076:	40 f0       	brcs	.+16     	; 0x1088 <__divsf3+0x18>
    1078:	fe d0       	rcall	.+508    	; 0x1276 <__fp_pscA>
    107a:	30 f0       	brcs	.+12     	; 0x1088 <__divsf3+0x18>
    107c:	21 f4       	brne	.+8      	; 0x1086 <__divsf3+0x16>
    107e:	5f 3f       	cpi	r21, 0xFF	; 255
    1080:	19 f0       	breq	.+6      	; 0x1088 <__divsf3+0x18>
    1082:	f0 c0       	rjmp	.+480    	; 0x1264 <__fp_inf>
    1084:	51 11       	cpse	r21, r1
    1086:	39 c1       	rjmp	.+626    	; 0x12fa <__fp_szero>
    1088:	f3 c0       	rjmp	.+486    	; 0x1270 <__fp_nan>

0000108a <__divsf3x>:
    108a:	14 d1       	rcall	.+552    	; 0x12b4 <__fp_split3>
    108c:	98 f3       	brcs	.-26     	; 0x1074 <__divsf3+0x4>

0000108e <__divsf3_pse>:
    108e:	99 23       	and	r25, r25
    1090:	c9 f3       	breq	.-14     	; 0x1084 <__divsf3+0x14>
    1092:	55 23       	and	r21, r21
    1094:	b1 f3       	breq	.-20     	; 0x1082 <__divsf3+0x12>
    1096:	95 1b       	sub	r25, r21
    1098:	55 0b       	sbc	r21, r21
    109a:	bb 27       	eor	r27, r27
    109c:	aa 27       	eor	r26, r26
    109e:	62 17       	cp	r22, r18
    10a0:	73 07       	cpc	r23, r19
    10a2:	84 07       	cpc	r24, r20
    10a4:	38 f0       	brcs	.+14     	; 0x10b4 <__divsf3_pse+0x26>
    10a6:	9f 5f       	subi	r25, 0xFF	; 255
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	44 1f       	adc	r20, r20
    10b0:	aa 1f       	adc	r26, r26
    10b2:	a9 f3       	breq	.-22     	; 0x109e <__divsf3_pse+0x10>
    10b4:	33 d0       	rcall	.+102    	; 0x111c <__divsf3_pse+0x8e>
    10b6:	0e 2e       	mov	r0, r30
    10b8:	3a f0       	brmi	.+14     	; 0x10c8 <__divsf3_pse+0x3a>
    10ba:	e0 e8       	ldi	r30, 0x80	; 128
    10bc:	30 d0       	rcall	.+96     	; 0x111e <__divsf3_pse+0x90>
    10be:	91 50       	subi	r25, 0x01	; 1
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	e6 95       	lsr	r30
    10c4:	00 1c       	adc	r0, r0
    10c6:	ca f7       	brpl	.-14     	; 0x10ba <__divsf3_pse+0x2c>
    10c8:	29 d0       	rcall	.+82     	; 0x111c <__divsf3_pse+0x8e>
    10ca:	fe 2f       	mov	r31, r30
    10cc:	27 d0       	rcall	.+78     	; 0x111c <__divsf3_pse+0x8e>
    10ce:	66 0f       	add	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 1f       	adc	r24, r24
    10d4:	bb 1f       	adc	r27, r27
    10d6:	26 17       	cp	r18, r22
    10d8:	37 07       	cpc	r19, r23
    10da:	48 07       	cpc	r20, r24
    10dc:	ab 07       	cpc	r26, r27
    10de:	b0 e8       	ldi	r27, 0x80	; 128
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <__divsf3_pse+0x56>
    10e2:	bb 0b       	sbc	r27, r27
    10e4:	80 2d       	mov	r24, r0
    10e6:	bf 01       	movw	r22, r30
    10e8:	ff 27       	eor	r31, r31
    10ea:	93 58       	subi	r25, 0x83	; 131
    10ec:	5f 4f       	sbci	r21, 0xFF	; 255
    10ee:	2a f0       	brmi	.+10     	; 0x10fa <__divsf3_pse+0x6c>
    10f0:	9e 3f       	cpi	r25, 0xFE	; 254
    10f2:	51 05       	cpc	r21, r1
    10f4:	68 f0       	brcs	.+26     	; 0x1110 <__divsf3_pse+0x82>
    10f6:	b6 c0       	rjmp	.+364    	; 0x1264 <__fp_inf>
    10f8:	00 c1       	rjmp	.+512    	; 0x12fa <__fp_szero>
    10fa:	5f 3f       	cpi	r21, 0xFF	; 255
    10fc:	ec f3       	brlt	.-6      	; 0x10f8 <__divsf3_pse+0x6a>
    10fe:	98 3e       	cpi	r25, 0xE8	; 232
    1100:	dc f3       	brlt	.-10     	; 0x10f8 <__divsf3_pse+0x6a>
    1102:	86 95       	lsr	r24
    1104:	77 95       	ror	r23
    1106:	67 95       	ror	r22
    1108:	b7 95       	ror	r27
    110a:	f7 95       	ror	r31
    110c:	9f 5f       	subi	r25, 0xFF	; 255
    110e:	c9 f7       	brne	.-14     	; 0x1102 <__divsf3_pse+0x74>
    1110:	88 0f       	add	r24, r24
    1112:	91 1d       	adc	r25, r1
    1114:	96 95       	lsr	r25
    1116:	87 95       	ror	r24
    1118:	97 f9       	bld	r25, 7
    111a:	08 95       	ret
    111c:	e1 e0       	ldi	r30, 0x01	; 1
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	88 1f       	adc	r24, r24
    1124:	bb 1f       	adc	r27, r27
    1126:	62 17       	cp	r22, r18
    1128:	73 07       	cpc	r23, r19
    112a:	84 07       	cpc	r24, r20
    112c:	ba 07       	cpc	r27, r26
    112e:	20 f0       	brcs	.+8      	; 0x1138 <__divsf3_pse+0xaa>
    1130:	62 1b       	sub	r22, r18
    1132:	73 0b       	sbc	r23, r19
    1134:	84 0b       	sbc	r24, r20
    1136:	ba 0b       	sbc	r27, r26
    1138:	ee 1f       	adc	r30, r30
    113a:	88 f7       	brcc	.-30     	; 0x111e <__divsf3_pse+0x90>
    113c:	e0 95       	com	r30
    113e:	08 95       	ret

00001140 <__fixsfsi>:
    1140:	04 d0       	rcall	.+8      	; 0x114a <__fixunssfsi>
    1142:	68 94       	set
    1144:	b1 11       	cpse	r27, r1
    1146:	d9 c0       	rjmp	.+434    	; 0x12fa <__fp_szero>
    1148:	08 95       	ret

0000114a <__fixunssfsi>:
    114a:	bc d0       	rcall	.+376    	; 0x12c4 <__fp_splitA>
    114c:	88 f0       	brcs	.+34     	; 0x1170 <__fixunssfsi+0x26>
    114e:	9f 57       	subi	r25, 0x7F	; 127
    1150:	90 f0       	brcs	.+36     	; 0x1176 <__fixunssfsi+0x2c>
    1152:	b9 2f       	mov	r27, r25
    1154:	99 27       	eor	r25, r25
    1156:	b7 51       	subi	r27, 0x17	; 23
    1158:	a0 f0       	brcs	.+40     	; 0x1182 <__fixunssfsi+0x38>
    115a:	d1 f0       	breq	.+52     	; 0x1190 <__fixunssfsi+0x46>
    115c:	66 0f       	add	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	88 1f       	adc	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	1a f0       	brmi	.+6      	; 0x116c <__fixunssfsi+0x22>
    1166:	ba 95       	dec	r27
    1168:	c9 f7       	brne	.-14     	; 0x115c <__fixunssfsi+0x12>
    116a:	12 c0       	rjmp	.+36     	; 0x1190 <__fixunssfsi+0x46>
    116c:	b1 30       	cpi	r27, 0x01	; 1
    116e:	81 f0       	breq	.+32     	; 0x1190 <__fixunssfsi+0x46>
    1170:	c3 d0       	rcall	.+390    	; 0x12f8 <__fp_zero>
    1172:	b1 e0       	ldi	r27, 0x01	; 1
    1174:	08 95       	ret
    1176:	c0 c0       	rjmp	.+384    	; 0x12f8 <__fp_zero>
    1178:	67 2f       	mov	r22, r23
    117a:	78 2f       	mov	r23, r24
    117c:	88 27       	eor	r24, r24
    117e:	b8 5f       	subi	r27, 0xF8	; 248
    1180:	39 f0       	breq	.+14     	; 0x1190 <__fixunssfsi+0x46>
    1182:	b9 3f       	cpi	r27, 0xF9	; 249
    1184:	cc f3       	brlt	.-14     	; 0x1178 <__fixunssfsi+0x2e>
    1186:	86 95       	lsr	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	b3 95       	inc	r27
    118e:	d9 f7       	brne	.-10     	; 0x1186 <__fixunssfsi+0x3c>
    1190:	3e f4       	brtc	.+14     	; 0x11a0 <__fixunssfsi+0x56>
    1192:	90 95       	com	r25
    1194:	80 95       	com	r24
    1196:	70 95       	com	r23
    1198:	61 95       	neg	r22
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	8f 4f       	sbci	r24, 0xFF	; 255
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	08 95       	ret

000011a2 <__floatunsisf>:
    11a2:	e8 94       	clt
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <__floatsisf+0x12>

000011a6 <__floatsisf>:
    11a6:	97 fb       	bst	r25, 7
    11a8:	3e f4       	brtc	.+14     	; 0x11b8 <__floatsisf+0x12>
    11aa:	90 95       	com	r25
    11ac:	80 95       	com	r24
    11ae:	70 95       	com	r23
    11b0:	61 95       	neg	r22
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	99 23       	and	r25, r25
    11ba:	a9 f0       	breq	.+42     	; 0x11e6 <__floatsisf+0x40>
    11bc:	f9 2f       	mov	r31, r25
    11be:	96 e9       	ldi	r25, 0x96	; 150
    11c0:	bb 27       	eor	r27, r27
    11c2:	93 95       	inc	r25
    11c4:	f6 95       	lsr	r31
    11c6:	87 95       	ror	r24
    11c8:	77 95       	ror	r23
    11ca:	67 95       	ror	r22
    11cc:	b7 95       	ror	r27
    11ce:	f1 11       	cpse	r31, r1
    11d0:	f8 cf       	rjmp	.-16     	; 0x11c2 <__floatsisf+0x1c>
    11d2:	fa f4       	brpl	.+62     	; 0x1212 <__floatsisf+0x6c>
    11d4:	bb 0f       	add	r27, r27
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__floatsisf+0x36>
    11d8:	60 ff       	sbrs	r22, 0
    11da:	1b c0       	rjmp	.+54     	; 0x1212 <__floatsisf+0x6c>
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	8f 4f       	sbci	r24, 0xFF	; 255
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	16 c0       	rjmp	.+44     	; 0x1212 <__floatsisf+0x6c>
    11e6:	88 23       	and	r24, r24
    11e8:	11 f0       	breq	.+4      	; 0x11ee <__floatsisf+0x48>
    11ea:	96 e9       	ldi	r25, 0x96	; 150
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <__floatsisf+0x6a>
    11ee:	77 23       	and	r23, r23
    11f0:	21 f0       	breq	.+8      	; 0x11fa <__floatsisf+0x54>
    11f2:	9e e8       	ldi	r25, 0x8E	; 142
    11f4:	87 2f       	mov	r24, r23
    11f6:	76 2f       	mov	r23, r22
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <__floatsisf+0x5e>
    11fa:	66 23       	and	r22, r22
    11fc:	71 f0       	breq	.+28     	; 0x121a <__floatsisf+0x74>
    11fe:	96 e8       	ldi	r25, 0x86	; 134
    1200:	86 2f       	mov	r24, r22
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	2a f0       	brmi	.+10     	; 0x1212 <__floatsisf+0x6c>
    1208:	9a 95       	dec	r25
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	da f7       	brpl	.-10     	; 0x1208 <__floatsisf+0x62>
    1212:	88 0f       	add	r24, r24
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	97 f9       	bld	r25, 7
    121a:	08 95       	ret

0000121c <__fp_cmp>:
    121c:	99 0f       	add	r25, r25
    121e:	00 08       	sbc	r0, r0
    1220:	55 0f       	add	r21, r21
    1222:	aa 0b       	sbc	r26, r26
    1224:	e0 e8       	ldi	r30, 0x80	; 128
    1226:	fe ef       	ldi	r31, 0xFE	; 254
    1228:	16 16       	cp	r1, r22
    122a:	17 06       	cpc	r1, r23
    122c:	e8 07       	cpc	r30, r24
    122e:	f9 07       	cpc	r31, r25
    1230:	c0 f0       	brcs	.+48     	; 0x1262 <__fp_cmp+0x46>
    1232:	12 16       	cp	r1, r18
    1234:	13 06       	cpc	r1, r19
    1236:	e4 07       	cpc	r30, r20
    1238:	f5 07       	cpc	r31, r21
    123a:	98 f0       	brcs	.+38     	; 0x1262 <__fp_cmp+0x46>
    123c:	62 1b       	sub	r22, r18
    123e:	73 0b       	sbc	r23, r19
    1240:	84 0b       	sbc	r24, r20
    1242:	95 0b       	sbc	r25, r21
    1244:	39 f4       	brne	.+14     	; 0x1254 <__fp_cmp+0x38>
    1246:	0a 26       	eor	r0, r26
    1248:	61 f0       	breq	.+24     	; 0x1262 <__fp_cmp+0x46>
    124a:	23 2b       	or	r18, r19
    124c:	24 2b       	or	r18, r20
    124e:	25 2b       	or	r18, r21
    1250:	21 f4       	brne	.+8      	; 0x125a <__fp_cmp+0x3e>
    1252:	08 95       	ret
    1254:	0a 26       	eor	r0, r26
    1256:	09 f4       	brne	.+2      	; 0x125a <__fp_cmp+0x3e>
    1258:	a1 40       	sbci	r26, 0x01	; 1
    125a:	a6 95       	lsr	r26
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	81 1d       	adc	r24, r1
    1260:	81 1d       	adc	r24, r1
    1262:	08 95       	ret

00001264 <__fp_inf>:
    1264:	97 f9       	bld	r25, 7
    1266:	9f 67       	ori	r25, 0x7F	; 127
    1268:	80 e8       	ldi	r24, 0x80	; 128
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	08 95       	ret

00001270 <__fp_nan>:
    1270:	9f ef       	ldi	r25, 0xFF	; 255
    1272:	80 ec       	ldi	r24, 0xC0	; 192
    1274:	08 95       	ret

00001276 <__fp_pscA>:
    1276:	00 24       	eor	r0, r0
    1278:	0a 94       	dec	r0
    127a:	16 16       	cp	r1, r22
    127c:	17 06       	cpc	r1, r23
    127e:	18 06       	cpc	r1, r24
    1280:	09 06       	cpc	r0, r25
    1282:	08 95       	ret

00001284 <__fp_pscB>:
    1284:	00 24       	eor	r0, r0
    1286:	0a 94       	dec	r0
    1288:	12 16       	cp	r1, r18
    128a:	13 06       	cpc	r1, r19
    128c:	14 06       	cpc	r1, r20
    128e:	05 06       	cpc	r0, r21
    1290:	08 95       	ret

00001292 <__fp_round>:
    1292:	09 2e       	mov	r0, r25
    1294:	03 94       	inc	r0
    1296:	00 0c       	add	r0, r0
    1298:	11 f4       	brne	.+4      	; 0x129e <__fp_round+0xc>
    129a:	88 23       	and	r24, r24
    129c:	52 f0       	brmi	.+20     	; 0x12b2 <__fp_round+0x20>
    129e:	bb 0f       	add	r27, r27
    12a0:	40 f4       	brcc	.+16     	; 0x12b2 <__fp_round+0x20>
    12a2:	bf 2b       	or	r27, r31
    12a4:	11 f4       	brne	.+4      	; 0x12aa <__fp_round+0x18>
    12a6:	60 ff       	sbrs	r22, 0
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <__fp_round+0x20>
    12aa:	6f 5f       	subi	r22, 0xFF	; 255
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	08 95       	ret

000012b4 <__fp_split3>:
    12b4:	57 fd       	sbrc	r21, 7
    12b6:	90 58       	subi	r25, 0x80	; 128
    12b8:	44 0f       	add	r20, r20
    12ba:	55 1f       	adc	r21, r21
    12bc:	59 f0       	breq	.+22     	; 0x12d4 <__fp_splitA+0x10>
    12be:	5f 3f       	cpi	r21, 0xFF	; 255
    12c0:	71 f0       	breq	.+28     	; 0x12de <__fp_splitA+0x1a>
    12c2:	47 95       	ror	r20

000012c4 <__fp_splitA>:
    12c4:	88 0f       	add	r24, r24
    12c6:	97 fb       	bst	r25, 7
    12c8:	99 1f       	adc	r25, r25
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <__fp_splitA+0x20>
    12cc:	9f 3f       	cpi	r25, 0xFF	; 255
    12ce:	79 f0       	breq	.+30     	; 0x12ee <__fp_splitA+0x2a>
    12d0:	87 95       	ror	r24
    12d2:	08 95       	ret
    12d4:	12 16       	cp	r1, r18
    12d6:	13 06       	cpc	r1, r19
    12d8:	14 06       	cpc	r1, r20
    12da:	55 1f       	adc	r21, r21
    12dc:	f2 cf       	rjmp	.-28     	; 0x12c2 <__fp_split3+0xe>
    12de:	46 95       	lsr	r20
    12e0:	f1 df       	rcall	.-30     	; 0x12c4 <__fp_splitA>
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <__fp_splitA+0x30>
    12e4:	16 16       	cp	r1, r22
    12e6:	17 06       	cpc	r1, r23
    12e8:	18 06       	cpc	r1, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	f1 cf       	rjmp	.-30     	; 0x12d0 <__fp_splitA+0xc>
    12ee:	86 95       	lsr	r24
    12f0:	71 05       	cpc	r23, r1
    12f2:	61 05       	cpc	r22, r1
    12f4:	08 94       	sec
    12f6:	08 95       	ret

000012f8 <__fp_zero>:
    12f8:	e8 94       	clt

000012fa <__fp_szero>:
    12fa:	bb 27       	eor	r27, r27
    12fc:	66 27       	eor	r22, r22
    12fe:	77 27       	eor	r23, r23
    1300:	cb 01       	movw	r24, r22
    1302:	97 f9       	bld	r25, 7
    1304:	08 95       	ret

00001306 <__gesf2>:
    1306:	8a df       	rcall	.-236    	; 0x121c <__fp_cmp>
    1308:	08 f4       	brcc	.+2      	; 0x130c <__gesf2+0x6>
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	08 95       	ret

0000130e <__mulsf3>:
    130e:	0b d0       	rcall	.+22     	; 0x1326 <__mulsf3x>
    1310:	c0 cf       	rjmp	.-128    	; 0x1292 <__fp_round>
    1312:	b1 df       	rcall	.-158    	; 0x1276 <__fp_pscA>
    1314:	28 f0       	brcs	.+10     	; 0x1320 <__mulsf3+0x12>
    1316:	b6 df       	rcall	.-148    	; 0x1284 <__fp_pscB>
    1318:	18 f0       	brcs	.+6      	; 0x1320 <__mulsf3+0x12>
    131a:	95 23       	and	r25, r21
    131c:	09 f0       	breq	.+2      	; 0x1320 <__mulsf3+0x12>
    131e:	a2 cf       	rjmp	.-188    	; 0x1264 <__fp_inf>
    1320:	a7 cf       	rjmp	.-178    	; 0x1270 <__fp_nan>
    1322:	11 24       	eor	r1, r1
    1324:	ea cf       	rjmp	.-44     	; 0x12fa <__fp_szero>

00001326 <__mulsf3x>:
    1326:	c6 df       	rcall	.-116    	; 0x12b4 <__fp_split3>
    1328:	a0 f3       	brcs	.-24     	; 0x1312 <__mulsf3+0x4>

0000132a <__mulsf3_pse>:
    132a:	95 9f       	mul	r25, r21
    132c:	d1 f3       	breq	.-12     	; 0x1322 <__mulsf3+0x14>
    132e:	95 0f       	add	r25, r21
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	55 1f       	adc	r21, r21
    1334:	62 9f       	mul	r22, r18
    1336:	f0 01       	movw	r30, r0
    1338:	72 9f       	mul	r23, r18
    133a:	bb 27       	eor	r27, r27
    133c:	f0 0d       	add	r31, r0
    133e:	b1 1d       	adc	r27, r1
    1340:	63 9f       	mul	r22, r19
    1342:	aa 27       	eor	r26, r26
    1344:	f0 0d       	add	r31, r0
    1346:	b1 1d       	adc	r27, r1
    1348:	aa 1f       	adc	r26, r26
    134a:	64 9f       	mul	r22, r20
    134c:	66 27       	eor	r22, r22
    134e:	b0 0d       	add	r27, r0
    1350:	a1 1d       	adc	r26, r1
    1352:	66 1f       	adc	r22, r22
    1354:	82 9f       	mul	r24, r18
    1356:	22 27       	eor	r18, r18
    1358:	b0 0d       	add	r27, r0
    135a:	a1 1d       	adc	r26, r1
    135c:	62 1f       	adc	r22, r18
    135e:	73 9f       	mul	r23, r19
    1360:	b0 0d       	add	r27, r0
    1362:	a1 1d       	adc	r26, r1
    1364:	62 1f       	adc	r22, r18
    1366:	83 9f       	mul	r24, r19
    1368:	a0 0d       	add	r26, r0
    136a:	61 1d       	adc	r22, r1
    136c:	22 1f       	adc	r18, r18
    136e:	74 9f       	mul	r23, r20
    1370:	33 27       	eor	r19, r19
    1372:	a0 0d       	add	r26, r0
    1374:	61 1d       	adc	r22, r1
    1376:	23 1f       	adc	r18, r19
    1378:	84 9f       	mul	r24, r20
    137a:	60 0d       	add	r22, r0
    137c:	21 1d       	adc	r18, r1
    137e:	82 2f       	mov	r24, r18
    1380:	76 2f       	mov	r23, r22
    1382:	6a 2f       	mov	r22, r26
    1384:	11 24       	eor	r1, r1
    1386:	9f 57       	subi	r25, 0x7F	; 127
    1388:	50 40       	sbci	r21, 0x00	; 0
    138a:	8a f0       	brmi	.+34     	; 0x13ae <__mulsf3_pse+0x84>
    138c:	e1 f0       	breq	.+56     	; 0x13c6 <__mulsf3_pse+0x9c>
    138e:	88 23       	and	r24, r24
    1390:	4a f0       	brmi	.+18     	; 0x13a4 <__mulsf3_pse+0x7a>
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	bb 1f       	adc	r27, r27
    1398:	66 1f       	adc	r22, r22
    139a:	77 1f       	adc	r23, r23
    139c:	88 1f       	adc	r24, r24
    139e:	91 50       	subi	r25, 0x01	; 1
    13a0:	50 40       	sbci	r21, 0x00	; 0
    13a2:	a9 f7       	brne	.-22     	; 0x138e <__mulsf3_pse+0x64>
    13a4:	9e 3f       	cpi	r25, 0xFE	; 254
    13a6:	51 05       	cpc	r21, r1
    13a8:	70 f0       	brcs	.+28     	; 0x13c6 <__mulsf3_pse+0x9c>
    13aa:	5c cf       	rjmp	.-328    	; 0x1264 <__fp_inf>
    13ac:	a6 cf       	rjmp	.-180    	; 0x12fa <__fp_szero>
    13ae:	5f 3f       	cpi	r21, 0xFF	; 255
    13b0:	ec f3       	brlt	.-6      	; 0x13ac <__mulsf3_pse+0x82>
    13b2:	98 3e       	cpi	r25, 0xE8	; 232
    13b4:	dc f3       	brlt	.-10     	; 0x13ac <__mulsf3_pse+0x82>
    13b6:	86 95       	lsr	r24
    13b8:	77 95       	ror	r23
    13ba:	67 95       	ror	r22
    13bc:	b7 95       	ror	r27
    13be:	f7 95       	ror	r31
    13c0:	e7 95       	ror	r30
    13c2:	9f 5f       	subi	r25, 0xFF	; 255
    13c4:	c1 f7       	brne	.-16     	; 0x13b6 <__mulsf3_pse+0x8c>
    13c6:	fe 2b       	or	r31, r30
    13c8:	88 0f       	add	r24, r24
    13ca:	91 1d       	adc	r25, r1
    13cc:	96 95       	lsr	r25
    13ce:	87 95       	ror	r24
    13d0:	97 f9       	bld	r25, 7
    13d2:	08 95       	ret

000013d4 <__divmodsi4>:
    13d4:	05 2e       	mov	r0, r21
    13d6:	97 fb       	bst	r25, 7
    13d8:	1e f4       	brtc	.+6      	; 0x13e0 <__divmodsi4+0xc>
    13da:	00 94       	com	r0
    13dc:	0e 94 01 0a 	call	0x1402	; 0x1402 <__negsi2>
    13e0:	57 fd       	sbrc	r21, 7
    13e2:	07 d0       	rcall	.+14     	; 0x13f2 <__divmodsi4_neg2>
    13e4:	0e 94 2d 0a 	call	0x145a	; 0x145a <__udivmodsi4>
    13e8:	07 fc       	sbrc	r0, 7
    13ea:	03 d0       	rcall	.+6      	; 0x13f2 <__divmodsi4_neg2>
    13ec:	4e f4       	brtc	.+18     	; 0x1400 <__divmodsi4_exit>
    13ee:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__negsi2>

000013f2 <__divmodsi4_neg2>:
    13f2:	50 95       	com	r21
    13f4:	40 95       	com	r20
    13f6:	30 95       	com	r19
    13f8:	21 95       	neg	r18
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	4f 4f       	sbci	r20, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001400 <__divmodsi4_exit>:
    1400:	08 95       	ret

00001402 <__negsi2>:
    1402:	90 95       	com	r25
    1404:	80 95       	com	r24
    1406:	70 95       	com	r23
    1408:	61 95       	neg	r22
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	8f 4f       	sbci	r24, 0xFF	; 255
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	08 95       	ret

00001412 <__tablejump2__>:
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31

00001416 <__tablejump__>:
    1416:	05 90       	lpm	r0, Z+
    1418:	f4 91       	lpm	r31, Z
    141a:	e0 2d       	mov	r30, r0
    141c:	09 94       	ijmp

0000141e <__adddi3_s8>:
    141e:	00 24       	eor	r0, r0
    1420:	a7 fd       	sbrc	r26, 7
    1422:	00 94       	com	r0
    1424:	2a 0f       	add	r18, r26
    1426:	30 1d       	adc	r19, r0
    1428:	40 1d       	adc	r20, r0
    142a:	50 1d       	adc	r21, r0
    142c:	60 1d       	adc	r22, r0
    142e:	70 1d       	adc	r23, r0
    1430:	80 1d       	adc	r24, r0
    1432:	90 1d       	adc	r25, r0
    1434:	08 95       	ret

00001436 <__subdi3>:
    1436:	2a 19       	sub	r18, r10
    1438:	3b 09       	sbc	r19, r11
    143a:	4c 09       	sbc	r20, r12
    143c:	5d 09       	sbc	r21, r13
    143e:	6e 09       	sbc	r22, r14
    1440:	7f 09       	sbc	r23, r15
    1442:	80 0b       	sbc	r24, r16
    1444:	91 0b       	sbc	r25, r17
    1446:	08 95       	ret

00001448 <__cmpdi2>:
    1448:	2a 15       	cp	r18, r10
    144a:	3b 05       	cpc	r19, r11
    144c:	4c 05       	cpc	r20, r12
    144e:	5d 05       	cpc	r21, r13
    1450:	6e 05       	cpc	r22, r14
    1452:	7f 05       	cpc	r23, r15
    1454:	80 07       	cpc	r24, r16
    1456:	91 07       	cpc	r25, r17
    1458:	08 95       	ret

0000145a <__udivmodsi4>:
    145a:	a1 e2       	ldi	r26, 0x21	; 33
    145c:	1a 2e       	mov	r1, r26
    145e:	aa 1b       	sub	r26, r26
    1460:	bb 1b       	sub	r27, r27
    1462:	fd 01       	movw	r30, r26
    1464:	0d c0       	rjmp	.+26     	; 0x1480 <__udivmodsi4_ep>

00001466 <__udivmodsi4_loop>:
    1466:	aa 1f       	adc	r26, r26
    1468:	bb 1f       	adc	r27, r27
    146a:	ee 1f       	adc	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	a2 17       	cp	r26, r18
    1470:	b3 07       	cpc	r27, r19
    1472:	e4 07       	cpc	r30, r20
    1474:	f5 07       	cpc	r31, r21
    1476:	20 f0       	brcs	.+8      	; 0x1480 <__udivmodsi4_ep>
    1478:	a2 1b       	sub	r26, r18
    147a:	b3 0b       	sbc	r27, r19
    147c:	e4 0b       	sbc	r30, r20
    147e:	f5 0b       	sbc	r31, r21

00001480 <__udivmodsi4_ep>:
    1480:	66 1f       	adc	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	88 1f       	adc	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	1a 94       	dec	r1
    148a:	69 f7       	brne	.-38     	; 0x1466 <__udivmodsi4_loop>
    148c:	60 95       	com	r22
    148e:	70 95       	com	r23
    1490:	80 95       	com	r24
    1492:	90 95       	com	r25
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	bd 01       	movw	r22, r26
    149a:	cf 01       	movw	r24, r30
    149c:	08 95       	ret

0000149e <dtostrf>:
    149e:	ef 92       	push	r14
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	e8 01       	movw	r28, r16
    14aa:	47 ff       	sbrs	r20, 7
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <dtostrf+0x14>
    14ae:	34 e1       	ldi	r19, 0x14	; 20
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <dtostrf+0x16>
    14b2:	34 e0       	ldi	r19, 0x04	; 4
    14b4:	e4 2f       	mov	r30, r20
    14b6:	ff 27       	eor	r31, r31
    14b8:	e7 fd       	sbrc	r30, 7
    14ba:	f0 95       	com	r31
    14bc:	f7 ff       	sbrs	r31, 7
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <dtostrf+0x28>
    14c0:	f1 95       	neg	r31
    14c2:	e1 95       	neg	r30
    14c4:	f1 09       	sbc	r31, r1
    14c6:	e3 2e       	mov	r14, r19
    14c8:	02 2f       	mov	r16, r18
    14ca:	2e 2f       	mov	r18, r30
    14cc:	ae 01       	movw	r20, r28
    14ce:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <dtoa_prf>
    14d2:	ce 01       	movw	r24, r28
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ef 90       	pop	r14
    14de:	08 95       	ret

000014e0 <atof>:
    14e0:	66 27       	eor	r22, r22
    14e2:	77 27       	eor	r23, r23
    14e4:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <strtod>

000014e8 <dtoa_prf>:
    14e8:	6f 92       	push	r6
    14ea:	7f 92       	push	r7
    14ec:	9f 92       	push	r9
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	29 97       	sbiw	r28, 0x09	; 9
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	6a 01       	movw	r12, r20
    1514:	b2 2e       	mov	r11, r18
    1516:	10 2f       	mov	r17, r16
    1518:	0c 33       	cpi	r16, 0x3C	; 60
    151a:	20 f4       	brcc	.+8      	; 0x1524 <dtoa_prf+0x3c>
    151c:	ff 24       	eor	r15, r15
    151e:	f3 94       	inc	r15
    1520:	f0 0e       	add	r15, r16
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <dtoa_prf+0x40>
    1524:	4c e3       	ldi	r20, 0x3C	; 60
    1526:	f4 2e       	mov	r15, r20
    1528:	0f 2d       	mov	r16, r15
    152a:	27 e0       	ldi	r18, 0x07	; 7
    152c:	ae 01       	movw	r20, r28
    152e:	4f 5f       	subi	r20, 0xFF	; 255
    1530:	5f 4f       	sbci	r21, 0xFF	; 255
    1532:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__ftoa_engine>
    1536:	79 81       	ldd	r23, Y+1	; 0x01
    1538:	27 2f       	mov	r18, r23
    153a:	29 70       	andi	r18, 0x09	; 9
    153c:	21 30       	cpi	r18, 0x01	; 1
    153e:	31 f0       	breq	.+12     	; 0x154c <dtoa_prf+0x64>
    1540:	e1 fc       	sbrc	r14, 1
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <dtoa_prf+0x68>
    1544:	e0 fc       	sbrc	r14, 0
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <dtoa_prf+0x6c>
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <dtoa_prf+0x6e>
    154c:	6d e2       	ldi	r22, 0x2D	; 45
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <dtoa_prf+0x6e>
    1550:	6b e2       	ldi	r22, 0x2B	; 43
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <dtoa_prf+0x6e>
    1554:	60 e2       	ldi	r22, 0x20	; 32
    1556:	ae 2d       	mov	r26, r14
    1558:	a0 71       	andi	r26, 0x10	; 16
    155a:	73 ff       	sbrs	r23, 3
    155c:	36 c0       	rjmp	.+108    	; 0x15ca <dtoa_prf+0xe2>
    155e:	66 23       	and	r22, r22
    1560:	11 f0       	breq	.+4      	; 0x1566 <dtoa_prf+0x7e>
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <dtoa_prf+0x80>
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	8b 15       	cp	r24, r11
    156a:	10 f4       	brcc	.+4      	; 0x1570 <dtoa_prf+0x88>
    156c:	b8 1a       	sub	r11, r24
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <dtoa_prf+0x8a>
    1570:	b1 2c       	mov	r11, r1
    1572:	a1 11       	cpse	r26, r1
    1574:	0b c0       	rjmp	.+22     	; 0x158c <dtoa_prf+0xa4>
    1576:	f6 01       	movw	r30, r12
    1578:	8b 2d       	mov	r24, r11
    157a:	90 e2       	ldi	r25, 0x20	; 32
    157c:	88 23       	and	r24, r24
    157e:	19 f0       	breq	.+6      	; 0x1586 <dtoa_prf+0x9e>
    1580:	91 93       	st	Z+, r25
    1582:	81 50       	subi	r24, 0x01	; 1
    1584:	fb cf       	rjmp	.-10     	; 0x157c <dtoa_prf+0x94>
    1586:	cb 0c       	add	r12, r11
    1588:	d1 1c       	adc	r13, r1
    158a:	b1 2c       	mov	r11, r1
    158c:	66 23       	and	r22, r22
    158e:	31 f0       	breq	.+12     	; 0x159c <dtoa_prf+0xb4>
    1590:	f6 01       	movw	r30, r12
    1592:	60 83       	st	Z, r22
    1594:	96 01       	movw	r18, r12
    1596:	2f 5f       	subi	r18, 0xFF	; 255
    1598:	3f 4f       	sbci	r19, 0xFF	; 255
    159a:	69 01       	movw	r12, r18
    159c:	c6 01       	movw	r24, r12
    159e:	03 96       	adiw	r24, 0x03	; 3
    15a0:	e2 fe       	sbrs	r14, 2
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <dtoa_prf+0xc6>
    15a4:	2e e4       	ldi	r18, 0x4E	; 78
    15a6:	f6 01       	movw	r30, r12
    15a8:	20 83       	st	Z, r18
    15aa:	31 e4       	ldi	r19, 0x41	; 65
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <dtoa_prf+0xce>
    15ae:	2e e6       	ldi	r18, 0x6E	; 110
    15b0:	f6 01       	movw	r30, r12
    15b2:	20 83       	st	Z, r18
    15b4:	31 e6       	ldi	r19, 0x61	; 97
    15b6:	31 83       	std	Z+1, r19	; 0x01
    15b8:	22 83       	std	Z+2, r18	; 0x02
    15ba:	fc 01       	movw	r30, r24
    15bc:	2b 2d       	mov	r18, r11
    15be:	30 e2       	ldi	r19, 0x20	; 32
    15c0:	22 23       	and	r18, r18
    15c2:	f1 f1       	breq	.+124    	; 0x1640 <dtoa_prf+0x158>
    15c4:	31 93       	st	Z+, r19
    15c6:	21 50       	subi	r18, 0x01	; 1
    15c8:	fb cf       	rjmp	.-10     	; 0x15c0 <dtoa_prf+0xd8>
    15ca:	72 ff       	sbrs	r23, 2
    15cc:	40 c0       	rjmp	.+128    	; 0x164e <dtoa_prf+0x166>
    15ce:	66 23       	and	r22, r22
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <dtoa_prf+0xee>
    15d2:	84 e0       	ldi	r24, 0x04	; 4
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <dtoa_prf+0xf0>
    15d6:	83 e0       	ldi	r24, 0x03	; 3
    15d8:	8b 15       	cp	r24, r11
    15da:	10 f4       	brcc	.+4      	; 0x15e0 <dtoa_prf+0xf8>
    15dc:	b8 1a       	sub	r11, r24
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <dtoa_prf+0xfa>
    15e0:	b1 2c       	mov	r11, r1
    15e2:	a1 11       	cpse	r26, r1
    15e4:	0b c0       	rjmp	.+22     	; 0x15fc <dtoa_prf+0x114>
    15e6:	f6 01       	movw	r30, r12
    15e8:	8b 2d       	mov	r24, r11
    15ea:	90 e2       	ldi	r25, 0x20	; 32
    15ec:	88 23       	and	r24, r24
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <dtoa_prf+0x10e>
    15f0:	91 93       	st	Z+, r25
    15f2:	81 50       	subi	r24, 0x01	; 1
    15f4:	fb cf       	rjmp	.-10     	; 0x15ec <dtoa_prf+0x104>
    15f6:	cb 0c       	add	r12, r11
    15f8:	d1 1c       	adc	r13, r1
    15fa:	b1 2c       	mov	r11, r1
    15fc:	66 23       	and	r22, r22
    15fe:	31 f0       	breq	.+12     	; 0x160c <dtoa_prf+0x124>
    1600:	f6 01       	movw	r30, r12
    1602:	60 83       	st	Z, r22
    1604:	96 01       	movw	r18, r12
    1606:	2f 5f       	subi	r18, 0xFF	; 255
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	69 01       	movw	r12, r18
    160c:	c6 01       	movw	r24, r12
    160e:	03 96       	adiw	r24, 0x03	; 3
    1610:	e2 fe       	sbrs	r14, 2
    1612:	07 c0       	rjmp	.+14     	; 0x1622 <dtoa_prf+0x13a>
    1614:	29 e4       	ldi	r18, 0x49	; 73
    1616:	f6 01       	movw	r30, r12
    1618:	20 83       	st	Z, r18
    161a:	2e e4       	ldi	r18, 0x4E	; 78
    161c:	21 83       	std	Z+1, r18	; 0x01
    161e:	26 e4       	ldi	r18, 0x46	; 70
    1620:	06 c0       	rjmp	.+12     	; 0x162e <dtoa_prf+0x146>
    1622:	29 e6       	ldi	r18, 0x69	; 105
    1624:	f6 01       	movw	r30, r12
    1626:	20 83       	st	Z, r18
    1628:	2e e6       	ldi	r18, 0x6E	; 110
    162a:	21 83       	std	Z+1, r18	; 0x01
    162c:	26 e6       	ldi	r18, 0x66	; 102
    162e:	22 83       	std	Z+2, r18	; 0x02
    1630:	fc 01       	movw	r30, r24
    1632:	2b 2d       	mov	r18, r11
    1634:	30 e2       	ldi	r19, 0x20	; 32
    1636:	22 23       	and	r18, r18
    1638:	19 f0       	breq	.+6      	; 0x1640 <dtoa_prf+0x158>
    163a:	31 93       	st	Z+, r19
    163c:	21 50       	subi	r18, 0x01	; 1
    163e:	fb cf       	rjmp	.-10     	; 0x1636 <dtoa_prf+0x14e>
    1640:	fc 01       	movw	r30, r24
    1642:	eb 0d       	add	r30, r11
    1644:	f1 1d       	adc	r31, r1
    1646:	10 82       	st	Z, r1
    1648:	8e ef       	ldi	r24, 0xFE	; 254
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    164c:	b7 c0       	rjmp	.+366    	; 0x17bc <dtoa_prf+0x2d4>
    164e:	b1 e0       	ldi	r27, 0x01	; 1
    1650:	61 11       	cpse	r22, r1
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <dtoa_prf+0x16e>
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	4b 2f       	mov	r20, r27
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	18 16       	cp	r1, r24
    165c:	19 06       	cpc	r1, r25
    165e:	24 f4       	brge	.+8      	; 0x1668 <dtoa_prf+0x180>
    1660:	9c 01       	movw	r18, r24
    1662:	2f 5f       	subi	r18, 0xFF	; 255
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	02 c0       	rjmp	.+4      	; 0x166c <dtoa_prf+0x184>
    1668:	21 e0       	ldi	r18, 0x01	; 1
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	24 0f       	add	r18, r20
    166e:	35 1f       	adc	r19, r21
    1670:	11 23       	and	r17, r17
    1672:	29 f0       	breq	.+10     	; 0x167e <dtoa_prf+0x196>
    1674:	41 2f       	mov	r20, r17
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	4f 5f       	subi	r20, 0xFF	; 255
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <dtoa_prf+0x19a>
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	42 0f       	add	r20, r18
    1684:	53 1f       	adc	r21, r19
    1686:	2b 2d       	mov	r18, r11
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	42 17       	cp	r20, r18
    168c:	53 07       	cpc	r21, r19
    168e:	14 f4       	brge	.+4      	; 0x1694 <dtoa_prf+0x1ac>
    1690:	b4 1a       	sub	r11, r20
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <dtoa_prf+0x1ae>
    1694:	b1 2c       	mov	r11, r1
    1696:	2e 2d       	mov	r18, r14
    1698:	28 71       	andi	r18, 0x18	; 24
    169a:	59 f4       	brne	.+22     	; 0x16b2 <dtoa_prf+0x1ca>
    169c:	f6 01       	movw	r30, r12
    169e:	2b 2d       	mov	r18, r11
    16a0:	30 e2       	ldi	r19, 0x20	; 32
    16a2:	22 23       	and	r18, r18
    16a4:	19 f0       	breq	.+6      	; 0x16ac <dtoa_prf+0x1c4>
    16a6:	31 93       	st	Z+, r19
    16a8:	21 50       	subi	r18, 0x01	; 1
    16aa:	fb cf       	rjmp	.-10     	; 0x16a2 <dtoa_prf+0x1ba>
    16ac:	cb 0c       	add	r12, r11
    16ae:	d1 1c       	adc	r13, r1
    16b0:	b1 2c       	mov	r11, r1
    16b2:	bb 23       	and	r27, r27
    16b4:	31 f0       	breq	.+12     	; 0x16c2 <dtoa_prf+0x1da>
    16b6:	f6 01       	movw	r30, r12
    16b8:	60 83       	st	Z, r22
    16ba:	96 01       	movw	r18, r12
    16bc:	2f 5f       	subi	r18, 0xFF	; 255
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	69 01       	movw	r12, r18
    16c2:	a1 11       	cpse	r26, r1
    16c4:	0b c0       	rjmp	.+22     	; 0x16dc <dtoa_prf+0x1f4>
    16c6:	f6 01       	movw	r30, r12
    16c8:	2b 2d       	mov	r18, r11
    16ca:	30 e3       	ldi	r19, 0x30	; 48
    16cc:	22 23       	and	r18, r18
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <dtoa_prf+0x1ee>
    16d0:	31 93       	st	Z+, r19
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	fb cf       	rjmp	.-10     	; 0x16cc <dtoa_prf+0x1e4>
    16d6:	cb 0c       	add	r12, r11
    16d8:	d1 1c       	adc	r13, r1
    16da:	b1 2c       	mov	r11, r1
    16dc:	f8 0e       	add	r15, r24
    16de:	0a 81       	ldd	r16, Y+2	; 0x02
    16e0:	37 2f       	mov	r19, r23
    16e2:	30 71       	andi	r19, 0x10	; 16
    16e4:	a3 2e       	mov	r10, r19
    16e6:	74 ff       	sbrs	r23, 4
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <dtoa_prf+0x208>
    16ea:	01 33       	cpi	r16, 0x31	; 49
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <dtoa_prf+0x208>
    16ee:	fa 94       	dec	r15
    16f0:	1f 14       	cp	r1, r15
    16f2:	2c f4       	brge	.+10     	; 0x16fe <dtoa_prf+0x216>
    16f4:	2f 2d       	mov	r18, r15
    16f6:	29 30       	cpi	r18, 0x09	; 9
    16f8:	18 f0       	brcs	.+6      	; 0x1700 <dtoa_prf+0x218>
    16fa:	28 e0       	ldi	r18, 0x08	; 8
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <dtoa_prf+0x218>
    16fe:	21 e0       	ldi	r18, 0x01	; 1
    1700:	68 2f       	mov	r22, r24
    1702:	39 2f       	mov	r19, r25
    1704:	97 ff       	sbrs	r25, 7
    1706:	02 c0       	rjmp	.+4      	; 0x170c <dtoa_prf+0x224>
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	46 2f       	mov	r20, r22
    170e:	53 2f       	mov	r21, r19
    1710:	61 2c       	mov	r6, r1
    1712:	71 2c       	mov	r7, r1
    1714:	3e e2       	ldi	r19, 0x2E	; 46
    1716:	93 2e       	mov	r9, r19
    1718:	bc 01       	movw	r22, r24
    171a:	62 1b       	sub	r22, r18
    171c:	71 09       	sbc	r23, r1
    171e:	9b 01       	movw	r18, r22
    1720:	dc 01       	movw	r26, r24
    1722:	a4 1b       	sub	r26, r20
    1724:	b5 0b       	sbc	r27, r21
    1726:	e1 e0       	ldi	r30, 0x01	; 1
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	ec 0f       	add	r30, r28
    172c:	fd 1f       	adc	r31, r29
    172e:	ae 0f       	add	r26, r30
    1730:	bf 1f       	adc	r27, r31
    1732:	e1 2e       	mov	r14, r17
    1734:	f1 2c       	mov	r15, r1
    1736:	f1 94       	neg	r15
    1738:	e1 94       	neg	r14
    173a:	f1 08       	sbc	r15, r1
    173c:	4f 3f       	cpi	r20, 0xFF	; 255
    173e:	ff ef       	ldi	r31, 0xFF	; 255
    1740:	5f 07       	cpc	r21, r31
    1742:	31 f4       	brne	.+12     	; 0x1750 <dtoa_prf+0x268>
    1744:	f6 01       	movw	r30, r12
    1746:	90 82       	st	Z, r9
    1748:	b6 01       	movw	r22, r12
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	6b 01       	movw	r12, r22
    1750:	84 17       	cp	r24, r20
    1752:	95 07       	cpc	r25, r21
    1754:	4c f0       	brlt	.+18     	; 0x1768 <dtoa_prf+0x280>
    1756:	24 17       	cp	r18, r20
    1758:	35 07       	cpc	r19, r21
    175a:	34 f4       	brge	.+12     	; 0x1768 <dtoa_prf+0x280>
    175c:	bd 01       	movw	r22, r26
    175e:	66 0d       	add	r22, r6
    1760:	77 1d       	adc	r23, r7
    1762:	fb 01       	movw	r30, r22
    1764:	11 81       	ldd	r17, Z+1	; 0x01
    1766:	01 c0       	rjmp	.+2      	; 0x176a <dtoa_prf+0x282>
    1768:	10 e3       	ldi	r17, 0x30	; 48
    176a:	41 50       	subi	r20, 0x01	; 1
    176c:	51 09       	sbc	r21, r1
    176e:	ff ef       	ldi	r31, 0xFF	; 255
    1770:	6f 1a       	sub	r6, r31
    1772:	7f 0a       	sbc	r7, r31
    1774:	b6 01       	movw	r22, r12
    1776:	6f 5f       	subi	r22, 0xFF	; 255
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	4e 15       	cp	r20, r14
    177c:	5f 05       	cpc	r21, r15
    177e:	24 f0       	brlt	.+8      	; 0x1788 <dtoa_prf+0x2a0>
    1780:	f6 01       	movw	r30, r12
    1782:	10 83       	st	Z, r17
    1784:	6b 01       	movw	r12, r22
    1786:	da cf       	rjmp	.-76     	; 0x173c <dtoa_prf+0x254>
    1788:	48 17       	cp	r20, r24
    178a:	59 07       	cpc	r21, r25
    178c:	39 f4       	brne	.+14     	; 0x179c <dtoa_prf+0x2b4>
    178e:	06 33       	cpi	r16, 0x36	; 54
    1790:	20 f4       	brcc	.+8      	; 0x179a <dtoa_prf+0x2b2>
    1792:	05 33       	cpi	r16, 0x35	; 53
    1794:	19 f4       	brne	.+6      	; 0x179c <dtoa_prf+0x2b4>
    1796:	a1 10       	cpse	r10, r1
    1798:	01 c0       	rjmp	.+2      	; 0x179c <dtoa_prf+0x2b4>
    179a:	11 e3       	ldi	r17, 0x31	; 49
    179c:	f6 01       	movw	r30, r12
    179e:	10 83       	st	Z, r17
    17a0:	fb 01       	movw	r30, r22
    17a2:	8b 2d       	mov	r24, r11
    17a4:	90 e2       	ldi	r25, 0x20	; 32
    17a6:	88 23       	and	r24, r24
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <dtoa_prf+0x2c8>
    17aa:	91 93       	st	Z+, r25
    17ac:	81 50       	subi	r24, 0x01	; 1
    17ae:	fb cf       	rjmp	.-10     	; 0x17a6 <dtoa_prf+0x2be>
    17b0:	fb 01       	movw	r30, r22
    17b2:	eb 0d       	add	r30, r11
    17b4:	f1 1d       	adc	r31, r1
    17b6:	10 82       	st	Z, r1
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	29 96       	adiw	r28, 0x09	; 9
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	9f 90       	pop	r9
    17de:	7f 90       	pop	r7
    17e0:	6f 90       	pop	r6
    17e2:	08 95       	ret

000017e4 <strtod>:
    17e4:	a0 e0       	ldi	r26, 0x00	; 0
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e8 ef       	ldi	r30, 0xF8	; 248
    17ea:	fb e0       	ldi	r31, 0x0B	; 11
    17ec:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__prologue_saves__+0xc>
    17f0:	8b 01       	movw	r16, r22
    17f2:	61 15       	cp	r22, r1
    17f4:	71 05       	cpc	r23, r1
    17f6:	21 f0       	breq	.+8      	; 0x1800 <strtod+0x1c>
    17f8:	db 01       	movw	r26, r22
    17fa:	8c 93       	st	X, r24
    17fc:	11 96       	adiw	r26, 0x01	; 1
    17fe:	9c 93       	st	X, r25
    1800:	ec 01       	movw	r28, r24
    1802:	5e 01       	movw	r10, r28
    1804:	bf ef       	ldi	r27, 0xFF	; 255
    1806:	ab 1a       	sub	r10, r27
    1808:	bb 0a       	sbc	r11, r27
    180a:	75 01       	movw	r14, r10
    180c:	c8 80       	ld	r12, Y
    180e:	8c 2d       	mov	r24, r12
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <isspace>
    1816:	89 2b       	or	r24, r25
    1818:	11 f0       	breq	.+4      	; 0x181e <strtod+0x3a>
    181a:	e5 01       	movw	r28, r10
    181c:	f2 cf       	rjmp	.-28     	; 0x1802 <strtod+0x1e>
    181e:	ed e2       	ldi	r30, 0x2D	; 45
    1820:	ce 12       	cpse	r12, r30
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <strtod+0x50>
    1824:	7e 01       	movw	r14, r28
    1826:	f2 e0       	ldi	r31, 0x02	; 2
    1828:	ef 0e       	add	r14, r31
    182a:	f1 1c       	adc	r15, r1
    182c:	c9 80       	ldd	r12, Y+1	; 0x01
    182e:	dd 24       	eor	r13, r13
    1830:	d3 94       	inc	r13
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <strtod+0x62>
    1834:	2b e2       	ldi	r18, 0x2B	; 43
    1836:	c2 12       	cpse	r12, r18
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <strtod+0x60>
    183a:	7e 01       	movw	r14, r28
    183c:	42 e0       	ldi	r20, 0x02	; 2
    183e:	e4 0e       	add	r14, r20
    1840:	f1 1c       	adc	r15, r1
    1842:	c9 80       	ldd	r12, Y+1	; 0x01
    1844:	d1 2c       	mov	r13, r1
    1846:	e7 01       	movw	r28, r14
    1848:	21 97       	sbiw	r28, 0x01	; 1
    184a:	43 e0       	ldi	r20, 0x03	; 3
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	60 e7       	ldi	r22, 0x70	; 112
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <strncasecmp_P>
    1858:	89 2b       	or	r24, r25
    185a:	c1 f4       	brne	.+48     	; 0x188c <strtod+0xa8>
    185c:	23 96       	adiw	r28, 0x03	; 3
    185e:	45 e0       	ldi	r20, 0x05	; 5
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	6b e6       	ldi	r22, 0x6B	; 107
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	ce 01       	movw	r24, r28
    1868:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <strncasecmp_P>
    186c:	89 2b       	or	r24, r25
    186e:	09 f4       	brne	.+2      	; 0x1872 <strtod+0x8e>
    1870:	25 96       	adiw	r28, 0x05	; 5
    1872:	01 15       	cp	r16, r1
    1874:	11 05       	cpc	r17, r1
    1876:	19 f0       	breq	.+6      	; 0x187e <strtod+0x9a>
    1878:	d8 01       	movw	r26, r16
    187a:	cd 93       	st	X+, r28
    187c:	dc 93       	st	X, r29
    187e:	d1 10       	cpse	r13, r1
    1880:	06 c1       	rjmp	.+524    	; 0x1a8e <strtod+0x2aa>
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 e8       	ldi	r24, 0x80	; 128
    1888:	9f e7       	ldi	r25, 0x7F	; 127
    188a:	0a c1       	rjmp	.+532    	; 0x1aa0 <strtod+0x2bc>
    188c:	43 e0       	ldi	r20, 0x03	; 3
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	68 e6       	ldi	r22, 0x68	; 104
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	ce 01       	movw	r24, r28
    1896:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <strncasecmp_P>
    189a:	89 2b       	or	r24, r25
    189c:	59 f4       	brne	.+22     	; 0x18b4 <strtod+0xd0>
    189e:	01 15       	cp	r16, r1
    18a0:	11 05       	cpc	r17, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <strtod+0xc2>
    18a4:	f9 c0       	rjmp	.+498    	; 0x1a98 <strtod+0x2b4>
    18a6:	b2 e0       	ldi	r27, 0x02	; 2
    18a8:	eb 0e       	add	r14, r27
    18aa:	f1 1c       	adc	r15, r1
    18ac:	f8 01       	movw	r30, r16
    18ae:	f1 82       	std	Z+1, r15	; 0x01
    18b0:	e0 82       	st	Z, r14
    18b2:	f2 c0       	rjmp	.+484    	; 0x1a98 <strtod+0x2b4>
    18b4:	f7 01       	movw	r30, r14
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	cb 01       	movw	r24, r22
    18bc:	c0 e0       	ldi	r28, 0x00	; 0
    18be:	d0 e0       	ldi	r29, 0x00	; 0
    18c0:	7f 01       	movw	r14, r30
    18c2:	a0 ed       	ldi	r26, 0xD0	; 208
    18c4:	aa 2e       	mov	r10, r26
    18c6:	ac 0c       	add	r10, r12
    18c8:	29 e0       	ldi	r18, 0x09	; 9
    18ca:	2a 15       	cp	r18, r10
    18cc:	30 f1       	brcs	.+76     	; 0x191a <strtod+0x136>
    18ce:	4d 2d       	mov	r20, r13
    18d0:	42 60       	ori	r20, 0x02	; 2
    18d2:	b4 2e       	mov	r11, r20
    18d4:	2d 2d       	mov	r18, r13
    18d6:	28 70       	andi	r18, 0x08	; 8
    18d8:	d2 fe       	sbrs	r13, 2
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <strtod+0x100>
    18dc:	21 11       	cpse	r18, r1
    18de:	25 c0       	rjmp	.+74     	; 0x192a <strtod+0x146>
    18e0:	21 96       	adiw	r28, 0x01	; 1
    18e2:	23 c0       	rjmp	.+70     	; 0x192a <strtod+0x146>
    18e4:	21 11       	cpse	r18, r1
    18e6:	21 97       	sbiw	r28, 0x01	; 1
    18e8:	a5 e0       	ldi	r26, 0x05	; 5
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	9b 01       	movw	r18, r22
    18ee:	ac 01       	movw	r20, r24
    18f0:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__muluhisi3>
    18f4:	66 0f       	add	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	88 1f       	adc	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	6a 0d       	add	r22, r10
    18fe:	71 1d       	adc	r23, r1
    1900:	81 1d       	adc	r24, r1
    1902:	91 1d       	adc	r25, r1
    1904:	68 39       	cpi	r22, 0x98	; 152
    1906:	a9 e9       	ldi	r26, 0x99	; 153
    1908:	7a 07       	cpc	r23, r26
    190a:	8a 07       	cpc	r24, r26
    190c:	a9 e1       	ldi	r26, 0x19	; 25
    190e:	9a 07       	cpc	r25, r26
    1910:	60 f0       	brcs	.+24     	; 0x192a <strtod+0x146>
    1912:	bd 2d       	mov	r27, r13
    1914:	b6 60       	ori	r27, 0x06	; 6
    1916:	bb 2e       	mov	r11, r27
    1918:	08 c0       	rjmp	.+16     	; 0x192a <strtod+0x146>
    191a:	2e ef       	ldi	r18, 0xFE	; 254
    191c:	a2 12       	cpse	r10, r18
    191e:	0a c0       	rjmp	.+20     	; 0x1934 <strtod+0x150>
    1920:	d3 fc       	sbrc	r13, 3
    1922:	50 c0       	rjmp	.+160    	; 0x19c4 <strtod+0x1e0>
    1924:	4d 2d       	mov	r20, r13
    1926:	48 60       	ori	r20, 0x08	; 8
    1928:	b4 2e       	mov	r11, r20
    192a:	31 96       	adiw	r30, 0x01	; 1
    192c:	d7 01       	movw	r26, r14
    192e:	cc 90       	ld	r12, X
    1930:	db 2c       	mov	r13, r11
    1932:	c6 cf       	rjmp	.-116    	; 0x18c0 <strtod+0xdc>
    1934:	2c 2d       	mov	r18, r12
    1936:	2f 7d       	andi	r18, 0xDF	; 223
    1938:	25 34       	cpi	r18, 0x45	; 69
    193a:	09 f0       	breq	.+2      	; 0x193e <strtod+0x15a>
    193c:	43 c0       	rjmp	.+134    	; 0x19c4 <strtod+0x1e0>
    193e:	a0 81       	ld	r26, Z
    1940:	ad 32       	cpi	r26, 0x2D	; 45
    1942:	41 f4       	brne	.+16     	; 0x1954 <strtod+0x170>
    1944:	bd 2d       	mov	r27, r13
    1946:	b0 61       	ori	r27, 0x10	; 16
    1948:	db 2e       	mov	r13, r27
    194a:	7f 01       	movw	r14, r30
    194c:	22 e0       	ldi	r18, 0x02	; 2
    194e:	e2 0e       	add	r14, r18
    1950:	f1 1c       	adc	r15, r1
    1952:	0c c0       	rjmp	.+24     	; 0x196c <strtod+0x188>
    1954:	7f 01       	movw	r14, r30
    1956:	ab 32       	cpi	r26, 0x2B	; 43
    1958:	31 f0       	breq	.+12     	; 0x1966 <strtod+0x182>
    195a:	4f ef       	ldi	r20, 0xFF	; 255
    195c:	e4 1a       	sub	r14, r20
    195e:	f4 0a       	sbc	r15, r20
    1960:	21 e0       	ldi	r18, 0x01	; 1
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <strtod+0x18e>
    1966:	a2 e0       	ldi	r26, 0x02	; 2
    1968:	ea 0e       	add	r14, r26
    196a:	f1 1c       	adc	r15, r1
    196c:	a1 81       	ldd	r26, Z+1	; 0x01
    196e:	22 e0       	ldi	r18, 0x02	; 2
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	a0 53       	subi	r26, 0x30	; 48
    1974:	aa 30       	cpi	r26, 0x0A	; 10
    1976:	18 f0       	brcs	.+6      	; 0x197e <strtod+0x19a>
    1978:	e2 1a       	sub	r14, r18
    197a:	f3 0a       	sbc	r15, r19
    197c:	23 c0       	rjmp	.+70     	; 0x19c4 <strtod+0x1e0>
    197e:	f7 01       	movw	r30, r14
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	20 38       	cpi	r18, 0x80	; 128
    1986:	bc e0       	ldi	r27, 0x0C	; 12
    1988:	3b 07       	cpc	r19, r27
    198a:	5c f4       	brge	.+22     	; 0x19a2 <strtod+0x1be>
    198c:	a9 01       	movw	r20, r18
    198e:	44 0f       	add	r20, r20
    1990:	55 1f       	adc	r21, r21
    1992:	44 0f       	add	r20, r20
    1994:	55 1f       	adc	r21, r21
    1996:	24 0f       	add	r18, r20
    1998:	35 1f       	adc	r19, r21
    199a:	22 0f       	add	r18, r18
    199c:	33 1f       	adc	r19, r19
    199e:	2a 0f       	add	r18, r26
    19a0:	31 1d       	adc	r19, r1
    19a2:	af 01       	movw	r20, r30
    19a4:	4f 5f       	subi	r20, 0xFF	; 255
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255
    19a8:	7a 01       	movw	r14, r20
    19aa:	a0 81       	ld	r26, Z
    19ac:	a0 53       	subi	r26, 0x30	; 48
    19ae:	aa 30       	cpi	r26, 0x0A	; 10
    19b0:	10 f4       	brcc	.+4      	; 0x19b6 <strtod+0x1d2>
    19b2:	fa 01       	movw	r30, r20
    19b4:	e7 cf       	rjmp	.-50     	; 0x1984 <strtod+0x1a0>
    19b6:	d4 fe       	sbrs	r13, 4
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <strtod+0x1dc>
    19ba:	31 95       	neg	r19
    19bc:	21 95       	neg	r18
    19be:	31 09       	sbc	r19, r1
    19c0:	c2 0f       	add	r28, r18
    19c2:	d3 1f       	adc	r29, r19
    19c4:	d1 fe       	sbrs	r13, 1
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <strtod+0x1f6>
    19c8:	01 15       	cp	r16, r1
    19ca:	11 05       	cpc	r17, r1
    19cc:	31 f0       	breq	.+12     	; 0x19da <strtod+0x1f6>
    19ce:	e1 e0       	ldi	r30, 0x01	; 1
    19d0:	ee 1a       	sub	r14, r30
    19d2:	f1 08       	sbc	r15, r1
    19d4:	d8 01       	movw	r26, r16
    19d6:	ed 92       	st	X+, r14
    19d8:	fc 92       	st	X, r15
    19da:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__floatunsisf>
    19de:	2d 2d       	mov	r18, r13
    19e0:	23 70       	andi	r18, 0x03	; 3
    19e2:	23 30       	cpi	r18, 0x03	; 3
    19e4:	19 f0       	breq	.+6      	; 0x19ec <strtod+0x208>
    19e6:	4b 01       	movw	r8, r22
    19e8:	5c 01       	movw	r10, r24
    19ea:	06 c0       	rjmp	.+12     	; 0x19f8 <strtod+0x214>
    19ec:	4b 01       	movw	r8, r22
    19ee:	5c 01       	movw	r10, r24
    19f0:	b7 fa       	bst	r11, 7
    19f2:	b0 94       	com	r11
    19f4:	b7 f8       	bld	r11, 7
    19f6:	b0 94       	com	r11
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	a9 01       	movw	r20, r18
    19fe:	c5 01       	movw	r24, r10
    1a00:	b4 01       	movw	r22, r8
    1a02:	0e 94 34 08 	call	0x1068	; 0x1068 <__cmpsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <strtod+0x228>
    1a0a:	3e c0       	rjmp	.+124    	; 0x1a88 <strtod+0x2a4>
    1a0c:	d7 ff       	sbrs	r29, 7
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <strtod+0x238>
    1a10:	d1 95       	neg	r29
    1a12:	c1 95       	neg	r28
    1a14:	d1 09       	sbc	r29, r1
    1a16:	07 e8       	ldi	r16, 0x87	; 135
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <strtod+0x23c>
    1a1c:	0f e9       	ldi	r16, 0x9F	; 159
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	68 01       	movw	r12, r16
    1a22:	b8 e1       	ldi	r27, 0x18	; 24
    1a24:	cb 1a       	sub	r12, r27
    1a26:	d1 08       	sbc	r13, r1
    1a28:	90 e2       	ldi	r25, 0x20	; 32
    1a2a:	e9 2e       	mov	r14, r25
    1a2c:	f1 2c       	mov	r15, r1
    1a2e:	ce 15       	cp	r28, r14
    1a30:	df 05       	cpc	r29, r15
    1a32:	74 f0       	brlt	.+28     	; 0x1a50 <strtod+0x26c>
    1a34:	f8 01       	movw	r30, r16
    1a36:	25 91       	lpm	r18, Z+
    1a38:	35 91       	lpm	r19, Z+
    1a3a:	45 91       	lpm	r20, Z+
    1a3c:	54 91       	lpm	r21, Z
    1a3e:	c5 01       	movw	r24, r10
    1a40:	b4 01       	movw	r22, r8
    1a42:	0e 94 87 09 	call	0x130e	; 0x130e <__mulsf3>
    1a46:	4b 01       	movw	r8, r22
    1a48:	5c 01       	movw	r10, r24
    1a4a:	ce 19       	sub	r28, r14
    1a4c:	df 09       	sbc	r29, r15
    1a4e:	ef cf       	rjmp	.-34     	; 0x1a2e <strtod+0x24a>
    1a50:	04 50       	subi	r16, 0x04	; 4
    1a52:	11 09       	sbc	r17, r1
    1a54:	f5 94       	asr	r15
    1a56:	e7 94       	ror	r14
    1a58:	0c 15       	cp	r16, r12
    1a5a:	1d 05       	cpc	r17, r13
    1a5c:	41 f7       	brne	.-48     	; 0x1a2e <strtod+0x24a>
    1a5e:	8a 2d       	mov	r24, r10
    1a60:	88 0f       	add	r24, r24
    1a62:	8b 2d       	mov	r24, r11
    1a64:	88 1f       	adc	r24, r24
    1a66:	8f 3f       	cpi	r24, 0xFF	; 255
    1a68:	49 f0       	breq	.+18     	; 0x1a7c <strtod+0x298>
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	a9 01       	movw	r20, r18
    1a70:	c5 01       	movw	r24, r10
    1a72:	b4 01       	movw	r22, r8
    1a74:	0e 94 34 08 	call	0x1068	; 0x1068 <__cmpsf2>
    1a78:	81 11       	cpse	r24, r1
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <strtod+0x2a4>
    1a7c:	82 e2       	ldi	r24, 0x22	; 34
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	90 93 cc 03 	sts	0x03CC, r25
    1a84:	80 93 cb 03 	sts	0x03CB, r24
    1a88:	c5 01       	movw	r24, r10
    1a8a:	b4 01       	movw	r22, r8
    1a8c:	09 c0       	rjmp	.+18     	; 0x1aa0 <strtod+0x2bc>
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	80 e8       	ldi	r24, 0x80	; 128
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <strtod+0x2bc>
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	80 ec       	ldi	r24, 0xC0	; 192
    1a9e:	9f e7       	ldi	r25, 0x7F	; 127
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	ec e0       	ldi	r30, 0x0C	; 12
    1aa6:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__epilogue_restores__+0xc>

00001aaa <__ftoa_engine>:
    1aaa:	28 30       	cpi	r18, 0x08	; 8
    1aac:	08 f0       	brcs	.+2      	; 0x1ab0 <__ftoa_engine+0x6>
    1aae:	27 e0       	ldi	r18, 0x07	; 7
    1ab0:	33 27       	eor	r19, r19
    1ab2:	da 01       	movw	r26, r20
    1ab4:	99 0f       	add	r25, r25
    1ab6:	31 1d       	adc	r19, r1
    1ab8:	87 fd       	sbrc	r24, 7
    1aba:	91 60       	ori	r25, 0x01	; 1
    1abc:	00 96       	adiw	r24, 0x00	; 0
    1abe:	61 05       	cpc	r22, r1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	39 f4       	brne	.+14     	; 0x1ad2 <__ftoa_engine+0x28>
    1ac4:	32 60       	ori	r19, 0x02	; 2
    1ac6:	2e 5f       	subi	r18, 0xFE	; 254
    1ac8:	3d 93       	st	X+, r19
    1aca:	30 e3       	ldi	r19, 0x30	; 48
    1acc:	2a 95       	dec	r18
    1ace:	e1 f7       	brne	.-8      	; 0x1ac8 <__ftoa_engine+0x1e>
    1ad0:	08 95       	ret
    1ad2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad4:	30 f0       	brcs	.+12     	; 0x1ae2 <__ftoa_engine+0x38>
    1ad6:	80 38       	cpi	r24, 0x80	; 128
    1ad8:	71 05       	cpc	r23, r1
    1ada:	61 05       	cpc	r22, r1
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <__ftoa_engine+0x36>
    1ade:	3c 5f       	subi	r19, 0xFC	; 252
    1ae0:	3c 5f       	subi	r19, 0xFC	; 252
    1ae2:	3d 93       	st	X+, r19
    1ae4:	91 30       	cpi	r25, 0x01	; 1
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <__ftoa_engine+0x40>
    1ae8:	80 68       	ori	r24, 0x80	; 128
    1aea:	91 1d       	adc	r25, r1
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	1f 93       	push	r17
    1af2:	0f 93       	push	r16
    1af4:	ff 92       	push	r15
    1af6:	ef 92       	push	r14
    1af8:	19 2f       	mov	r17, r25
    1afa:	98 7f       	andi	r25, 0xF8	; 248
    1afc:	96 95       	lsr	r25
    1afe:	e9 2f       	mov	r30, r25
    1b00:	96 95       	lsr	r25
    1b02:	96 95       	lsr	r25
    1b04:	e9 0f       	add	r30, r25
    1b06:	ff 27       	eor	r31, r31
    1b08:	e3 50       	subi	r30, 0x03	; 3
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	99 27       	eor	r25, r25
    1b0e:	33 27       	eor	r19, r19
    1b10:	ee 24       	eor	r14, r14
    1b12:	ff 24       	eor	r15, r15
    1b14:	a7 01       	movw	r20, r14
    1b16:	e7 01       	movw	r28, r14
    1b18:	05 90       	lpm	r0, Z+
    1b1a:	08 94       	sec
    1b1c:	07 94       	ror	r0
    1b1e:	28 f4       	brcc	.+10     	; 0x1b2a <__ftoa_engine+0x80>
    1b20:	36 0f       	add	r19, r22
    1b22:	e7 1e       	adc	r14, r23
    1b24:	f8 1e       	adc	r15, r24
    1b26:	49 1f       	adc	r20, r25
    1b28:	51 1d       	adc	r21, r1
    1b2a:	66 0f       	add	r22, r22
    1b2c:	77 1f       	adc	r23, r23
    1b2e:	88 1f       	adc	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	06 94       	lsr	r0
    1b34:	a1 f7       	brne	.-24     	; 0x1b1e <__ftoa_engine+0x74>
    1b36:	05 90       	lpm	r0, Z+
    1b38:	07 94       	ror	r0
    1b3a:	28 f4       	brcc	.+10     	; 0x1b46 <__ftoa_engine+0x9c>
    1b3c:	e7 0e       	add	r14, r23
    1b3e:	f8 1e       	adc	r15, r24
    1b40:	49 1f       	adc	r20, r25
    1b42:	56 1f       	adc	r21, r22
    1b44:	c1 1d       	adc	r28, r1
    1b46:	77 0f       	add	r23, r23
    1b48:	88 1f       	adc	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	66 1f       	adc	r22, r22
    1b4e:	06 94       	lsr	r0
    1b50:	a1 f7       	brne	.-24     	; 0x1b3a <__ftoa_engine+0x90>
    1b52:	05 90       	lpm	r0, Z+
    1b54:	07 94       	ror	r0
    1b56:	28 f4       	brcc	.+10     	; 0x1b62 <__ftoa_engine+0xb8>
    1b58:	f8 0e       	add	r15, r24
    1b5a:	49 1f       	adc	r20, r25
    1b5c:	56 1f       	adc	r21, r22
    1b5e:	c7 1f       	adc	r28, r23
    1b60:	d1 1d       	adc	r29, r1
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	66 1f       	adc	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	06 94       	lsr	r0
    1b6c:	a1 f7       	brne	.-24     	; 0x1b56 <__ftoa_engine+0xac>
    1b6e:	05 90       	lpm	r0, Z+
    1b70:	07 94       	ror	r0
    1b72:	20 f4       	brcc	.+8      	; 0x1b7c <__ftoa_engine+0xd2>
    1b74:	49 0f       	add	r20, r25
    1b76:	56 1f       	adc	r21, r22
    1b78:	c7 1f       	adc	r28, r23
    1b7a:	d8 1f       	adc	r29, r24
    1b7c:	99 0f       	add	r25, r25
    1b7e:	66 1f       	adc	r22, r22
    1b80:	77 1f       	adc	r23, r23
    1b82:	88 1f       	adc	r24, r24
    1b84:	06 94       	lsr	r0
    1b86:	a9 f7       	brne	.-22     	; 0x1b72 <__ftoa_engine+0xc8>
    1b88:	84 91       	lpm	r24, Z
    1b8a:	10 95       	com	r17
    1b8c:	17 70       	andi	r17, 0x07	; 7
    1b8e:	41 f0       	breq	.+16     	; 0x1ba0 <__ftoa_engine+0xf6>
    1b90:	d6 95       	lsr	r29
    1b92:	c7 95       	ror	r28
    1b94:	57 95       	ror	r21
    1b96:	47 95       	ror	r20
    1b98:	f7 94       	ror	r15
    1b9a:	e7 94       	ror	r14
    1b9c:	1a 95       	dec	r17
    1b9e:	c1 f7       	brne	.-16     	; 0x1b90 <__ftoa_engine+0xe6>
    1ba0:	e3 ea       	ldi	r30, 0xA3	; 163
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	68 94       	set
    1ba6:	15 90       	lpm	r1, Z+
    1ba8:	15 91       	lpm	r17, Z+
    1baa:	35 91       	lpm	r19, Z+
    1bac:	65 91       	lpm	r22, Z+
    1bae:	95 91       	lpm	r25, Z+
    1bb0:	05 90       	lpm	r0, Z+
    1bb2:	7f e2       	ldi	r23, 0x2F	; 47
    1bb4:	73 95       	inc	r23
    1bb6:	e1 18       	sub	r14, r1
    1bb8:	f1 0a       	sbc	r15, r17
    1bba:	43 0b       	sbc	r20, r19
    1bbc:	56 0b       	sbc	r21, r22
    1bbe:	c9 0b       	sbc	r28, r25
    1bc0:	d0 09       	sbc	r29, r0
    1bc2:	c0 f7       	brcc	.-16     	; 0x1bb4 <__ftoa_engine+0x10a>
    1bc4:	e1 0c       	add	r14, r1
    1bc6:	f1 1e       	adc	r15, r17
    1bc8:	43 1f       	adc	r20, r19
    1bca:	56 1f       	adc	r21, r22
    1bcc:	c9 1f       	adc	r28, r25
    1bce:	d0 1d       	adc	r29, r0
    1bd0:	7e f4       	brtc	.+30     	; 0x1bf0 <__ftoa_engine+0x146>
    1bd2:	70 33       	cpi	r23, 0x30	; 48
    1bd4:	11 f4       	brne	.+4      	; 0x1bda <__ftoa_engine+0x130>
    1bd6:	8a 95       	dec	r24
    1bd8:	e6 cf       	rjmp	.-52     	; 0x1ba6 <__ftoa_engine+0xfc>
    1bda:	e8 94       	clt
    1bdc:	01 50       	subi	r16, 0x01	; 1
    1bde:	30 f0       	brcs	.+12     	; 0x1bec <__ftoa_engine+0x142>
    1be0:	08 0f       	add	r16, r24
    1be2:	0a f4       	brpl	.+2      	; 0x1be6 <__ftoa_engine+0x13c>
    1be4:	00 27       	eor	r16, r16
    1be6:	02 17       	cp	r16, r18
    1be8:	08 f4       	brcc	.+2      	; 0x1bec <__ftoa_engine+0x142>
    1bea:	20 2f       	mov	r18, r16
    1bec:	23 95       	inc	r18
    1bee:	02 2f       	mov	r16, r18
    1bf0:	7a 33       	cpi	r23, 0x3A	; 58
    1bf2:	28 f0       	brcs	.+10     	; 0x1bfe <__ftoa_engine+0x154>
    1bf4:	79 e3       	ldi	r23, 0x39	; 57
    1bf6:	7d 93       	st	X+, r23
    1bf8:	2a 95       	dec	r18
    1bfa:	e9 f7       	brne	.-6      	; 0x1bf6 <__ftoa_engine+0x14c>
    1bfc:	10 c0       	rjmp	.+32     	; 0x1c1e <__ftoa_engine+0x174>
    1bfe:	7d 93       	st	X+, r23
    1c00:	2a 95       	dec	r18
    1c02:	89 f6       	brne	.-94     	; 0x1ba6 <__ftoa_engine+0xfc>
    1c04:	06 94       	lsr	r0
    1c06:	97 95       	ror	r25
    1c08:	67 95       	ror	r22
    1c0a:	37 95       	ror	r19
    1c0c:	17 95       	ror	r17
    1c0e:	17 94       	ror	r1
    1c10:	e1 18       	sub	r14, r1
    1c12:	f1 0a       	sbc	r15, r17
    1c14:	43 0b       	sbc	r20, r19
    1c16:	56 0b       	sbc	r21, r22
    1c18:	c9 0b       	sbc	r28, r25
    1c1a:	d0 09       	sbc	r29, r0
    1c1c:	98 f0       	brcs	.+38     	; 0x1c44 <__ftoa_engine+0x19a>
    1c1e:	23 95       	inc	r18
    1c20:	7e 91       	ld	r23, -X
    1c22:	73 95       	inc	r23
    1c24:	7a 33       	cpi	r23, 0x3A	; 58
    1c26:	08 f0       	brcs	.+2      	; 0x1c2a <__ftoa_engine+0x180>
    1c28:	70 e3       	ldi	r23, 0x30	; 48
    1c2a:	7c 93       	st	X, r23
    1c2c:	20 13       	cpse	r18, r16
    1c2e:	b8 f7       	brcc	.-18     	; 0x1c1e <__ftoa_engine+0x174>
    1c30:	7e 91       	ld	r23, -X
    1c32:	70 61       	ori	r23, 0x10	; 16
    1c34:	7d 93       	st	X+, r23
    1c36:	30 f0       	brcs	.+12     	; 0x1c44 <__ftoa_engine+0x19a>
    1c38:	83 95       	inc	r24
    1c3a:	71 e3       	ldi	r23, 0x31	; 49
    1c3c:	7d 93       	st	X+, r23
    1c3e:	70 e3       	ldi	r23, 0x30	; 48
    1c40:	2a 95       	dec	r18
    1c42:	e1 f7       	brne	.-8      	; 0x1c3c <__ftoa_engine+0x192>
    1c44:	11 24       	eor	r1, r1
    1c46:	ef 90       	pop	r14
    1c48:	ff 90       	pop	r15
    1c4a:	0f 91       	pop	r16
    1c4c:	1f 91       	pop	r17
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	99 27       	eor	r25, r25
    1c54:	87 fd       	sbrc	r24, 7
    1c56:	90 95       	com	r25
    1c58:	08 95       	ret

00001c5a <isspace>:
    1c5a:	91 11       	cpse	r25, r1
    1c5c:	1e c0       	rjmp	.+60     	; 0x1c9a <__ctype_isfalse>
    1c5e:	80 32       	cpi	r24, 0x20	; 32
    1c60:	19 f0       	breq	.+6      	; 0x1c68 <isspace+0xe>
    1c62:	89 50       	subi	r24, 0x09	; 9
    1c64:	85 50       	subi	r24, 0x05	; 5
    1c66:	d0 f7       	brcc	.-12     	; 0x1c5c <isspace+0x2>
    1c68:	08 95       	ret

00001c6a <strncasecmp_P>:
    1c6a:	fb 01       	movw	r30, r22
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	41 50       	subi	r20, 0x01	; 1
    1c70:	50 40       	sbci	r21, 0x00	; 0
    1c72:	88 f0       	brcs	.+34     	; 0x1c96 <strncasecmp_P+0x2c>
    1c74:	8d 91       	ld	r24, X+
    1c76:	81 34       	cpi	r24, 0x41	; 65
    1c78:	1c f0       	brlt	.+6      	; 0x1c80 <strncasecmp_P+0x16>
    1c7a:	8b 35       	cpi	r24, 0x5B	; 91
    1c7c:	0c f4       	brge	.+2      	; 0x1c80 <strncasecmp_P+0x16>
    1c7e:	80 5e       	subi	r24, 0xE0	; 224
    1c80:	65 91       	lpm	r22, Z+
    1c82:	61 34       	cpi	r22, 0x41	; 65
    1c84:	1c f0       	brlt	.+6      	; 0x1c8c <strncasecmp_P+0x22>
    1c86:	6b 35       	cpi	r22, 0x5B	; 91
    1c88:	0c f4       	brge	.+2      	; 0x1c8c <strncasecmp_P+0x22>
    1c8a:	60 5e       	subi	r22, 0xE0	; 224
    1c8c:	86 1b       	sub	r24, r22
    1c8e:	61 11       	cpse	r22, r1
    1c90:	71 f3       	breq	.-36     	; 0x1c6e <strncasecmp_P+0x4>
    1c92:	99 0b       	sbc	r25, r25
    1c94:	08 95       	ret
    1c96:	88 1b       	sub	r24, r24
    1c98:	fc cf       	rjmp	.-8      	; 0x1c92 <strncasecmp_P+0x28>

00001c9a <__ctype_isfalse>:
    1c9a:	99 27       	eor	r25, r25
    1c9c:	88 27       	eor	r24, r24

00001c9e <__ctype_istrue>:
    1c9e:	08 95       	ret

00001ca0 <__muluhisi3>:
    1ca0:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__umulhisi3>
    1ca4:	a5 9f       	mul	r26, r21
    1ca6:	90 0d       	add	r25, r0
    1ca8:	b4 9f       	mul	r27, r20
    1caa:	90 0d       	add	r25, r0
    1cac:	a4 9f       	mul	r26, r20
    1cae:	80 0d       	add	r24, r0
    1cb0:	91 1d       	adc	r25, r1
    1cb2:	11 24       	eor	r1, r1
    1cb4:	08 95       	ret

00001cb6 <__prologue_saves__>:
    1cb6:	2f 92       	push	r2
    1cb8:	3f 92       	push	r3
    1cba:	4f 92       	push	r4
    1cbc:	5f 92       	push	r5
    1cbe:	6f 92       	push	r6
    1cc0:	7f 92       	push	r7
    1cc2:	8f 92       	push	r8
    1cc4:	9f 92       	push	r9
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	ca 1b       	sub	r28, r26
    1ce0:	db 0b       	sbc	r29, r27
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	09 94       	ijmp

00001cee <__epilogue_restores__>:
    1cee:	2a 88       	ldd	r2, Y+18	; 0x12
    1cf0:	39 88       	ldd	r3, Y+17	; 0x11
    1cf2:	48 88       	ldd	r4, Y+16	; 0x10
    1cf4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cf6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cf8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cfa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cfc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cfe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d00:	b9 84       	ldd	r11, Y+9	; 0x09
    1d02:	c8 84       	ldd	r12, Y+8	; 0x08
    1d04:	df 80       	ldd	r13, Y+7	; 0x07
    1d06:	ee 80       	ldd	r14, Y+6	; 0x06
    1d08:	fd 80       	ldd	r15, Y+5	; 0x05
    1d0a:	0c 81       	ldd	r16, Y+4	; 0x04
    1d0c:	1b 81       	ldd	r17, Y+3	; 0x03
    1d0e:	aa 81       	ldd	r26, Y+2	; 0x02
    1d10:	b9 81       	ldd	r27, Y+1	; 0x01
    1d12:	ce 0f       	add	r28, r30
    1d14:	d1 1d       	adc	r29, r1
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	ed 01       	movw	r28, r26
    1d22:	08 95       	ret

00001d24 <__umulhisi3>:
    1d24:	a2 9f       	mul	r26, r18
    1d26:	b0 01       	movw	r22, r0
    1d28:	b3 9f       	mul	r27, r19
    1d2a:	c0 01       	movw	r24, r0
    1d2c:	a3 9f       	mul	r26, r19
    1d2e:	70 0d       	add	r23, r0
    1d30:	81 1d       	adc	r24, r1
    1d32:	11 24       	eor	r1, r1
    1d34:	91 1d       	adc	r25, r1
    1d36:	b2 9f       	mul	r27, r18
    1d38:	70 0d       	add	r23, r0
    1d3a:	81 1d       	adc	r24, r1
    1d3c:	11 24       	eor	r1, r1
    1d3e:	91 1d       	adc	r25, r1
    1d40:	08 95       	ret

00001d42 <_exit>:
    1d42:	f8 94       	cli

00001d44 <__stop_program>:
    1d44:	ff cf       	rjmp	.-2      	; 0x1d44 <__stop_program>
