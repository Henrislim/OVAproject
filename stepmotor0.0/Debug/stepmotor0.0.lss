
stepmotor0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000296  00800100  00001eda  00001f6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800396  00800396  00002204  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cf7  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011bc  00000000  00000000  000051cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b14  00000000  00000000  0000638b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b4  00000000  00000000  00006ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af4  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019a0  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  000099e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 57 06 	jmp	0xcae	; 0xcae <__vector_16>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_18>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	3a 07       	cpc	r19, r26
      6a:	41 07       	cpc	r20, r17
      6c:	49 07       	cpc	r20, r25
      6e:	50 07       	cpc	r21, r16
      70:	58 07       	cpc	r21, r24
      72:	5f 07       	cpc	r21, r31
      74:	67 07       	cpc	r22, r23
      76:	6e 07       	cpc	r22, r30

00000078 <__trampolines_end>:
      78:	4e 41       	sbci	r20, 0x1E	; 30
      7a:	4e 49       	sbci	r20, 0x9E	; 158

0000007b <pstr_inity>:
      7b:	49 4e 49 54 59                                      INITY

00000080 <pstr_inf>:
      80:	49 4e 46                                            INF

00000083 <pwr_m10>:
      83:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      93:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000009b <pwr_p10>:
      9b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ab:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      bb:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      cb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      db:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      eb:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      fb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     10b:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     11b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     12b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     13b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     14b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     15b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     16b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     17b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     18b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     19b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1ab:	3d 27 00                                            ='.

000001ae <__ctors_start>:
     1ae:	84 01       	movw	r16, r8
     1b0:	41 06       	cpc	r4, r17
     1b2:	e4 06       	cpc	r14, r20
     1b4:	4c 08       	sbc	r4, r12

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	13 e0       	ldi	r17, 0x03	; 3
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	ea ed       	ldi	r30, 0xDA	; 218
     1ca:	fe e1       	ldi	r31, 0x1E	; 30
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	a6 39       	cpi	r26, 0x96	; 150
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	a6 e9       	ldi	r26, 0x96	; 150
     1dc:	b3 e0       	ldi	r27, 0x03	; 3
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	a1 3d       	cpi	r26, 0xD1	; 209
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>

000001e8 <__do_global_ctors>:
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	c6 eb       	ldi	r28, 0xB6	; 182
     1ec:	d1 e0       	ldi	r29, 0x01	; 1
     1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <__do_global_ctors+0x10>
     1f0:	22 97       	sbiw	r28, 0x02	; 2
     1f2:	fe 01       	movw	r30, r28
     1f4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__tablejump__>
     1f8:	ce 3a       	cpi	r28, 0xAE	; 174
     1fa:	d1 07       	cpc	r29, r17
     1fc:	c9 f7       	brne	.-14     	; 0x1f0 <__do_global_ctors+0x8>
     1fe:	0e 94 da 06 	call	0xdb4	; 0xdb4 <main>
     202:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <_ZN4ADC2C1Ev>:

ADC2::ADC2(){
	//Channel ADC0 is chosen
	//MUX3...0 =0000
	//Configure the PORTC0
	DDRC &= !_BV(0);
     20a:	87 b1       	in	r24, 0x07	; 7
     20c:	17 b8       	out	0x07, r1	; 7
	//Enable ADC with prescaller 128 (16000000/128=125000Hz)
	//Required 50K-200KHz
	ADCSRA |= _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	87 68       	ori	r24, 0x87	; 135
     216:	80 83       	st	Z, r24
	//Internal 1.1V Voltage Reference with external capacitor at AREF pin 
	ADMUX |=  _BV(REFS0);//|_BV(REFS1);
     218:	ec e7       	ldi	r30, 0x7C	; 124
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	80 64       	ori	r24, 0x40	; 64
     220:	80 83       	st	Z, r24
     222:	08 95       	ret

00000224 <_ZN7ADS1115C1Ev>:


I2C ADS1115i2c;


ADS1115::ADS1115(){}
     224:	08 95       	ret

00000226 <_ZN7ADS111512init_ADS1115Ev>:

	
void ADS1115::init_ADS1115(){
	
	ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     226:	60 e9       	ldi	r22, 0x90	; 144
     228:	86 e9       	ldi	r24, 0x96	; 150
     22a:	93 e0       	ldi	r25, 0x03	; 3
     22c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONFIG); // set pointer to Config register
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	86 e9       	ldi	r24, 0x96	; 150
     234:	93 e0       	ldi	r25, 0x03	; 3
     236:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0>>8)); // write MSB of the Config register
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	86 e9       	ldi	r24, 0x96	; 150
     23e:	93 e0       	ldi	r25, 0x03	; 3
     240:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_write(((uint8_t)ADS1115_CONF_CH0&0xFF)); // write LSB of the Config register
     244:	63 ee       	ldi	r22, 0xE3	; 227
     246:	86 e9       	ldi	r24, 0x96	; 150
     248:	93 e0       	ldi	r25, 0x03	; 3
     24a:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
	ADS1115i2c.i2c_stop();
     24e:	86 e9       	ldi	r24, 0x96	; 150
     250:	93 e0       	ldi	r25, 0x03	; 3
     252:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>
     256:	08 95       	ret

00000258 <_ZN7ADS111511readADS1115Ev>:
	
}

uint16_t ADS1115::readADS1115(){
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
	 
	 int a=ADS1115i2c.i2c_start(ADS1115_ADDRESS);
     25c:	60 e9       	ldi	r22, 0x90	; 144
     25e:	86 e9       	ldi	r24, 0x96	; 150
     260:	93 e0       	ldi	r25, 0x03	; 3
     262:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	 if (a==1)
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	29 f0       	breq	.+10     	; 0x274 <_ZN7ADS111511readADS1115Ev+0x1c>
	 {
	 }
	 else{
		 ADS1115i2c.i2c_write(ADS1115_REG_POINTER_CONVERT); // set pointer to X axis MSB
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	86 e9       	ldi	r24, 0x96	; 150
     26e:	93 e0       	ldi	r25, 0x03	; 3
     270:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN3I2C9i2c_writeEh>
		 
	 }
	 ADS1115i2c.i2c_stop();
     274:	86 e9       	ldi	r24, 0x96	; 150
     276:	93 e0       	ldi	r25, 0x03	; 3
     278:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>

	 int b=ADS1115i2c.i2c_start((ADS1115_ADDRESS|0x01));
     27c:	61 e9       	ldi	r22, 0x91	; 145
     27e:	86 e9       	ldi	r24, 0x96	; 150
     280:	93 e0       	ldi	r25, 0x03	; 3
     282:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN3I2C9i2c_startEh>
	 if (b==1)
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	59 f0       	breq	.+22     	; 0x2a0 <_ZN7ADS111511readADS1115Ev+0x48>
	 {
	 }
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
     28a:	86 e9       	ldi	r24, 0x96	; 150
     28c:	93 e0       	ldi	r25, 0x03	; 3
     28e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN3I2C12i2c_read_ackEv>
     292:	c8 2f       	mov	r28, r24
		 LSB = ADS1115i2c.i2c_read_ack();
     294:	86 e9       	ldi	r24, 0x96	; 150
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN3I2C12i2c_read_ackEv>
     29c:	d8 2f       	mov	r29, r24
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN7ADS111511readADS1115Ev+0x4c>
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
	 uint8_t LSB=0;
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
	
}

uint16_t ADS1115::readADS1115(){
	 uint16_t result;
	 uint8_t MSB=0;
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
	 else{
		 MSB = ADS1115i2c.i2c_read_ack();
		 LSB = ADS1115i2c.i2c_read_ack();
		 
	 }
	 ADS1115i2c.i2c_stop();
     2a4:	86 e9       	ldi	r24, 0x96	; 150
     2a6:	93 e0       	ldi	r25, 0x03	; 3
     2a8:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN3I2C8i2c_stopEv>

	 result =((MSB<<8)|LSB)>>4;
     2ac:	2d 2f       	mov	r18, r29
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	c9 01       	movw	r24, r18
     2b2:	9c 2b       	or	r25, r28
	 return result;
}
     2b4:	95 95       	asr	r25
     2b6:	87 95       	ror	r24
     2b8:	95 95       	asr	r25
     2ba:	87 95       	ror	r24
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	95 95       	asr	r25
     2c2:	87 95       	ror	r24
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <_ZN7ADS111511readVoltageEv>:

double ADS1115::readVoltage(){
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
	init_ADS1115();
     2d0:	0e 94 13 01 	call	0x226	; 0x226 <_ZN7ADS111512init_ADS1115Ev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	89 ef       	ldi	r24, 0xF9	; 249
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	80 40       	sbci	r24, 0x00	; 0
     2de:	90 40       	sbci	r25, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <_ZN7ADS111511readVoltageEv+0x10>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <_ZN7ADS111511readVoltageEv+0x1a>
     2e4:	00 00       	nop
	_delay_ms(20);
	uint16_t readResult= readADS1115();
     2e6:	ce 01       	movw	r24, r28
     2e8:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN7ADS111511readADS1115Ev>
	double voltage = 0.003*readResult;
     2ec:	bc 01       	movw	r22, r24
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 9b 09 	call	0x1336	; 0x1336 <__floatunsisf>
     2f6:	26 ea       	ldi	r18, 0xA6	; 166
     2f8:	3b e9       	ldi	r19, 0x9B	; 155
     2fa:	44 e4       	ldi	r20, 0x44	; 68
     2fc:	5b e3       	ldi	r21, 0x3B	; 59
     2fe:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3>
	return voltage;
	
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <_GLOBAL__sub_I_ADS1115i2c>:
#include <stdlib.h>
#include "ADS1115.h"
#include "i2c.h"


I2C ADS1115i2c;
     308:	86 e9       	ldi	r24, 0x96	; 150
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN3I2CC1Ev>
     310:	08 95       	ret

00000312 <_ZN7VolTodBC1Ev>:
double static k[]={-8.4383,-9.0240,-9.3759,-8.8337,-8.8376,-8.2690,-7.2632,-6.8190,-6.7341,-5.8107,-8.6300, -9.3397, -8.9357,-8.6917, -9.4855,-8.3984,-9.0112, -8.3600,-7.6434,-8.1179, -8.0753,-8.7957,-9.1952,-9.1295,-9.2685,-9.6407, -11.3759, -10.0213};
double static t[]={5.7987,6.1970,6.4794,5.9629,5.9792,5.3368,4.0244,3.3762,3.2552,1.7153,6.8552,8.2216,7.3785,6.8769,8.6709,5.9893,7.5672,5.8135,3.7710,5.1349,5.0075,7.3585,8.6997,8.4799,9.0063,10.4154,16.9396,11.7330};
double static dBPoint[]={0,-1.05,-2.22,-3.345,-4.42,-5.44,-6.375,-7.24,-8.055,-8.8,-9.81,-10.955,-12.095,-13.21,-14.395,-15.515,-16.61,-17.675,-18.65,-19.675,-20.65,-21.71,-22.83,-23.98,-25.095,-26.29,-27.615,-28.925};
double initVolDifference=0;

VolTodB::VolTodB(){};
     312:	08 95       	ret

00000314 <_ZN7VolTodB5getdBEd>:
	
double VolTodB::getdB(double voltage){
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	6a 01       	movw	r12, r20
     326:	7b 01       	movw	r14, r22
     328:	c1 e6       	ldi	r28, 0x61	; 97
     32a:	d2 e0       	ldi	r29, 0x02	; 2
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (voltage>voltagePoint[i]&&voltage<=voltagePoint[i+1])
     330:	69 91       	ld	r22, Y+
     332:	79 91       	ld	r23, Y+
     334:	89 91       	ld	r24, Y+
     336:	99 91       	ld	r25, Y+
     338:	a7 01       	movw	r20, r14
     33a:	96 01       	movw	r18, r12
     33c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     340:	88 23       	and	r24, r24
     342:	6c f5       	brge	.+90     	; 0x39e <_ZN7VolTodB5getdBEd+0x8a>
     344:	28 81       	ld	r18, Y
     346:	39 81       	ldd	r19, Y+1	; 0x01
     348:	4a 81       	ldd	r20, Y+2	; 0x02
     34a:	5b 81       	ldd	r21, Y+3	; 0x03
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     354:	18 16       	cp	r1, r24
     356:	1c f1       	brlt	.+70     	; 0x39e <_ZN7VolTodB5getdBEd+0x8a>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
     358:	00 0f       	add	r16, r16
     35a:	11 1f       	adc	r17, r17
     35c:	00 0f       	add	r16, r16
     35e:	11 1f       	adc	r17, r17
     360:	e8 01       	movw	r28, r16
     362:	cf 50       	subi	r28, 0x0F	; 15
     364:	de 4f       	sbci	r29, 0xFE	; 254
     366:	20 91 97 03 	lds	r18, 0x0397
     36a:	30 91 98 03 	lds	r19, 0x0398
     36e:	40 91 99 03 	lds	r20, 0x0399
     372:	50 91 9a 03 	lds	r21, 0x039A
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	0e 94 99 08 	call	0x1132	; 0x1132 <__subsf3>
     37e:	28 81       	ld	r18, Y
     380:	39 81       	ldd	r19, Y+1	; 0x01
     382:	4a 81       	ldd	r20, Y+2	; 0x02
     384:	5b 81       	ldd	r21, Y+3	; 0x03
     386:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3>
     38a:	f8 01       	movw	r30, r16
     38c:	ef 57       	subi	r30, 0x7F	; 127
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	20 81       	ld	r18, Z
     392:	31 81       	ldd	r19, Z+1	; 0x01
     394:	42 81       	ldd	r20, Z+2	; 0x02
     396:	53 81       	ldd	r21, Z+3	; 0x03
     398:	0e 94 9a 08 	call	0x1134	; 0x1134 <__addsf3>
     39c:	03 c0       	rjmp	.+6      	; 0x3a4 <_ZN7VolTodB5getdBEd+0x90>
VolTodB::VolTodB(){};
	
double VolTodB::getdB(double voltage){
	
	int size = sizeof(voltagePoint);
	for (int i=0;i<size-1;i++)
     39e:	0f 5f       	subi	r16, 0xFF	; 255
     3a0:	1f 4f       	sbci	r17, 0xFF	; 255
     3a2:	c6 cf       	rjmp	.-116    	; 0x330 <_ZN7VolTodB5getdBEd+0x1c>
		{
			return (k[i]*(voltage-initVolDifference)+t[i]);
		}
	}
	
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	df 90       	pop	r13
     3b2:	cf 90       	pop	r12
     3b4:	08 95       	ret

000003b6 <_ZN7VolTodB14setInitVoltageEd>:

void VolTodB::setInitVoltage(double voltage){
     3b6:	cb 01       	movw	r24, r22
     3b8:	ba 01       	movw	r22, r20
	initVolDifference= voltage-0.687;
     3ba:	2b e3       	ldi	r18, 0x3B	; 59
     3bc:	3f ed       	ldi	r19, 0xDF	; 223
     3be:	4f e2       	ldi	r20, 0x2F	; 47
     3c0:	5f e3       	ldi	r21, 0x3F	; 63
     3c2:	0e 94 99 08 	call	0x1132	; 0x1132 <__subsf3>
     3c6:	60 93 97 03 	sts	0x0397, r22
     3ca:	70 93 98 03 	sts	0x0398, r23
     3ce:	80 93 99 03 	sts	0x0399, r24
     3d2:	90 93 9a 03 	sts	0x039A, r25
     3d6:	08 95       	ret

000003d8 <_ZN7VolTodB10getVoltageEd>:
}

double VolTodB::getVoltage(double dB){
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
     3e8:	9a 01       	movw	r18, r20
     3ea:	ab 01       	movw	r20, r22
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	cb 01       	movw	r24, r22
     3f2:	0e 94 99 08 	call	0x1132	; 0x1132 <__subsf3>
     3f6:	6b 01       	movw	r12, r22
     3f8:	7c 01       	movw	r14, r24
	double voltage=0;
	
	if (inv_dB==0)
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	a9 01       	movw	r20, r18
     400:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     404:	81 11       	cpse	r24, r1
     406:	13 c0       	rjmp	.+38     	; 0x42e <_ZN7VolTodB10getVoltageEd+0x56>
	{
		voltage=((inv_dB-t[0])/k[0]);
     408:	23 ef       	ldi	r18, 0xF3	; 243
     40a:	3e e8       	ldi	r19, 0x8E	; 142
     40c:	49 eb       	ldi	r20, 0xB9	; 185
     40e:	50 e4       	ldi	r21, 0x40	; 64
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	0e 94 99 08 	call	0x1132	; 0x1132 <__subsf3>
     418:	27 e4       	ldi	r18, 0x47	; 71
     41a:	33 e0       	ldi	r19, 0x03	; 3
     41c:	47 e0       	ldi	r20, 0x07	; 7
     41e:	51 ec       	ldi	r21, 0xC1	; 193
     420:	0e 94 02 09 	call	0x1204	; 0x1204 <__divsf3>
     424:	56 2f       	mov	r21, r22
     426:	47 2f       	mov	r20, r23
     428:	38 2f       	mov	r19, r24
     42a:	29 2f       	mov	r18, r25
     42c:	38 c0       	rjmp	.+112    	; 0x49e <_ZN7VolTodB10getVoltageEd+0xc6>
     42e:	c1 e1       	ldi	r28, 0x11	; 17
     430:	d1 e0       	ldi	r29, 0x01	; 1
double VolTodB::getVoltage(double dB){
	int size = sizeof(dBPoint);
	double inv_dB=0-dB;
	double voltage=0;
	
	if (inv_dB==0)
     432:	00 e0       	ldi	r16, 0x00	; 0
     434:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	else{
	for (int i=0;i<size-1;i++)
	{
		if (inv_dB<dBPoint[i]&&inv_dB>=dBPoint[i+1])
     436:	29 91       	ld	r18, Y+
     438:	39 91       	ld	r19, Y+
     43a:	49 91       	ld	r20, Y+
     43c:	59 91       	ld	r21, Y+
     43e:	c7 01       	movw	r24, r14
     440:	b6 01       	movw	r22, r12
     442:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     446:	88 23       	and	r24, r24
     448:	3c f5       	brge	.+78     	; 0x498 <_ZN7VolTodB10getVoltageEd+0xc0>
     44a:	28 81       	ld	r18, Y
     44c:	39 81       	ldd	r19, Y+1	; 0x01
     44e:	4a 81       	ldd	r20, Y+2	; 0x02
     450:	5b 81       	ldd	r21, Y+3	; 0x03
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	0e 94 4d 0a 	call	0x149a	; 0x149a <__gesf2>
     45a:	88 23       	and	r24, r24
     45c:	ec f0       	brlt	.+58     	; 0x498 <_ZN7VolTodB10getVoltageEd+0xc0>
		{
			voltage= ((inv_dB-t[i])/k[i]);
     45e:	00 0f       	add	r16, r16
     460:	11 1f       	adc	r17, r17
     462:	00 0f       	add	r16, r16
     464:	11 1f       	adc	r17, r17
     466:	f8 01       	movw	r30, r16
     468:	ef 57       	subi	r30, 0x7F	; 127
     46a:	fe 4f       	sbci	r31, 0xFE	; 254
     46c:	20 81       	ld	r18, Z
     46e:	31 81       	ldd	r19, Z+1	; 0x01
     470:	42 81       	ldd	r20, Z+2	; 0x02
     472:	53 81       	ldd	r21, Z+3	; 0x03
     474:	c7 01       	movw	r24, r14
     476:	b6 01       	movw	r22, r12
     478:	0e 94 99 08 	call	0x1132	; 0x1132 <__subsf3>
     47c:	f8 01       	movw	r30, r16
     47e:	ef 50       	subi	r30, 0x0F	; 15
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	20 81       	ld	r18, Z
     484:	31 81       	ldd	r19, Z+1	; 0x01
     486:	42 81       	ldd	r20, Z+2	; 0x02
     488:	53 81       	ldd	r21, Z+3	; 0x03
     48a:	0e 94 02 09 	call	0x1204	; 0x1204 <__divsf3>
			return voltage;
     48e:	56 2f       	mov	r21, r22
     490:	47 2f       	mov	r20, r23
     492:	38 2f       	mov	r19, r24
     494:	29 2f       	mov	r18, r25
     496:	03 c0       	rjmp	.+6      	; 0x49e <_ZN7VolTodB10getVoltageEd+0xc6>
	{
		voltage=((inv_dB-t[0])/k[0]);
	}
	
	else{
	for (int i=0;i<size-1;i++)
     498:	0f 5f       	subi	r16, 0xFF	; 255
     49a:	1f 4f       	sbci	r17, 0xFF	; 255
     49c:	cc cf       	rjmp	.-104    	; 0x436 <_ZN7VolTodB10getVoltageEd+0x5e>
		}
	}
	}
	return voltage;
	
}
     49e:	65 2f       	mov	r22, r21
     4a0:	74 2f       	mov	r23, r20
     4a2:	83 2f       	mov	r24, r19
     4a4:	92 2f       	mov	r25, r18
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	08 95       	ret

000004b8 <_ZN3I2CC1Ev>:

I2C::I2C(){ i2c_init();}
	
void I2C::i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     4b8:	88 e4       	ldi	r24, 0x48	; 72
     4ba:	80 93 b8 00 	sts	0x00B8, r24
     4be:	08 95       	ret

000004c0 <_ZN3I2C9i2c_startEh>:
}

uint8_t I2C::i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     4c0:	ec eb       	ldi	r30, 0xBC	; 188
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     4c6:	84 ea       	ldi	r24, 0xA4	; 164
     4c8:	80 83       	st	Z, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4ca:	80 81       	ld	r24, Z
     4cc:	88 23       	and	r24, r24
     4ce:	ec f7       	brge	.-6      	; 0x4ca <_ZN3I2C9i2c_startEh+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     4d0:	80 91 b9 00 	lds	r24, 0x00B9
     4d4:	88 7f       	andi	r24, 0xF8	; 248
     4d6:	88 30       	cpi	r24, 0x08	; 8
     4d8:	a1 f4       	brne	.+40     	; 0x502 <_ZN3I2C9i2c_startEh+0x42>
	
	// load slave address into data register
	TWDR = address;
     4da:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     4de:	84 e8       	ldi	r24, 0x84	; 132
     4e0:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     4e4:	ec eb       	ldi	r30, 0xBC	; 188
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	88 23       	and	r24, r24
     4ec:	ec f7       	brge	.-6      	; 0x4e8 <_ZN3I2C9i2c_startEh+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     4ee:	90 91 b9 00 	lds	r25, 0x00B9
     4f2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     4f4:	98 31       	cpi	r25, 0x18	; 24
     4f6:	39 f0       	breq	.+14     	; 0x506 <_ZN3I2C9i2c_startEh+0x46>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 34       	cpi	r25, 0x40	; 64
     4fc:	29 f4       	brne	.+10     	; 0x508 <_ZN3I2C9i2c_startEh+0x48>
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     506:	80 e0       	ldi	r24, 0x00	; 0
}
     508:	08 95       	ret

0000050a <_ZN3I2C9i2c_writeEh>:

uint8_t I2C::i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     50a:	60 93 bb 00 	sts	0x00BB, r22
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     50e:	84 e8       	ldi	r24, 0x84	; 132
     510:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     514:	ec eb       	ldi	r30, 0xBC	; 188
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	88 23       	and	r24, r24
     51c:	ec f7       	brge	.-6      	; 0x518 <_ZN3I2C9i2c_writeEh+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     51e:	90 91 b9 00 	lds	r25, 0x00B9
     522:	98 7f       	andi	r25, 0xF8	; 248
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	98 32       	cpi	r25, 0x28	; 40
     528:	09 f4       	brne	.+2      	; 0x52c <_ZN3I2C9i2c_writeEh+0x22>
     52a:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     52c:	08 95       	ret

0000052e <_ZN3I2C12i2c_read_ackEv>:

uint8_t I2C::i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     52e:	84 ec       	ldi	r24, 0xC4	; 196
     530:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     534:	ec eb       	ldi	r30, 0xBC	; 188
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 23       	and	r24, r24
     53c:	ec f7       	brge	.-6      	; 0x538 <_ZN3I2C12i2c_read_ackEv+0xa>
	// return received data from TWDR
	return TWDR;
     53e:	80 91 bb 00 	lds	r24, 0x00BB
}
     542:	08 95       	ret

00000544 <_ZN3I2C8i2c_stopEv>:
}

void I2C::i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     544:	84 e9       	ldi	r24, 0x94	; 148
     546:	80 93 bc 00 	sts	0x00BC, r24
     54a:	08 95       	ret

0000054c <_ZN4MenuC1Ev>:
bool modelR=false;
bool modelT=false;


	
Menu::Menu(){
     54c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN8UARTtoolC1Ev>
     550:	08 95       	ret

00000552 <_Z9replyListi>:
	

	
	
}
void replyList(int index){
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	a8 97       	sbiw	r28, 0x28	; 40
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
	
	
		if (index==1)
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	91 05       	cpc	r25, r1
     56a:	89 f4       	brne	.+34     	; 0x58e <_Z9replyListi+0x3c>
		{
			char testmsg1[]="Mode A: W + or S -";
     56c:	83 e1       	ldi	r24, 0x13	; 19
     56e:	e1 ed       	ldi	r30, 0xD1	; 209
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	de 01       	movw	r26, r28
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	01 90       	ld	r0, Z+
     578:	0d 92       	st	X+, r0
     57a:	8a 95       	dec	r24
     57c:	e1 f7       	brne	.-8      	; 0x576 <_Z9replyListi+0x24>
			myUART.uart_transmit_string(testmsg1);
     57e:	be 01       	movw	r22, r28
     580:	6f 5f       	subi	r22, 0xFF	; 255
     582:	7f 4f       	sbci	r23, 0xFF	; 255
     584:	8e ea       	ldi	r24, 0xAE	; 174
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
     58c:	3a c0       	rjmp	.+116    	; 0x602 <_Z9replyListi+0xb0>
		}
		else if (index==2)
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	91 05       	cpc	r25, r1
     592:	89 f4       	brne	.+34     	; 0x5b6 <_Z9replyListi+0x64>
		{
			char testmsg2[]="Mode B: Input target voltage: 0.80-4.20";
     594:	88 e2       	ldi	r24, 0x28	; 40
     596:	e4 ee       	ldi	r30, 0xE4	; 228
     598:	f2 e0       	ldi	r31, 0x02	; 2
     59a:	de 01       	movw	r26, r28
     59c:	11 96       	adiw	r26, 0x01	; 1
     59e:	01 90       	ld	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	8a 95       	dec	r24
     5a4:	e1 f7       	brne	.-8      	; 0x59e <_Z9replyListi+0x4c>
			myUART.uart_transmit_string(testmsg2);
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	8e ea       	ldi	r24, 0xAE	; 174
     5ae:	93 e0       	ldi	r25, 0x03	; 3
     5b0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
     5b4:	26 c0       	rjmp	.+76     	; 0x602 <_Z9replyListi+0xb0>
		}
		
		else if (index==3)
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	91 05       	cpc	r25, r1
     5ba:	89 f4       	brne	.+34     	; 0x5de <_Z9replyListi+0x8c>
		{
			char testmsg3[]="Reset to 0 dB";
     5bc:	8e e0       	ldi	r24, 0x0E	; 14
     5be:	ec e0       	ldi	r30, 0x0C	; 12
     5c0:	f3 e0       	ldi	r31, 0x03	; 3
     5c2:	de 01       	movw	r26, r28
     5c4:	11 96       	adiw	r26, 0x01	; 1
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	8a 95       	dec	r24
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <_Z9replyListi+0x74>
			myUART.uart_transmit_string(testmsg3);
     5ce:	be 01       	movw	r22, r28
     5d0:	6f 5f       	subi	r22, 0xFF	; 255
     5d2:	7f 4f       	sbci	r23, 0xFF	; 255
     5d4:	8e ea       	ldi	r24, 0xAE	; 174
     5d6:	93 e0       	ldi	r25, 0x03	; 3
     5d8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
     5dc:	12 c0       	rjmp	.+36     	; 0x602 <_Z9replyListi+0xb0>
		}
		
		else if (index==4)
     5de:	04 97       	sbiw	r24, 0x04	; 4
     5e0:	81 f4       	brne	.+32     	; 0x602 <_Z9replyListi+0xb0>
		{
			char testmsg4[]="Input target dB: 0.0-(-28.5)";
     5e2:	8d e1       	ldi	r24, 0x1D	; 29
     5e4:	ea e1       	ldi	r30, 0x1A	; 26
     5e6:	f3 e0       	ldi	r31, 0x03	; 3
     5e8:	de 01       	movw	r26, r28
     5ea:	11 96       	adiw	r26, 0x01	; 1
     5ec:	01 90       	ld	r0, Z+
     5ee:	0d 92       	st	X+, r0
     5f0:	8a 95       	dec	r24
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <_Z9replyListi+0x9a>
			myUART.uart_transmit_string(testmsg4);
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	8e ea       	ldi	r24, 0xAE	; 174
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
		}
		
}
     602:	a8 96       	adiw	r28, 0x28	; 40
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <_Z9menuStartv>:


void menuStart(){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	c3 55       	subi	r28, 0x53	; 83
     61e:	d1 09       	sbc	r29, r1
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
			char msg1[]="Welcome";
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	e7 e3       	ldi	r30, 0x37	; 55
     62e:	f3 e0       	ldi	r31, 0x03	; 3
     630:	de 01       	movw	r26, r28
     632:	a4 5b       	subi	r26, 0xB4	; 180
     634:	bf 4f       	sbci	r27, 0xFF	; 255
     636:	01 90       	ld	r0, Z+
     638:	0d 92       	st	X+, r0
     63a:	8a 95       	dec	r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <_Z9menuStartv+0x22>
			char msg2[]="========= Menu =========";
     63e:	89 e1       	ldi	r24, 0x19	; 25
     640:	ef e3       	ldi	r30, 0x3F	; 63
     642:	f3 e0       	ldi	r31, 0x03	; 3
     644:	de 01       	movw	r26, r28
     646:	5d 96       	adiw	r26, 0x1d	; 29
     648:	01 90       	ld	r0, Z+
     64a:	0d 92       	st	X+, r0
     64c:	8a 95       	dec	r24
     64e:	e1 f7       	brne	.-8      	; 0x648 <_Z9menuStartv+0x34>
			char msg3[]="A. Step by step: W+ and S-.";
     650:	8c e1       	ldi	r24, 0x1C	; 28
     652:	e8 e5       	ldi	r30, 0x58	; 88
     654:	f3 e0       	ldi	r31, 0x03	; 3
     656:	de 01       	movw	r26, r28
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	01 90       	ld	r0, Z+
     65c:	0d 92       	st	X+, r0
     65e:	8a 95       	dec	r24
     660:	e1 f7       	brne	.-8      	; 0x65a <_Z9menuStartv+0x46>
			char msg4[]="R. Reset";
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	e4 e7       	ldi	r30, 0x74	; 116
     666:	f3 e0       	ldi	r31, 0x03	; 3
     668:	de 01       	movw	r26, r28
     66a:	ad 5b       	subi	r26, 0xBD	; 189
     66c:	bf 4f       	sbci	r27, 0xFF	; 255
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	8a 95       	dec	r24
     674:	e1 f7       	brne	.-8      	; 0x66e <_Z9menuStartv+0x5a>
			char msg5[]="T. Target dB";
     676:	8d e0       	ldi	r24, 0x0D	; 13
     678:	ed e7       	ldi	r30, 0x7D	; 125
     67a:	f3 e0       	ldi	r31, 0x03	; 3
     67c:	de 01       	movw	r26, r28
     67e:	d6 96       	adiw	r26, 0x36	; 54
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <_Z9menuStartv+0x6c>
			
			myUART.uart_transmit_string(msg1);
     688:	be 01       	movw	r22, r28
     68a:	64 5b       	subi	r22, 0xB4	; 180
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	8e ea       	ldi	r24, 0xAE	; 174
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg2);
     696:	be 01       	movw	r22, r28
     698:	63 5e       	subi	r22, 0xE3	; 227
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	8e ea       	ldi	r24, 0xAE	; 174
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg3);
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5f       	subi	r22, 0xFF	; 255
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	8e ea       	ldi	r24, 0xAE	; 174
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg4);
     6b2:	be 01       	movw	r22, r28
     6b4:	6d 5b       	subi	r22, 0xBD	; 189
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	8e ea       	ldi	r24, 0xAE	; 174
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
			myUART.uart_transmit_string(msg5);
     6c0:	be 01       	movw	r22, r28
     6c2:	6a 5c       	subi	r22, 0xCA	; 202
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	8e ea       	ldi	r24, 0xAE	; 174
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
		
}
     6ce:	cd 5a       	subi	r28, 0xAD	; 173
     6d0:	df 4f       	sbci	r29, 0xFF	; 255
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <_Z14moveUpDownLitei>:
	
}

void moveUpDownLite(int stepdown){
	
	myStepper.step(stepdown);
     6e2:	bc 01       	movw	r22, r24
     6e4:	8f ea       	ldi	r24, 0xAF	; 175
     6e6:	93 e0       	ldi	r25, 0x03	; 3
     6e8:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN7Stepper4stepEi>
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	89 e6       	ldi	r24, 0x69	; 105
     6f0:	98 e1       	ldi	r25, 0x18	; 24
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	90 40       	sbci	r25, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <_Z14moveUpDownLitei+0x10>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <_Z14moveUpDownLitei+0x1a>
     6fc:	00 00       	nop
	_delay_ms(500);
	myStepper.motorOff();
     6fe:	8f ea       	ldi	r24, 0xAF	; 175
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN7Stepper8motorOffEv>
     706:	08 95       	ret

00000708 <_Z11stepperStopv>:
}

void stepperStop(){
	myStepper.motorOff();
     708:	8f ea       	ldi	r24, 0xAF	; 175
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN7Stepper8motorOffEv>
     710:	08 95       	ret

00000712 <_ZN4Menu9MenuStartEv>:
Menu::Menu(){
	
}

void Menu::MenuStart(){
		menuStart();
     712:	0e 94 0a 03 	call	0x614	; 0x614 <_Z9menuStartv>
		myStepper.setSpeed(4);//Set the speed of the stepper
     716:	44 e0       	ldi	r20, 0x04	; 4
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	8f ea       	ldi	r24, 0xAF	; 175
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN7Stepper8setSpeedEl>
		stepperStop();
     726:	0e 94 84 03 	call	0x708	; 0x708 <_Z11stepperStopv>
     72a:	08 95       	ret

0000072c <_Z11readVoltagev>:
void stepperStop(){
	myStepper.motorOff();
}


double readVoltage(){
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	2d 97       	sbiw	r28, 0x0d	; 13
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	00 e1       	ldi	r16, 0x10	; 16
     74e:	10 e0       	ldi	r17, 0x00	; 0
	
	double voltage=0;
	double voltageSum=0;
     750:	c1 2c       	mov	r12, r1
     752:	d1 2c       	mov	r13, r1
     754:	76 01       	movw	r14, r12
	for (int i=0;i<16;i++)
	{
		 voltage= myADS1115.readVoltage();
     756:	8c ea       	ldi	r24, 0xAC	; 172
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN7ADS111511readVoltageEv>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
		 voltageSum=voltageSum+voltage;
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	0e 94 9a 08 	call	0x1134	; 0x1134 <__addsf3>
     76a:	6b 01       	movw	r12, r22
     76c:	7c 01       	movw	r14, r24
     76e:	01 50       	subi	r16, 0x01	; 1
     770:	11 09       	sbc	r17, r1

double readVoltage(){
	
	double voltage=0;
	double voltageSum=0;
	for (int i=0;i<16;i++)
     772:	01 15       	cp	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	79 f7       	brne	.-34     	; 0x756 <_Z11readVoltagev+0x2a>
	{
		 voltage= myADS1115.readVoltage();
		 voltageSum=voltageSum+voltage;
	}
	voltage = voltageSum/16;
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5d e3       	ldi	r21, 0x3D	; 61
     780:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
	char buffer0[10];
	//Convert double to stringw
	dtostrf(voltage, 6, 3, buffer0);
     788:	8e 01       	movw	r16, r28
     78a:	0f 5f       	subi	r16, 0xFF	; 255
     78c:	1f 4f       	sbci	r17, 0xFF	; 255
     78e:	23 e0       	ldi	r18, 0x03	; 3
     790:	46 e0       	ldi	r20, 0x06	; 6
     792:	0e 94 19 0b 	call	0x1632	; 0x1632 <dtostrf>
	//dtostrf(voltagePot,4,2,buffer1);
	myUART.uart_transmit_string(wiperv_msg);
     796:	68 e0       	ldi	r22, 0x08	; 8
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	8e ea       	ldi	r24, 0xAE	; 174
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     7a2:	b8 01       	movw	r22, r16
     7a4:	8e ea       	ldi	r24, 0xAE	; 174
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
	
	//get dB
	double dB = myVolTodB.getdB(voltage);
     7ac:	b7 01       	movw	r22, r14
     7ae:	a6 01       	movw	r20, r12
     7b0:	8b ea       	ldi	r24, 0xAB	; 171
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN7VolTodB5getdBEd>
	dtostrf(dB, 6, 3, buffer0);
     7b8:	23 e0       	ldi	r18, 0x03	; 3
     7ba:	46 e0       	ldi	r20, 0x06	; 6
     7bc:	0e 94 19 0b 	call	0x1632	; 0x1632 <dtostrf>
	char temp_msg[]="dB";
     7c0:	84 e6       	ldi	r24, 0x64	; 100
     7c2:	92 e4       	ldi	r25, 0x42	; 66
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	8b 87       	std	Y+11, r24	; 0x0b
     7c8:	9c 87       	std	Y+12, r25	; 0x0c
     7ca:	ad 87       	std	Y+13, r26	; 0x0d
	myUART.uart_transmit_string(temp_msg);
     7cc:	be 01       	movw	r22, r28
     7ce:	65 5f       	subi	r22, 0xF5	; 245
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	8e ea       	ldi	r24, 0xAE	; 174
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
	myUART.uart_transmit_string(buffer0);
     7da:	b8 01       	movw	r22, r16
     7dc:	8e ea       	ldi	r24, 0xAE	; 174
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
	
	return voltage;
}
     7e4:	c7 01       	movw	r24, r14
     7e6:	b6 01       	movw	r22, r12
     7e8:	2d 96       	adiw	r28, 0x0d	; 13
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	08 95       	ret

00000806 <_Z10moveUpDowni>:
		
}

void moveUpDown(int stepup){
	
	myStepper.step(stepup);
     806:	bc 01       	movw	r22, r24
     808:	8f ea       	ldi	r24, 0xAF	; 175
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN7Stepper4stepEi>
     810:	2f ef       	ldi	r18, 0xFF	; 255
     812:	83 ec       	ldi	r24, 0xC3	; 195
     814:	99 e0       	ldi	r25, 0x09	; 9
     816:	21 50       	subi	r18, 0x01	; 1
     818:	80 40       	sbci	r24, 0x00	; 0
     81a:	90 40       	sbci	r25, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <_Z10moveUpDowni+0x10>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <_Z10moveUpDowni+0x1a>
     820:	00 00       	nop
	_delay_ms(200);
	myStepper.motorOff();
     822:	8f ea       	ldi	r24, 0xAF	; 175
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN7Stepper8motorOffEv>
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	83 ed       	ldi	r24, 0xD3	; 211
     82e:	90 e3       	ldi	r25, 0x30	; 48
     830:	21 50       	subi	r18, 0x01	; 1
     832:	80 40       	sbci	r24, 0x00	; 0
     834:	90 40       	sbci	r25, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <_Z10moveUpDowni+0x2a>
     838:	00 c0       	rjmp	.+0      	; 0x83a <_Z10moveUpDowni+0x34>
     83a:	00 00       	nop
	_delay_ms(1000);
	readVoltage();
     83c:	0e 94 96 03 	call	0x72c	; 0x72c <_Z11readVoltagev>
     840:	08 95       	ret

00000842 <_Z15readVoltageLitev>:
}

double readVoltageLite(){
	
	double voltage=0;
	voltage= myADS1115.readVoltage();
     842:	8c ea       	ldi	r24, 0xAC	; 172
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN7ADS111511readVoltageEv>
	return voltage;
}
     84a:	08 95       	ret

0000084c <_Z5resetv>:

void reset(){
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	2c 97       	sbiw	r28, 0x0c	; 12
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
	    double presentVol= readVoltageLite();
     868:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
		double downLimit= 0.7;
		double upperLimit=4.0;
		
		//Move with big steps
		if (presentVol>downLimit)
     870:	23 e3       	ldi	r18, 0x33	; 51
     872:	33 e3       	ldi	r19, 0x33	; 51
     874:	43 e3       	ldi	r20, 0x33	; 51
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	0e 94 4d 0a 	call	0x149a	; 0x149a <__gesf2>
     87c:	18 16       	cp	r1, r24
     87e:	64 f5       	brge	.+88     	; 0x8d8 <_Z5resetv+0x8c>
		{
			int tempStep= ((presentVol-0.7)/0.026)*STEP_TO_DOWN;
     880:	23 e3       	ldi	r18, 0x33	; 51
     882:	33 e3       	ldi	r19, 0x33	; 51
     884:	43 e3       	ldi	r20, 0x33	; 51
     886:	5f e3       	ldi	r21, 0x3F	; 63
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	0e 94 99 08 	call	0x1132	; 0x1132 <__subsf3>
     890:	24 ef       	ldi	r18, 0xF4	; 244
     892:	3d ef       	ldi	r19, 0xFD	; 253
     894:	44 ed       	ldi	r20, 0xD4	; 212
     896:	5c e3       	ldi	r21, 0x3C	; 60
     898:	0e 94 02 09 	call	0x1204	; 0x1204 <__divsf3>
     89c:	6b 01       	movw	r12, r22
     89e:	7c 01       	movw	r14, r24
     8a0:	60 91 00 01 	lds	r22, 0x0100
     8a4:	70 91 01 01 	lds	r23, 0x0101
     8a8:	88 27       	eor	r24, r24
     8aa:	77 fd       	sbrc	r23, 7
     8ac:	80 95       	com	r24
     8ae:	98 2f       	mov	r25, r24
     8b0:	0e 94 9d 09 	call	0x133a	; 0x133a <__floatsisf>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3>
     8c0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixsfsi>
			moveUpDownLite(tempStep);
     8c4:	cb 01       	movw	r24, r22
     8c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <_Z5resetv+0x8c>
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
		{
			moveUpDownLite(STEP_TO_DOWN_4);
     8cc:	80 91 04 01 	lds	r24, 0x0104
     8d0:	90 91 05 01 	lds	r25, 0x0105
     8d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
			int tempStep= ((presentVol-0.7)/0.026)*STEP_TO_DOWN;
			moveUpDownLite(tempStep);
		}
		
		//Move with small steps
		while (readVoltageLite()>downLimit)
     8d8:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     8dc:	23 e3       	ldi	r18, 0x33	; 51
     8de:	33 e3       	ldi	r19, 0x33	; 51
     8e0:	43 e3       	ldi	r20, 0x33	; 51
     8e2:	5f e3       	ldi	r21, 0x3F	; 63
     8e4:	0e 94 4d 0a 	call	0x149a	; 0x149a <__gesf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	84 f3       	brlt	.-32     	; 0x8cc <_Z5resetv+0x80>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
		}
		
		double initVolt=readVoltageLite();
     8ec:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     8f0:	ab 01       	movw	r20, r22
     8f2:	bc 01       	movw	r22, r24
		myVolTodB.setInitVoltage(initVolt);
     8f4:	8b ea       	ldi	r24, 0xAB	; 171
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN7VolTodB14setInitVoltageEd>
		
		//Finish reset
		char msg[]="Reset down!";
     8fc:	8c e0       	ldi	r24, 0x0C	; 12
     8fe:	ea e8       	ldi	r30, 0x8A	; 138
     900:	f3 e0       	ldi	r31, 0x03	; 3
     902:	de 01       	movw	r26, r28
     904:	11 96       	adiw	r26, 0x01	; 1
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	8a 95       	dec	r24
     90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0x7>
		myUART.uart_transmit_string(msg);
     90e:	be 01       	movw	r22, r28
     910:	6f 5f       	subi	r22, 0xFF	; 255
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	8e ea       	ldi	r24, 0xAE	; 174
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
}
     91c:	2c 96       	adiw	r28, 0x0c	; 12
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	08 95       	ret

00000936 <_Z13goToTargetVold>:

void goToTargetVol(double targetVoltage){
     936:	8f 92       	push	r8
     938:	9f 92       	push	r9
     93a:	af 92       	push	r10
     93c:	bf 92       	push	r11
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	6b 01       	movw	r12, r22
     948:	7c 01       	movw	r14, r24
	double presentVoltage= readVoltageLite();
     94a:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     94e:	4b 01       	movw	r8, r22
     950:	5c 01       	movw	r10, r24
	if (targetVoltage<0.6||targetVoltage>29)
     952:	2a e9       	ldi	r18, 0x9A	; 154
     954:	39 e9       	ldi	r19, 0x99	; 153
     956:	49 e1       	ldi	r20, 0x19	; 25
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	c7 01       	movw	r24, r14
     95c:	b6 01       	movw	r22, r12
     95e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     962:	88 23       	and	r24, r24
     964:	0c f4       	brge	.+2      	; 0x968 <_Z13goToTargetVold+0x32>
     966:	7c c0       	rjmp	.+248    	; 0xa60 <_Z13goToTargetVold+0x12a>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	48 ee       	ldi	r20, 0xE8	; 232
     96e:	51 e4       	ldi	r21, 0x41	; 65
     970:	c7 01       	movw	r24, r14
     972:	b6 01       	movw	r22, r12
     974:	0e 94 4d 0a 	call	0x149a	; 0x149a <__gesf2>
     978:	18 16       	cp	r1, r24
     97a:	0c f4       	brge	.+2      	; 0x97e <_Z13goToTargetVold+0x48>
     97c:	71 c0       	rjmp	.+226    	; 0xa60 <_Z13goToTargetVold+0x12a>
	{
	}
	else{
	if (targetVoltage>presentVoltage)
     97e:	a7 01       	movw	r20, r14
     980:	96 01       	movw	r18, r12
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     98a:	88 23       	and	r24, r24
     98c:	ac f5       	brge	.+106    	; 0x9f8 <_Z13goToTargetVold+0xc2>
	{
		int tempStep= ((targetVoltage-presentVoltage)/0.026)*STEP_TO_UP;
     98e:	a5 01       	movw	r20, r10
     990:	94 01       	movw	r18, r8
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 99 08 	call	0x1132	; 0x1132 <__subsf3>
     99a:	24 ef       	ldi	r18, 0xF4	; 244
     99c:	3d ef       	ldi	r19, 0xFD	; 253
     99e:	44 ed       	ldi	r20, 0xD4	; 212
     9a0:	5c e3       	ldi	r21, 0x3C	; 60
     9a2:	0e 94 02 09 	call	0x1204	; 0x1204 <__divsf3>
     9a6:	4b 01       	movw	r8, r22
     9a8:	5c 01       	movw	r10, r24
     9aa:	60 91 02 01 	lds	r22, 0x0102
     9ae:	70 91 03 01 	lds	r23, 0x0103
     9b2:	88 27       	eor	r24, r24
     9b4:	77 fd       	sbrc	r23, 7
     9b6:	80 95       	com	r24
     9b8:	98 2f       	mov	r25, r24
     9ba:	0e 94 9d 09 	call	0x133a	; 0x133a <__floatsisf>
     9be:	9b 01       	movw	r18, r22
     9c0:	ac 01       	movw	r20, r24
     9c2:	c5 01       	movw	r24, r10
     9c4:	b4 01       	movw	r22, r8
     9c6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3>
     9ca:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixsfsi>
		moveUpDownLite(tempStep);
     9ce:	cb 01       	movw	r24, r22
     9d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
		
		while (readVoltageLite()<(targetVoltage))
     9d4:	06 c0       	rjmp	.+12     	; 0x9e2 <_Z13goToTargetVold+0xac>
		{
			moveUpDownLite(STEP_TO_UP_4);
     9d6:	80 91 06 01 	lds	r24, 0x0106
     9da:	90 91 07 01 	lds	r25, 0x0107
     9de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
	if (targetVoltage>presentVoltage)
	{
		int tempStep= ((targetVoltage-presentVoltage)/0.026)*STEP_TO_UP;
		moveUpDownLite(tempStep);
		
		while (readVoltageLite()<(targetVoltage))
     9e2:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	c7 01       	movw	r24, r14
     9ec:	b6 01       	movw	r22, r12
     9ee:	0e 94 4d 0a 	call	0x149a	; 0x149a <__gesf2>
     9f2:	18 16       	cp	r1, r24
     9f4:	84 f3       	brlt	.-32     	; 0x9d6 <_Z13goToTargetVold+0xa0>
     9f6:	34 c0       	rjmp	.+104    	; 0xa60 <_Z13goToTargetVold+0x12a>
		}
		
		
	}
	else{
		int tempStep= ((presentVoltage-targetVoltage)/0.026)*STEP_TO_DOWN;
     9f8:	a7 01       	movw	r20, r14
     9fa:	96 01       	movw	r18, r12
     9fc:	c5 01       	movw	r24, r10
     9fe:	b4 01       	movw	r22, r8
     a00:	0e 94 99 08 	call	0x1132	; 0x1132 <__subsf3>
     a04:	24 ef       	ldi	r18, 0xF4	; 244
     a06:	3d ef       	ldi	r19, 0xFD	; 253
     a08:	44 ed       	ldi	r20, 0xD4	; 212
     a0a:	5c e3       	ldi	r21, 0x3C	; 60
     a0c:	0e 94 02 09 	call	0x1204	; 0x1204 <__divsf3>
     a10:	4b 01       	movw	r8, r22
     a12:	5c 01       	movw	r10, r24
     a14:	60 91 00 01 	lds	r22, 0x0100
     a18:	70 91 01 01 	lds	r23, 0x0101
     a1c:	88 27       	eor	r24, r24
     a1e:	77 fd       	sbrc	r23, 7
     a20:	80 95       	com	r24
     a22:	98 2f       	mov	r25, r24
     a24:	0e 94 9d 09 	call	0x133a	; 0x133a <__floatsisf>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	c5 01       	movw	r24, r10
     a2e:	b4 01       	movw	r22, r8
     a30:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3>
     a34:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixsfsi>
		moveUpDownLite(tempStep);
     a38:	cb 01       	movw	r24, r22
     a3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
		
		while (readVoltageLite()>(targetVoltage))
     a3e:	06 c0       	rjmp	.+12     	; 0xa4c <_Z13goToTargetVold+0x116>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
     a40:	80 91 04 01 	lds	r24, 0x0104
     a44:	90 91 05 01 	lds	r25, 0x0105
     a48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z14moveUpDownLitei>
	}
	else{
		int tempStep= ((presentVoltage-targetVoltage)/0.026)*STEP_TO_DOWN;
		moveUpDownLite(tempStep);
		
		while (readVoltageLite()>(targetVoltage))
     a4c:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     a50:	9b 01       	movw	r18, r22
     a52:	ac 01       	movw	r20, r24
     a54:	c7 01       	movw	r24, r14
     a56:	b6 01       	movw	r22, r12
     a58:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     a5c:	88 23       	and	r24, r24
     a5e:	84 f3       	brlt	.-32     	; 0xa40 <_Z13goToTargetVold+0x10a>
		{
			moveUpDownLite(STEP_TO_DOWN_4);
		}
	}
	}
	readVoltage();
     a60:	0e 94 96 03 	call	0x72c	; 0x72c <_Z11readVoltagev>
}
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	bf 90       	pop	r11
     a6e:	af 90       	pop	r10
     a70:	9f 90       	pop	r9
     a72:	8f 90       	pop	r8
     a74:	08 95       	ret

00000a76 <__vector_18>:
		stepperStop();
}



ISR (USART_RX_vect){
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	2f 93       	push	r18
     a8e:	3f 93       	push	r19
     a90:	4f 93       	push	r20
     a92:	5f 93       	push	r21
     a94:	6f 93       	push	r22
     a96:	7f 93       	push	r23
     a98:	8f 93       	push	r24
     a9a:	9f 93       	push	r25
     a9c:	af 93       	push	r26
     a9e:	bf 93       	push	r27
     aa0:	ef 93       	push	r30
     aa2:	ff 93       	push	r31
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	2a 97       	sbiw	r28, 0x0a	; 10
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	cd bf       	out	0x3d, r28	; 61
	char userInput = UDR0;
     ab2:	e6 ec       	ldi	r30, 0xC6	; 198
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	20 81       	ld	r18, Z
	UDR0=userInput; // echo back
     ab8:	20 83       	st	Z, r18
	
	if (userInput !=9) //tab - use to confirm the input
     aba:	29 30       	cpi	r18, 0x09	; 9
     abc:	81 f0       	breq	.+32     	; 0xade <__vector_18+0x68>
	{
		userInputSub=userInput;//store the last input
     abe:	20 93 a0 03 	sts	0x03A0, r18
		userInputString[userInputIdex]=userInput;//store the string input
     ac2:	80 91 9e 03 	lds	r24, 0x039E
     ac6:	90 91 9f 03 	lds	r25, 0x039F
     aca:	fc 01       	movw	r30, r24
     acc:	ef 55       	subi	r30, 0x5F	; 95
     ace:	fc 4f       	sbci	r31, 0xFC	; 252
     ad0:	20 83       	st	Z, r18
		userInputIdex++;
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	90 93 9f 03 	sts	0x039F, r25
     ad8:	80 93 9e 03 	sts	0x039E, r24
     adc:	b3 c0       	rjmp	.+358    	; 0xc44 <__vector_18+0x1ce>
	}
	
	else{
	
	//Setting the mode
	if (userInputSub=='A'||userInputSub=='a')
     ade:	90 91 a0 03 	lds	r25, 0x03A0
     ae2:	89 2f       	mov	r24, r25
     ae4:	8f 7d       	andi	r24, 0xDF	; 223
     ae6:	81 34       	cpi	r24, 0x41	; 65
     ae8:	61 f4       	brne	.+24     	; 0xb02 <__vector_18+0x8c>
	{
		replyList(1);
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelA=true;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 93 9d 03 	sts	0x039D, r24
		modelR=false;
     af8:	10 92 9c 03 	sts	0x039C, r1
		modelT=false;
     afc:	10 92 9b 03 	sts	0x039B, r1
     b00:	26 c0       	rjmp	.+76     	; 0xb4e <__vector_18+0xd8>
	}

	else if (userInputSub=='R'||userInputSub=='r') //reset to the minimum attenuation
     b02:	82 35       	cpi	r24, 0x52	; 82
     b04:	61 f4       	brne	.+24     	; 0xb1e <__vector_18+0xa8>
	{
		replyList(3);
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelR=true;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 9c 03 	sts	0x039C, r24
		modelA=false;
     b14:	10 92 9d 03 	sts	0x039D, r1
		modelT=false;
     b18:	10 92 9b 03 	sts	0x039B, r1
     b1c:	18 c0       	rjmp	.+48     	; 0xb4e <__vector_18+0xd8>
		
	}
	else if (userInputSub=='T'||userInputSub=='t') //Target voltage mode
     b1e:	84 35       	cpi	r24, 0x54	; 84
     b20:	61 f4       	brne	.+24     	; 0xb3a <__vector_18+0xc4>
	{
		replyList(4);
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 a9 02 	call	0x552	; 0x552 <_Z9replyListi>
		modelR=false;
     b2a:	10 92 9c 03 	sts	0x039C, r1
		modelA=false;
     b2e:	10 92 9d 03 	sts	0x039D, r1
		modelT=true;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 9b 03 	sts	0x039B, r24
     b38:	0a c0       	rjmp	.+20     	; 0xb4e <__vector_18+0xd8>
		
	}
	else if (userInputSub==27)//ESC
     b3a:	9b 31       	cpi	r25, 0x1B	; 27
     b3c:	41 f4       	brne	.+16     	; 0xb4e <__vector_18+0xd8>
	{
		menuStart();
     b3e:	0e 94 0a 03 	call	0x614	; 0x614 <_Z9menuStartv>
		modelA=false;
     b42:	10 92 9d 03 	sts	0x039D, r1
		modelR=false;
     b46:	10 92 9c 03 	sts	0x039C, r1
		modelT=false;
     b4a:	10 92 9b 03 	sts	0x039B, r1
	}

	
	//Mode A: Move up or down step by step
	if (modelA)
     b4e:	80 91 9d 03 	lds	r24, 0x039D
     b52:	88 23       	and	r24, r24
     b54:	41 f1       	breq	.+80     	; 0xba6 <__vector_18+0x130>
	{
		if (userInputSub=='w'||userInputSub=='W')
     b56:	80 91 a0 03 	lds	r24, 0x03A0
     b5a:	8f 7d       	andi	r24, 0xDF	; 223
     b5c:	87 35       	cpi	r24, 0x57	; 87
     b5e:	81 f4       	brne	.+32     	; 0xb80 <__vector_18+0x10a>
		{
			if (readVoltageLite()<4.00)
     b60:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e8       	ldi	r20, 0x80	; 128
     b6a:	50 e4       	ldi	r21, 0x40	; 64
     b6c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     b70:	88 23       	and	r24, r24
     b72:	0c f0       	brlt	.+2      	; 0xb76 <__vector_18+0x100>
     b74:	61 c0       	rjmp	.+194    	; 0xc38 <__vector_18+0x1c2>
			{
				moveUpDown(2);//STEP_TO_UP_4
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 03 04 	call	0x806	; 0x806 <_Z10moveUpDowni>
     b7e:	5c c0       	rjmp	.+184    	; 0xc38 <__vector_18+0x1c2>
			}
			
		}
		else if (userInputSub=='s'||userInputSub=='S')
     b80:	83 35       	cpi	r24, 0x53	; 83
     b82:	09 f0       	breq	.+2      	; 0xb86 <__vector_18+0x110>
     b84:	59 c0       	rjmp	.+178    	; 0xc38 <__vector_18+0x1c2>
		{
			if (readVoltageLite()>0.2)
     b86:	0e 94 21 04 	call	0x842	; 0x842 <_Z15readVoltageLitev>
     b8a:	2d ec       	ldi	r18, 0xCD	; 205
     b8c:	3c ec       	ldi	r19, 0xCC	; 204
     b8e:	4c e4       	ldi	r20, 0x4C	; 76
     b90:	5e e3       	ldi	r21, 0x3E	; 62
     b92:	0e 94 4d 0a 	call	0x149a	; 0x149a <__gesf2>
     b96:	18 16       	cp	r1, r24
     b98:	0c f0       	brlt	.+2      	; 0xb9c <__vector_18+0x126>
     b9a:	4e c0       	rjmp	.+156    	; 0xc38 <__vector_18+0x1c2>
			{
				moveUpDown(-2);//STEP_TO_DOWN_4
     b9c:	8e ef       	ldi	r24, 0xFE	; 254
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	0e 94 03 04 	call	0x806	; 0x806 <_Z10moveUpDowni>
     ba4:	49 c0       	rjmp	.+146    	; 0xc38 <__vector_18+0x1c2>
			}
			
		}
	}
	
	else if (modelR)
     ba6:	80 91 9c 03 	lds	r24, 0x039C
     baa:	88 23       	and	r24, r24
     bac:	19 f0       	breq	.+6      	; 0xbb4 <__vector_18+0x13e>
	{
		reset();
     bae:	0e 94 26 04 	call	0x84c	; 0x84c <_Z5resetv>
     bb2:	42 c0       	rjmp	.+132    	; 0xc38 <__vector_18+0x1c2>
	}
	
	else if (modelT)
     bb4:	80 91 9b 03 	lds	r24, 0x039B
     bb8:	88 23       	and	r24, r24
     bba:	09 f4       	brne	.+2      	; 0xbbe <__vector_18+0x148>
     bbc:	3d c0       	rjmp	.+122    	; 0xc38 <__vector_18+0x1c2>
	{
		if (userInputSub=='T'||userInputSub=='t')
     bbe:	80 91 a0 03 	lds	r24, 0x03A0
     bc2:	8f 7d       	andi	r24, 0xDF	; 223
     bc4:	84 35       	cpi	r24, 0x54	; 84
     bc6:	c1 f1       	breq	.+112    	; 0xc38 <__vector_18+0x1c2>
		{ //do nothing
		}
		else{
		char bufferx[10];
		double dB= atof(userInputString);
     bc8:	81 ea       	ldi	r24, 0xA1	; 161
     bca:	93 e0       	ldi	r25, 0x03	; 3
     bcc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <atof>
     bd0:	6b 01       	movw	r12, r22
     bd2:	7c 01       	movw	r14, r24
		if (dB>0&&dB<=29)
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	a9 01       	movw	r20, r18
     bda:	0e 94 4d 0a 	call	0x149a	; 0x149a <__gesf2>
     bde:	18 16       	cp	r1, r24
     be0:	5c f5       	brge	.+86     	; 0xc38 <__vector_18+0x1c2>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	48 ee       	ldi	r20, 0xE8	; 232
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	c7 01       	movw	r24, r14
     bec:	b6 01       	movw	r22, r12
     bee:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	0c f1       	brlt	.+66     	; 0xc38 <__vector_18+0x1c2>
		{
			double targetVol=myVolTodB.getVoltage(dB);
     bf6:	b7 01       	movw	r22, r14
     bf8:	a6 01       	movw	r20, r12
     bfa:	8b ea       	ldi	r24, 0xAB	; 171
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN7VolTodB10getVoltageEd>
     c02:	6b 01       	movw	r12, r22
     c04:	7c 01       	movw	r14, r24
			if(targetVol!=0){
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	a9 01       	movw	r20, r18
     c0c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
     c10:	88 23       	and	r24, r24
     c12:	91 f0       	breq	.+36     	; 0xc38 <__vector_18+0x1c2>
			dtostrf(targetVol,4,2,bufferx);
     c14:	8e 01       	movw	r16, r28
     c16:	0f 5f       	subi	r16, 0xFF	; 255
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	22 e0       	ldi	r18, 0x02	; 2
     c1c:	44 e0       	ldi	r20, 0x04	; 4
     c1e:	c7 01       	movw	r24, r14
     c20:	b6 01       	movw	r22, r12
     c22:	0e 94 19 0b 	call	0x1632	; 0x1632 <dtostrf>
			myUART.uart_transmit_string(bufferx);
     c26:	b8 01       	movw	r22, r16
     c28:	8e ea       	ldi	r24, 0xAE	; 174
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN8UARTtool20uart_transmit_stringEPc>
			goToTargetVol(targetVol);
     c30:	c7 01       	movw	r24, r14
     c32:	b6 01       	movw	r22, r12
     c34:	0e 94 9b 04 	call	0x936	; 0x936 <_Z13goToTargetVold>
			}
		}
		}
	}
	
	strcpy(userInputString,"");
     c38:	10 92 a1 03 	sts	0x03A1, r1
	userInputIdex=0;
     c3c:	10 92 9f 03 	sts	0x039F, r1
     c40:	10 92 9e 03 	sts	0x039E, r1
	}
	

	
	
}
     c44:	2a 96       	adiw	r28, 0x0a	; 10
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	ff 91       	pop	r31
     c56:	ef 91       	pop	r30
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <_GLOBAL__sub_I_myStepper>:
#include "ADC.h"
#include "UARTtool.h"
#include "Menu.h"
#include "VolTodB.h"

Stepper  myStepper;
     c82:	8f ea       	ldi	r24, 0xAF	; 175
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZN7StepperC1Ev>
UARTtool myUART;
     c8a:	8e ea       	ldi	r24, 0xAE	; 174
     c8c:	93 e0       	ldi	r25, 0x03	; 3
     c8e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN8UARTtoolC1Ev>
ADC2     myADC;
     c92:	8d ea       	ldi	r24, 0xAD	; 173
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	0e 94 05 01 	call	0x20a	; 0x20a <_ZN4ADC2C1Ev>
ADS1115  myADS1115;
     c9a:	8c ea       	ldi	r24, 0xAC	; 172
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	0e 94 12 01 	call	0x224	; 0x224 <_ZN7ADS1115C1Ev>
VolTodB  myVolTodB;
     ca2:	8b ea       	ldi	r24, 0xAB	; 171
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 89 01 	call	0x312	; 0x312 <_ZN7VolTodBC1Ev>
     caa:	08 95       	ret

00000cac <_ZN6MillisC1Ev>:
uint64_t _millis = 0;
uint16_t _1000us = 0;
uint64_t old_millis = 0;
	

Millis::Millis(void){
     cac:	08 95       	ret

00000cae <__vector_16>:
	;
	}

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
     cae:	1f 92       	push	r1
     cb0:	0f 92       	push	r0
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	0f 92       	push	r0
     cb6:	11 24       	eor	r1, r1
     cb8:	2f 93       	push	r18
     cba:	3f 93       	push	r19
     cbc:	4f 93       	push	r20
     cbe:	5f 93       	push	r21
     cc0:	6f 93       	push	r22
     cc2:	7f 93       	push	r23
     cc4:	8f 93       	push	r24
     cc6:	9f 93       	push	r25
     cc8:	af 93       	push	r26
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
	_1000us += 128;
     cce:	e0 91 c3 03 	lds	r30, 0x03C3
     cd2:	f0 91 c4 03 	lds	r31, 0x03C4
     cd6:	e0 58       	subi	r30, 0x80	; 128
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	f0 93 c4 03 	sts	0x03C4, r31
     cde:	e0 93 c3 03 	sts	0x03C3, r30
	while (_1000us > 1000) {
     ce2:	e9 3e       	cpi	r30, 0xE9	; 233
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	f8 07       	cpc	r31, r24
     ce8:	68 f1       	brcs	.+90     	; 0xd44 <__vector_16+0x96>
     cea:	20 91 c5 03 	lds	r18, 0x03C5
     cee:	30 91 c6 03 	lds	r19, 0x03C6
     cf2:	40 91 c7 03 	lds	r20, 0x03C7
     cf6:	50 91 c8 03 	lds	r21, 0x03C8
     cfa:	60 91 c9 03 	lds	r22, 0x03C9
     cfe:	70 91 ca 03 	lds	r23, 0x03CA
     d02:	80 91 cb 03 	lds	r24, 0x03CB
     d06:	90 91 cc 03 	lds	r25, 0x03CC
		_millis++;
     d0a:	a1 e0       	ldi	r26, 0x01	; 1
     d0c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__adddi3_s8>
		_1000us -= 1000;
     d10:	e8 5e       	subi	r30, 0xE8	; 232
     d12:	f3 40       	sbci	r31, 0x03	; 3

/* interrupts routines */
// timer overflow occur every 0.256 ms
ISR(TIMER0_OVF_vect) {
	_1000us += 128;
	while (_1000us > 1000) {
     d14:	e9 3e       	cpi	r30, 0xE9	; 233
     d16:	a3 e0       	ldi	r26, 0x03	; 3
     d18:	fa 07       	cpc	r31, r26
     d1a:	b8 f7       	brcc	.-18     	; 0xd0a <__vector_16+0x5c>
     d1c:	20 93 c5 03 	sts	0x03C5, r18
     d20:	30 93 c6 03 	sts	0x03C6, r19
     d24:	40 93 c7 03 	sts	0x03C7, r20
     d28:	50 93 c8 03 	sts	0x03C8, r21
     d2c:	60 93 c9 03 	sts	0x03C9, r22
     d30:	70 93 ca 03 	sts	0x03CA, r23
     d34:	80 93 cb 03 	sts	0x03CB, r24
     d38:	90 93 cc 03 	sts	0x03CC, r25
     d3c:	f0 93 c4 03 	sts	0x03C4, r31
     d40:	e0 93 c3 03 	sts	0x03C3, r30
		_millis++;
		_1000us -= 1000;
	}
}
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	0f 90       	pop	r0
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	0f 90       	pop	r0
     d60:	1f 90       	pop	r1
     d62:	18 95       	reti

00000d64 <_ZN6Millis6millisEv>:

// safe access to millis counter
uint64_t Millis::millis() {
	uint64_t m;
	cli();
     d64:	f8 94       	cli
	m = _millis;
     d66:	20 91 c5 03 	lds	r18, 0x03C5
     d6a:	30 91 c6 03 	lds	r19, 0x03C6
     d6e:	40 91 c7 03 	lds	r20, 0x03C7
     d72:	50 91 c8 03 	lds	r21, 0x03C8
     d76:	60 91 c9 03 	lds	r22, 0x03C9
     d7a:	70 91 ca 03 	lds	r23, 0x03CA
     d7e:	80 91 cb 03 	lds	r24, 0x03CB
     d82:	90 91 cc 03 	lds	r25, 0x03CC
	sei();
     d86:	78 94       	sei
	return m;
}
     d88:	08 95       	ret

00000d8a <_ZN6Millis5setupEv>:
	//PORTB |= _BV(PB3); // turn the LED on

	/* interrup setup */
	// prescale timer0 to 1/8th the clock rate
	// overflow timer0 every 0.256 ms
	TCCR0B |= (1<<CS01);
     d8a:	85 b5       	in	r24, 0x25	; 37
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	85 bd       	out	0x25, r24	; 37
	// enable timer overflow interrupt
	TIMSK0  |= 1<<TOIE0;
     d90:	ee e6       	ldi	r30, 0x6E	; 110
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	81 60       	ori	r24, 0x01	; 1
     d98:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
     d9a:	78 94       	sei
     d9c:	08 95       	ret

00000d9e <_Z9pin_setupv>:
   }
	
}

void pin_setup(){
	DDRD &= !_BV(5); //PD5  T1
     d9e:	8a b1       	in	r24, 0x0a	; 10
     da0:	1a b8       	out	0x0a, r1	; 10
	//DDRD &= !_BV(3); //INT1
	DDRD |= _BV(7);
     da2:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= _BV(7); //Used to enable the L293D
     da4:	5f 9a       	sbi	0x0b, 7	; 11
     da6:	08 95       	ret

00000da8 <_Z14register_setupv>:
	
}

void register_setup(){
	//Enable T1
	TCCR1B |= _BV(CS10) | _BV(CS11) | _BV(CS12);
     da8:	e1 e8       	ldi	r30, 0x81	; 129
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	87 60       	ori	r24, 0x07	; 7
     db0:	80 83       	st	Z, r24
     db2:	08 95       	ret

00000db4 <main>:
Menu     myMenu;


int main(void)
{
	pin_setup();
     db4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_Z9pin_setupv>
	register_setup();
     db8:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z14register_setupv>
	sei();
     dbc:	78 94       	sei
	myMenu.MenuStart();
     dbe:	8d ec       	ldi	r24, 0xCD	; 205
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	0e 94 89 03 	call	0x712	; 0x712 <_ZN4Menu9MenuStartEv>
     dc6:	ff cf       	rjmp	.-2      	; 0xdc6 <main+0x12>

00000dc8 <_GLOBAL__sub_I_myMenu>:
#include "Menu.h"

void pin_setup();
void register_setup();

Menu     myMenu;
     dc8:	8d ec       	ldi	r24, 0xCD	; 205
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4MenuC1Ev>
     dd0:	08 95       	ret

00000dd2 <_ZN7StepperC1Ev>:
 *   Sets which wires should control the motor.
 */

Millis myMillis;

Stepper::Stepper()
     dd2:	fc 01       	movw	r30, r24
{
  step_number = 0;      // which step the motor is on
     dd4:	15 86       	std	Z+13, r1	; 0x0d
     dd6:	14 86       	std	Z+12, r1	; 0x0c
  speed = 0;        // the motor speed, in revolutions per minute
     dd8:	13 82       	std	Z+3, r1	; 0x03
     dda:	12 82       	std	Z+2, r1	; 0x02
  direction = 0;      // motor direction
     ddc:	11 82       	std	Z+1, r1	; 0x01
     dde:	10 82       	st	Z, r1
  last_step_time = 0;    // time stamp in ms of the last step taken
     de0:	10 8a       	std	Z+16, r1	; 0x10
     de2:	11 8a       	std	Z+17, r1	; 0x11
     de4:	12 8a       	std	Z+18, r1	; 0x12
     de6:	13 8a       	std	Z+19, r1	; 0x13
  number_of_steps = 1024;
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	94 e0       	ldi	r25, 0x04	; 4
     dec:	91 87       	std	Z+9, r25	; 0x09
     dee:	80 87       	std	Z+8, r24	; 0x08
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);
  */
  
  DDRB= 0X0F;
     df0:	8f e0       	ldi	r24, 0x0F	; 15
     df2:	84 b9       	out	0x04, r24	; 4
  PORTB &= !_BV(0);
     df4:	85 b1       	in	r24, 0x05	; 5
     df6:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(1);
     df8:	85 b1       	in	r24, 0x05	; 5
     dfa:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(2);
     dfc:	85 b1       	in	r24, 0x05	; 5
     dfe:	15 b8       	out	0x05, r1	; 5
  PORTB &= !_BV(3);
     e00:	85 b1       	in	r24, 0x05	; 5
     e02:	15 b8       	out	0x05, r1	; 5
  
  // pin_count is used by the stepMotor() method:  
  pin_count = 4; 
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	93 87       	std	Z+11, r25	; 0x0b
     e0a:	82 87       	std	Z+10, r24	; 0x0a
  
  //Initialize the milis
  
  myMillis.setup();
     e0c:	8e ec       	ldi	r24, 0xCE	; 206
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN6Millis5setupEv>
     e14:	08 95       	ret

00000e16 <_ZN7Stepper8setSpeedEl>:
/*
  Sets the speed in revs per minute

*/
void Stepper::setSpeed(long whatSpeed)
{
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	ec 01       	movw	r28, r24
     e24:	6a 01       	movw	r12, r20
     e26:	7b 01       	movw	r14, r22
  step_delay = 60L * 1000L / this->number_of_steps / whatSpeed;
     e28:	28 85       	ldd	r18, Y+8	; 0x08
     e2a:	39 85       	ldd	r19, Y+9	; 0x09
     e2c:	44 27       	eor	r20, r20
     e2e:	37 fd       	sbrc	r19, 7
     e30:	40 95       	com	r20
     e32:	54 2f       	mov	r21, r20
     e34:	60 e6       	ldi	r22, 0x60	; 96
     e36:	7a ee       	ldi	r23, 0xEA	; 234
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__divmodsi4>
     e40:	ca 01       	movw	r24, r20
     e42:	b9 01       	movw	r22, r18
     e44:	a7 01       	movw	r20, r14
     e46:	96 01       	movw	r18, r12
     e48:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__divmodsi4>
     e4c:	2c 83       	std	Y+4, r18	; 0x04
     e4e:	3d 83       	std	Y+5, r19	; 0x05
     e50:	4e 83       	std	Y+6, r20	; 0x06
     e52:	5f 83       	std	Y+7, r21	; 0x07
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	08 95       	ret

00000e62 <_ZN7Stepper9stepMotorEi>:
		PORTB |= _BV(3);
		PORTB &= !_BV(3);
		
	*/
   
	   switch (thisStep) {
     e62:	68 30       	cpi	r22, 0x08	; 8
     e64:	71 05       	cpc	r23, r1
     e66:	08 f0       	brcs	.+2      	; 0xe6a <_ZN7Stepper9stepMotorEi+0x8>
     e68:	40 c0       	rjmp	.+128    	; 0xeea <_ZN7Stepper9stepMotorEi+0x88>
     e6a:	fb 01       	movw	r30, r22
     e6c:	ec 5c       	subi	r30, 0xCC	; 204
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__tablejump2__>
		   
		   case 0:    // 0011
		   PORTB &= !_BV(0);
     e74:	85 b1       	in	r24, 0x05	; 5
     e76:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     e78:	85 b1       	in	r24, 0x05	; 5
     e7a:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(3);
     e7c:	2b 9a       	sbi	0x05, 3	; 5
		   PORTB |= _BV(2);
     e7e:	2a 9a       	sbi	0x05, 2	; 5
		   break;
     e80:	08 95       	ret
		   
		   case 1:    // 0001
		   PORTB &= !_BV(0);
     e82:	85 b1       	in	r24, 0x05	; 5
     e84:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     e86:	85 b1       	in	r24, 0x05	; 5
     e88:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     e8a:	85 b1       	in	r24, 0x05	; 5
     e8c:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(3);
     e8e:	2b 9a       	sbi	0x05, 3	; 5
		   break;
     e90:	08 95       	ret
		   
		   case 2:    // 0101
           PORTB &= !_BV(0);
     e92:	85 b1       	in	r24, 0x05	; 5
     e94:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     e96:	85 b1       	in	r24, 0x05	; 5
     e98:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(1);
     e9a:	29 9a       	sbi	0x05, 1	; 5
		   PORTB |= _BV(3);
     e9c:	2b 9a       	sbi	0x05, 3	; 5
		   break;
     e9e:	08 95       	ret
		   
		   case 3:    // 0100
           PORTB &= !_BV(0);
     ea0:	85 b1       	in	r24, 0x05	; 5
     ea2:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(2);
     ea4:	85 b1       	in	r24, 0x05	; 5
     ea6:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     ea8:	85 b1       	in	r24, 0x05	; 5
     eaa:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(1);
     eac:	29 9a       	sbi	0x05, 1	; 5
		   break;
     eae:	08 95       	ret
		   
		   case 4:    //1100
		   PORTB &= !_BV(2);
     eb0:	85 b1       	in	r24, 0x05	; 5
     eb2:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     eb4:	85 b1       	in	r24, 0x05	; 5
     eb6:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(0);
     eb8:	28 9a       	sbi	0x05, 0	; 5
		   PORTB |= _BV(1);
     eba:	29 9a       	sbi	0x05, 1	; 5
		   break;
     ebc:	08 95       	ret
		   
		   case 5:    //1000
		   PORTB &= !_BV(2);
     ebe:	85 b1       	in	r24, 0x05	; 5
     ec0:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(3);
     ec2:	85 b1       	in	r24, 0x05	; 5
     ec4:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     ec6:	85 b1       	in	r24, 0x05	; 5
     ec8:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(0);
     eca:	28 9a       	sbi	0x05, 0	; 5
		   break;
     ecc:	08 95       	ret
		   
		   case 6:    //0010
		   PORTB &= !_BV(3);
     ece:	85 b1       	in	r24, 0x05	; 5
     ed0:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     ed2:	85 b1       	in	r24, 0x05	; 5
     ed4:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(2);
     ed6:	2a 9a       	sbi	0x05, 2	; 5
		   PORTB |= _BV(0);
     ed8:	28 9a       	sbi	0x05, 0	; 5
		   break;
     eda:	08 95       	ret
		   
		   case 7:    //1010
		   PORTB &= !_BV(3);
     edc:	85 b1       	in	r24, 0x05	; 5
     ede:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(1);
     ee0:	85 b1       	in	r24, 0x05	; 5
     ee2:	15 b8       	out	0x05, r1	; 5
		   PORTB &= !_BV(0);
     ee4:	85 b1       	in	r24, 0x05	; 5
     ee6:	15 b8       	out	0x05, r1	; 5
		   PORTB |= _BV(2);
     ee8:	2a 9a       	sbi	0x05, 2	; 5
     eea:	08 95       	ret

00000eec <_ZN7Stepper4stepEi>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
   the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{  
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	4f 92       	push	r4
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	00 d0       	rcall	.+0      	; 0xf12 <_ZN7Stepper4stepEi+0x26>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <_ZN7Stepper4stepEi+0x28>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	9c 83       	std	Y+4, r25	; 0x04
     f1a:	8b 83       	std	Y+3, r24	; 0x03
  int steps_left = abs(steps_to_move);  // how many steps to take
     f1c:	4b 01       	movw	r8, r22
     f1e:	77 23       	and	r23, r23
     f20:	24 f4       	brge	.+8      	; 0xf2a <_ZN7Stepper4stepEi+0x3e>
     f22:	88 24       	eor	r8, r8
     f24:	99 24       	eor	r9, r9
     f26:	86 1a       	sub	r8, r22
     f28:	97 0a       	sbc	r9, r23
     f2a:	9a 82       	std	Y+2, r9	; 0x02
     f2c:	89 82       	std	Y+1, r8	; 0x01
  
  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) {direction = 1;}
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	34 f4       	brge	.+12     	; 0xf40 <_ZN7Stepper4stepEi+0x54>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	ab 81       	ldd	r26, Y+3	; 0x03
     f3a:	bc 81       	ldd	r27, Y+4	; 0x04
     f3c:	8d 93       	st	X+, r24
     f3e:	9c 93       	st	X, r25
  if (steps_to_move < 0) {direction = 0;}
     f40:	77 23       	and	r23, r23
     f42:	0c f0       	brlt	.+2      	; 0xf46 <_ZN7Stepper4stepEi+0x5a>
     f44:	83 c0       	rjmp	.+262    	; 0x104c <_ZN7Stepper4stepEi+0x160>
     f46:	eb 81       	ldd	r30, Y+3	; 0x03
     f48:	fc 81       	ldd	r31, Y+4	; 0x04
     f4a:	11 82       	std	Z+1, r1	; 0x01
     f4c:	10 82       	st	Z, r1
     f4e:	7e c0       	rjmp	.+252    	; 0x104c <_ZN7Stepper4stepEi+0x160>
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
  // move only if the appropriate delay has passed:
  if (myMillis.millis() - last_step_time >= step_delay) {//this->step_delay
     f50:	8e ec       	ldi	r24, 0xCE	; 206
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN6Millis6millisEv>
     f58:	ab 81       	ldd	r26, Y+3	; 0x03
     f5a:	bc 81       	ldd	r27, Y+4	; 0x04
     f5c:	50 96       	adiw	r26, 0x10	; 16
     f5e:	ed 90       	ld	r14, X+
     f60:	fd 90       	ld	r15, X+
     f62:	0d 91       	ld	r16, X+
     f64:	1c 91       	ld	r17, X
     f66:	53 97       	sbiw	r26, 0x13	; 19
     f68:	27 01       	movw	r4, r14
     f6a:	38 01       	movw	r6, r16
     f6c:	77 0c       	add	r7, r7
     f6e:	44 08       	sbc	r4, r4
     f70:	54 2c       	mov	r5, r4
     f72:	32 01       	movw	r6, r4
     f74:	ae 2c       	mov	r10, r14
     f76:	bf 2c       	mov	r11, r15
     f78:	c0 2e       	mov	r12, r16
     f7a:	d1 2e       	mov	r13, r17
     f7c:	e4 2c       	mov	r14, r4
     f7e:	f4 2c       	mov	r15, r4
     f80:	04 2d       	mov	r16, r4
     f82:	14 2d       	mov	r17, r4
     f84:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__subdi3>
     f88:	f2 2f       	mov	r31, r18
     f8a:	e3 2f       	mov	r30, r19
     f8c:	14 96       	adiw	r26, 0x04	; 4
     f8e:	0d 91       	ld	r16, X+
     f90:	1d 91       	ld	r17, X+
     f92:	2d 91       	ld	r18, X+
     f94:	3c 91       	ld	r19, X
     f96:	17 97       	sbiw	r26, 0x07	; 7
     f98:	18 01       	movw	r2, r16
     f9a:	29 01       	movw	r4, r18
     f9c:	2f 2f       	mov	r18, r31
     f9e:	3e 2f       	mov	r19, r30
     fa0:	a2 2c       	mov	r10, r2
     fa2:	b3 2c       	mov	r11, r3
     fa4:	c4 2c       	mov	r12, r4
     fa6:	d5 2c       	mov	r13, r5
     fa8:	e1 2c       	mov	r14, r1
     faa:	f1 2c       	mov	r15, r1
     fac:	00 e0       	ldi	r16, 0x00	; 0
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__cmpdi2>
     fb4:	68 f2       	brcs	.-102    	; 0xf50 <_ZN7Stepper4stepEi+0x64>
      // get the timeStamp of when you stepped:
      last_step_time = myMillis.millis();
     fb6:	8e ec       	ldi	r24, 0xCE	; 206
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN6Millis6millisEv>
     fbe:	eb 81       	ldd	r30, Y+3	; 0x03
     fc0:	fc 81       	ldd	r31, Y+4	; 0x04
     fc2:	20 8b       	std	Z+16, r18	; 0x10
     fc4:	31 8b       	std	Z+17, r19	; 0x11
     fc6:	42 8b       	std	Z+18, r20	; 0x12
     fc8:	53 8b       	std	Z+19, r21	; 0x13
      // increment or decrement the step number,
      // depending on direction:
      if (direction == 1) {
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	69 f4       	brne	.+26     	; 0xfec <_ZN7Stepper4stepEi+0x100>
		  step_number++;
     fd2:	84 85       	ldd	r24, Z+12	; 0x0c
     fd4:	95 85       	ldd	r25, Z+13	; 0x0d
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	95 87       	std	Z+13, r25	; 0x0d
     fda:	84 87       	std	Z+12, r24	; 0x0c
        if (step_number == number_of_steps) {
     fdc:	20 85       	ldd	r18, Z+8	; 0x08
     fde:	31 85       	ldd	r19, Z+9	; 0x09
     fe0:	82 17       	cp	r24, r18
     fe2:	93 07       	cpc	r25, r19
     fe4:	d1 f4       	brne	.+52     	; 0x101a <_ZN7Stepper4stepEi+0x12e>
          step_number = 0;
     fe6:	15 86       	std	Z+13, r1	; 0x0d
     fe8:	14 86       	std	Z+12, r1	; 0x0c
     fea:	17 c0       	rjmp	.+46     	; 0x101a <_ZN7Stepper4stepEi+0x12e>
        }
      } 
      else { 
        if (step_number == 0) {
     fec:	ab 81       	ldd	r26, Y+3	; 0x03
     fee:	bc 81       	ldd	r27, Y+4	; 0x04
     ff0:	1c 96       	adiw	r26, 0x0c	; 12
     ff2:	8d 91       	ld	r24, X+
     ff4:	9c 91       	ld	r25, X
     ff6:	1d 97       	sbiw	r26, 0x0d	; 13
     ff8:	89 2b       	or	r24, r25
     ffa:	41 f4       	brne	.+16     	; 0x100c <_ZN7Stepper4stepEi+0x120>
         step_number = number_of_steps;
     ffc:	18 96       	adiw	r26, 0x08	; 8
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	19 97       	sbiw	r26, 0x09	; 9
    1004:	1d 96       	adiw	r26, 0x0d	; 13
    1006:	9c 93       	st	X, r25
    1008:	8e 93       	st	-X, r24
    100a:	1c 97       	sbiw	r26, 0x0c	; 12
        }
        step_number--;
    100c:	eb 81       	ldd	r30, Y+3	; 0x03
    100e:	fc 81       	ldd	r31, Y+4	; 0x04
    1010:	84 85       	ldd	r24, Z+12	; 0x0c
    1012:	95 85       	ldd	r25, Z+13	; 0x0d
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	95 87       	std	Z+13, r25	; 0x0d
    1018:	84 87       	std	Z+12, r24	; 0x0c
      }
      // decrement the steps left:
      steps_left--;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 8);
    1024:	ab 81       	ldd	r26, Y+3	; 0x03
    1026:	bc 81       	ldd	r27, Y+4	; 0x04
    1028:	1c 96       	adiw	r26, 0x0c	; 12
    102a:	6d 91       	ld	r22, X+
    102c:	7c 91       	ld	r23, X
    102e:	1d 97       	sbiw	r26, 0x0d	; 13
    1030:	67 70       	andi	r22, 0x07	; 7
    1032:	70 78       	andi	r23, 0x80	; 128
    1034:	77 23       	and	r23, r23
    1036:	34 f4       	brge	.+12     	; 0x1044 <_ZN7Stepper4stepEi+0x158>
    1038:	61 50       	subi	r22, 0x01	; 1
    103a:	71 09       	sbc	r23, r1
    103c:	68 6f       	ori	r22, 0xF8	; 248
    103e:	7f 6f       	ori	r23, 0xFF	; 255
    1040:	6f 5f       	subi	r22, 0xFF	; 255
    1042:	7f 4f       	sbci	r23, 0xFF	; 255
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Stepper9stepMotorEi>
  if (steps_to_move > 0) {direction = 1;}
  if (steps_to_move < 0) {direction = 0;}
    
    
  // decrement the number of steps, moving one step each time:
  while(steps_left > 0) {
    104c:	e9 81       	ldd	r30, Y+1	; 0x01
    104e:	fa 81       	ldd	r31, Y+2	; 0x02
    1050:	1e 16       	cp	r1, r30
    1052:	1f 06       	cpc	r1, r31
    1054:	0c f4       	brge	.+2      	; 0x1058 <_ZN7Stepper4stepEi+0x16c>
    1056:	7c cf       	rjmp	.-264    	; 0xf50 <_ZN7Stepper4stepEi+0x64>
      steps_left--;
      // step the motor to step number 0, 1, 2, or 3:
      stepMotor(step_number % 8);
    }
  }
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	4f 90       	pop	r4
    1080:	3f 90       	pop	r3
    1082:	2f 90       	pop	r2
    1084:	08 95       	ret

00001086 <_ZN7Stepper8motorOffEv>:
{
     //digitalWrite(motor_pin_1, LOW);
     //digitalWrite(motor_pin_2, LOW);
     //digitalWrite(motor_pin_3, LOW);
     //digitalWrite(motor_pin_4, LOW);
	  PORTB &= !_BV(0);
    1086:	85 b1       	in	r24, 0x05	; 5
    1088:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(1);
    108a:	85 b1       	in	r24, 0x05	; 5
    108c:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(2);
    108e:	85 b1       	in	r24, 0x05	; 5
    1090:	15 b8       	out	0x05, r1	; 5
	  PORTB &= !_BV(3);
    1092:	85 b1       	in	r24, 0x05	; 5
    1094:	15 b8       	out	0x05, r1	; 5
    1096:	08 95       	ret

00001098 <_GLOBAL__sub_I_myMillis>:
/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */

Millis myMillis;
    1098:	8e ec       	ldi	r24, 0xCE	; 206
    109a:	93 e0       	ldi	r25, 0x03	; 3
    109c:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN6MillisC1Ev>
    10a0:	08 95       	ret

000010a2 <_ZN8UARTtoolC1Ev>:
#include "UARTtool.h"
#include <avr/io.h>
#include <string.h>

UARTtool::UARTtool(){
	UBRR0H = (BAUDRATE>>8);                      // shift the register right by 8 bits
    10a2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;                           // set baud rate
    10a6:	87 e6       	ldi	r24, 0x67	; 103
    10a8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B|= (1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);                // enable receiver and transmitter
    10ac:	e1 ec       	ldi	r30, 0xC1	; 193
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	88 69       	ori	r24, 0x98	; 152
    10b4:	80 83       	st	Z, r24
	UCSR0C|= (0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);   // 8bit data format
    10b6:	e2 ec       	ldi	r30, 0xC2	; 194
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	86 60       	ori	r24, 0x06	; 6
    10be:	80 83       	st	Z, r24
    10c0:	08 95       	ret

000010c2 <_ZN8UARTtool13uart_transmitEc>:
	
}

void UARTtool::uart_transmit (char data){
	while (!( UCSR0A & (1<<UDRE0)));                // wait while register is free
    10c2:	e0 ec       	ldi	r30, 0xC0	; 192
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	85 ff       	sbrs	r24, 5
    10ca:	fd cf       	rjmp	.-6      	; 0x10c6 <_ZN8UARTtool13uart_transmitEc+0x4>
	UDR0 = data;
    10cc:	60 93 c6 00 	sts	0x00C6, r22
    10d0:	08 95       	ret

000010d2 <_ZN8UARTtool20uart_transmit_stringEPc>:
}

void UARTtool::uart_transmit_string(char data[]){
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	7c 01       	movw	r14, r24
	
	int i= strlen(data);
    10e4:	fb 01       	movw	r30, r22
    10e6:	01 90       	ld	r0, Z+
    10e8:	00 20       	and	r0, r0
    10ea:	e9 f7       	brne	.-6      	; 0x10e6 <_ZN8UARTtool20uart_transmit_stringEPc+0x14>
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	6f 01       	movw	r12, r30
    10f0:	c6 1a       	sub	r12, r22
    10f2:	d7 0a       	sbc	r13, r23
	for (int j=0;j<=i;j++)
    10f4:	6a f0       	brmi	.+26     	; 0x1110 <_ZN8UARTtool20uart_transmit_stringEPc+0x3e>
    10f6:	8b 01       	movw	r16, r22
    10f8:	c0 e0       	ldi	r28, 0x00	; 0
    10fa:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uart_transmit(data[j]);
    10fc:	f8 01       	movw	r30, r16
    10fe:	61 91       	ld	r22, Z+
    1100:	8f 01       	movw	r16, r30
    1102:	c7 01       	movw	r24, r14
    1104:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN8UARTtool13uart_transmitEc>
}

void UARTtool::uart_transmit_string(char data[]){
	
	int i= strlen(data);
	for (int j=0;j<=i;j++)
    1108:	21 96       	adiw	r28, 0x01	; 1
    110a:	cc 16       	cp	r12, r28
    110c:	dd 06       	cpc	r13, r29
    110e:	b4 f7       	brge	.-20     	; 0x10fc <_ZN8UARTtool20uart_transmit_stringEPc+0x2a>
	{
		uart_transmit(data[j]);
		
	}
	uart_transmit(0x0A);
    1110:	6a e0       	ldi	r22, 0x0A	; 10
    1112:	c7 01       	movw	r24, r14
    1114:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN8UARTtool13uart_transmitEc>
	uart_transmit(0x0D);//newline
    1118:	6d e0       	ldi	r22, 0x0D	; 13
    111a:	c7 01       	movw	r24, r14
    111c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN8UARTtool13uart_transmitEc>
	
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	08 95       	ret

00001132 <__subsf3>:
    1132:	50 58       	subi	r21, 0x80	; 128

00001134 <__addsf3>:
    1134:	bb 27       	eor	r27, r27
    1136:	aa 27       	eor	r26, r26
    1138:	0e d0       	rcall	.+28     	; 0x1156 <__addsf3x>
    113a:	75 c1       	rjmp	.+746    	; 0x1426 <__fp_round>
    113c:	66 d1       	rcall	.+716    	; 0x140a <__fp_pscA>
    113e:	30 f0       	brcs	.+12     	; 0x114c <__addsf3+0x18>
    1140:	6b d1       	rcall	.+726    	; 0x1418 <__fp_pscB>
    1142:	20 f0       	brcs	.+8      	; 0x114c <__addsf3+0x18>
    1144:	31 f4       	brne	.+12     	; 0x1152 <__addsf3+0x1e>
    1146:	9f 3f       	cpi	r25, 0xFF	; 255
    1148:	11 f4       	brne	.+4      	; 0x114e <__addsf3+0x1a>
    114a:	1e f4       	brtc	.+6      	; 0x1152 <__addsf3+0x1e>
    114c:	5b c1       	rjmp	.+694    	; 0x1404 <__fp_nan>
    114e:	0e f4       	brtc	.+2      	; 0x1152 <__addsf3+0x1e>
    1150:	e0 95       	com	r30
    1152:	e7 fb       	bst	r30, 7
    1154:	51 c1       	rjmp	.+674    	; 0x13f8 <__fp_inf>

00001156 <__addsf3x>:
    1156:	e9 2f       	mov	r30, r25
    1158:	77 d1       	rcall	.+750    	; 0x1448 <__fp_split3>
    115a:	80 f3       	brcs	.-32     	; 0x113c <__addsf3+0x8>
    115c:	ba 17       	cp	r27, r26
    115e:	62 07       	cpc	r22, r18
    1160:	73 07       	cpc	r23, r19
    1162:	84 07       	cpc	r24, r20
    1164:	95 07       	cpc	r25, r21
    1166:	18 f0       	brcs	.+6      	; 0x116e <__addsf3x+0x18>
    1168:	71 f4       	brne	.+28     	; 0x1186 <__addsf3x+0x30>
    116a:	9e f5       	brtc	.+102    	; 0x11d2 <__addsf3x+0x7c>
    116c:	8f c1       	rjmp	.+798    	; 0x148c <__fp_zero>
    116e:	0e f4       	brtc	.+2      	; 0x1172 <__addsf3x+0x1c>
    1170:	e0 95       	com	r30
    1172:	0b 2e       	mov	r0, r27
    1174:	ba 2f       	mov	r27, r26
    1176:	a0 2d       	mov	r26, r0
    1178:	0b 01       	movw	r0, r22
    117a:	b9 01       	movw	r22, r18
    117c:	90 01       	movw	r18, r0
    117e:	0c 01       	movw	r0, r24
    1180:	ca 01       	movw	r24, r20
    1182:	a0 01       	movw	r20, r0
    1184:	11 24       	eor	r1, r1
    1186:	ff 27       	eor	r31, r31
    1188:	59 1b       	sub	r21, r25
    118a:	99 f0       	breq	.+38     	; 0x11b2 <__addsf3x+0x5c>
    118c:	59 3f       	cpi	r21, 0xF9	; 249
    118e:	50 f4       	brcc	.+20     	; 0x11a4 <__addsf3x+0x4e>
    1190:	50 3e       	cpi	r21, 0xE0	; 224
    1192:	68 f1       	brcs	.+90     	; 0x11ee <__addsf3x+0x98>
    1194:	1a 16       	cp	r1, r26
    1196:	f0 40       	sbci	r31, 0x00	; 0
    1198:	a2 2f       	mov	r26, r18
    119a:	23 2f       	mov	r18, r19
    119c:	34 2f       	mov	r19, r20
    119e:	44 27       	eor	r20, r20
    11a0:	58 5f       	subi	r21, 0xF8	; 248
    11a2:	f3 cf       	rjmp	.-26     	; 0x118a <__addsf3x+0x34>
    11a4:	46 95       	lsr	r20
    11a6:	37 95       	ror	r19
    11a8:	27 95       	ror	r18
    11aa:	a7 95       	ror	r26
    11ac:	f0 40       	sbci	r31, 0x00	; 0
    11ae:	53 95       	inc	r21
    11b0:	c9 f7       	brne	.-14     	; 0x11a4 <__addsf3x+0x4e>
    11b2:	7e f4       	brtc	.+30     	; 0x11d2 <__addsf3x+0x7c>
    11b4:	1f 16       	cp	r1, r31
    11b6:	ba 0b       	sbc	r27, r26
    11b8:	62 0b       	sbc	r22, r18
    11ba:	73 0b       	sbc	r23, r19
    11bc:	84 0b       	sbc	r24, r20
    11be:	ba f0       	brmi	.+46     	; 0x11ee <__addsf3x+0x98>
    11c0:	91 50       	subi	r25, 0x01	; 1
    11c2:	a1 f0       	breq	.+40     	; 0x11ec <__addsf3x+0x96>
    11c4:	ff 0f       	add	r31, r31
    11c6:	bb 1f       	adc	r27, r27
    11c8:	66 1f       	adc	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	c2 f7       	brpl	.-16     	; 0x11c0 <__addsf3x+0x6a>
    11d0:	0e c0       	rjmp	.+28     	; 0x11ee <__addsf3x+0x98>
    11d2:	ba 0f       	add	r27, r26
    11d4:	62 1f       	adc	r22, r18
    11d6:	73 1f       	adc	r23, r19
    11d8:	84 1f       	adc	r24, r20
    11da:	48 f4       	brcc	.+18     	; 0x11ee <__addsf3x+0x98>
    11dc:	87 95       	ror	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b7 95       	ror	r27
    11e4:	f7 95       	ror	r31
    11e6:	9e 3f       	cpi	r25, 0xFE	; 254
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <__addsf3x+0x96>
    11ea:	b3 cf       	rjmp	.-154    	; 0x1152 <__addsf3+0x1e>
    11ec:	93 95       	inc	r25
    11ee:	88 0f       	add	r24, r24
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <__addsf3x+0x9e>
    11f2:	99 27       	eor	r25, r25
    11f4:	ee 0f       	add	r30, r30
    11f6:	97 95       	ror	r25
    11f8:	87 95       	ror	r24
    11fa:	08 95       	ret

000011fc <__cmpsf2>:
    11fc:	d9 d0       	rcall	.+434    	; 0x13b0 <__fp_cmp>
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <__cmpsf2+0x6>
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	08 95       	ret

00001204 <__divsf3>:
    1204:	0c d0       	rcall	.+24     	; 0x121e <__divsf3x>
    1206:	0f c1       	rjmp	.+542    	; 0x1426 <__fp_round>
    1208:	07 d1       	rcall	.+526    	; 0x1418 <__fp_pscB>
    120a:	40 f0       	brcs	.+16     	; 0x121c <__divsf3+0x18>
    120c:	fe d0       	rcall	.+508    	; 0x140a <__fp_pscA>
    120e:	30 f0       	brcs	.+12     	; 0x121c <__divsf3+0x18>
    1210:	21 f4       	brne	.+8      	; 0x121a <__divsf3+0x16>
    1212:	5f 3f       	cpi	r21, 0xFF	; 255
    1214:	19 f0       	breq	.+6      	; 0x121c <__divsf3+0x18>
    1216:	f0 c0       	rjmp	.+480    	; 0x13f8 <__fp_inf>
    1218:	51 11       	cpse	r21, r1
    121a:	39 c1       	rjmp	.+626    	; 0x148e <__fp_szero>
    121c:	f3 c0       	rjmp	.+486    	; 0x1404 <__fp_nan>

0000121e <__divsf3x>:
    121e:	14 d1       	rcall	.+552    	; 0x1448 <__fp_split3>
    1220:	98 f3       	brcs	.-26     	; 0x1208 <__divsf3+0x4>

00001222 <__divsf3_pse>:
    1222:	99 23       	and	r25, r25
    1224:	c9 f3       	breq	.-14     	; 0x1218 <__divsf3+0x14>
    1226:	55 23       	and	r21, r21
    1228:	b1 f3       	breq	.-20     	; 0x1216 <__divsf3+0x12>
    122a:	95 1b       	sub	r25, r21
    122c:	55 0b       	sbc	r21, r21
    122e:	bb 27       	eor	r27, r27
    1230:	aa 27       	eor	r26, r26
    1232:	62 17       	cp	r22, r18
    1234:	73 07       	cpc	r23, r19
    1236:	84 07       	cpc	r24, r20
    1238:	38 f0       	brcs	.+14     	; 0x1248 <__divsf3_pse+0x26>
    123a:	9f 5f       	subi	r25, 0xFF	; 255
    123c:	5f 4f       	sbci	r21, 0xFF	; 255
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	44 1f       	adc	r20, r20
    1244:	aa 1f       	adc	r26, r26
    1246:	a9 f3       	breq	.-22     	; 0x1232 <__divsf3_pse+0x10>
    1248:	33 d0       	rcall	.+102    	; 0x12b0 <__divsf3_pse+0x8e>
    124a:	0e 2e       	mov	r0, r30
    124c:	3a f0       	brmi	.+14     	; 0x125c <__divsf3_pse+0x3a>
    124e:	e0 e8       	ldi	r30, 0x80	; 128
    1250:	30 d0       	rcall	.+96     	; 0x12b2 <__divsf3_pse+0x90>
    1252:	91 50       	subi	r25, 0x01	; 1
    1254:	50 40       	sbci	r21, 0x00	; 0
    1256:	e6 95       	lsr	r30
    1258:	00 1c       	adc	r0, r0
    125a:	ca f7       	brpl	.-14     	; 0x124e <__divsf3_pse+0x2c>
    125c:	29 d0       	rcall	.+82     	; 0x12b0 <__divsf3_pse+0x8e>
    125e:	fe 2f       	mov	r31, r30
    1260:	27 d0       	rcall	.+78     	; 0x12b0 <__divsf3_pse+0x8e>
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	bb 1f       	adc	r27, r27
    126a:	26 17       	cp	r18, r22
    126c:	37 07       	cpc	r19, r23
    126e:	48 07       	cpc	r20, r24
    1270:	ab 07       	cpc	r26, r27
    1272:	b0 e8       	ldi	r27, 0x80	; 128
    1274:	09 f0       	breq	.+2      	; 0x1278 <__divsf3_pse+0x56>
    1276:	bb 0b       	sbc	r27, r27
    1278:	80 2d       	mov	r24, r0
    127a:	bf 01       	movw	r22, r30
    127c:	ff 27       	eor	r31, r31
    127e:	93 58       	subi	r25, 0x83	; 131
    1280:	5f 4f       	sbci	r21, 0xFF	; 255
    1282:	2a f0       	brmi	.+10     	; 0x128e <__divsf3_pse+0x6c>
    1284:	9e 3f       	cpi	r25, 0xFE	; 254
    1286:	51 05       	cpc	r21, r1
    1288:	68 f0       	brcs	.+26     	; 0x12a4 <__divsf3_pse+0x82>
    128a:	b6 c0       	rjmp	.+364    	; 0x13f8 <__fp_inf>
    128c:	00 c1       	rjmp	.+512    	; 0x148e <__fp_szero>
    128e:	5f 3f       	cpi	r21, 0xFF	; 255
    1290:	ec f3       	brlt	.-6      	; 0x128c <__divsf3_pse+0x6a>
    1292:	98 3e       	cpi	r25, 0xE8	; 232
    1294:	dc f3       	brlt	.-10     	; 0x128c <__divsf3_pse+0x6a>
    1296:	86 95       	lsr	r24
    1298:	77 95       	ror	r23
    129a:	67 95       	ror	r22
    129c:	b7 95       	ror	r27
    129e:	f7 95       	ror	r31
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	c9 f7       	brne	.-14     	; 0x1296 <__divsf3_pse+0x74>
    12a4:	88 0f       	add	r24, r24
    12a6:	91 1d       	adc	r25, r1
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
    12ac:	97 f9       	bld	r25, 7
    12ae:	08 95       	ret
    12b0:	e1 e0       	ldi	r30, 0x01	; 1
    12b2:	66 0f       	add	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	88 1f       	adc	r24, r24
    12b8:	bb 1f       	adc	r27, r27
    12ba:	62 17       	cp	r22, r18
    12bc:	73 07       	cpc	r23, r19
    12be:	84 07       	cpc	r24, r20
    12c0:	ba 07       	cpc	r27, r26
    12c2:	20 f0       	brcs	.+8      	; 0x12cc <__divsf3_pse+0xaa>
    12c4:	62 1b       	sub	r22, r18
    12c6:	73 0b       	sbc	r23, r19
    12c8:	84 0b       	sbc	r24, r20
    12ca:	ba 0b       	sbc	r27, r26
    12cc:	ee 1f       	adc	r30, r30
    12ce:	88 f7       	brcc	.-30     	; 0x12b2 <__divsf3_pse+0x90>
    12d0:	e0 95       	com	r30
    12d2:	08 95       	ret

000012d4 <__fixsfsi>:
    12d4:	04 d0       	rcall	.+8      	; 0x12de <__fixunssfsi>
    12d6:	68 94       	set
    12d8:	b1 11       	cpse	r27, r1
    12da:	d9 c0       	rjmp	.+434    	; 0x148e <__fp_szero>
    12dc:	08 95       	ret

000012de <__fixunssfsi>:
    12de:	bc d0       	rcall	.+376    	; 0x1458 <__fp_splitA>
    12e0:	88 f0       	brcs	.+34     	; 0x1304 <__fixunssfsi+0x26>
    12e2:	9f 57       	subi	r25, 0x7F	; 127
    12e4:	90 f0       	brcs	.+36     	; 0x130a <__fixunssfsi+0x2c>
    12e6:	b9 2f       	mov	r27, r25
    12e8:	99 27       	eor	r25, r25
    12ea:	b7 51       	subi	r27, 0x17	; 23
    12ec:	a0 f0       	brcs	.+40     	; 0x1316 <__fixunssfsi+0x38>
    12ee:	d1 f0       	breq	.+52     	; 0x1324 <__fixunssfsi+0x46>
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	1a f0       	brmi	.+6      	; 0x1300 <__fixunssfsi+0x22>
    12fa:	ba 95       	dec	r27
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__fixunssfsi+0x12>
    12fe:	12 c0       	rjmp	.+36     	; 0x1324 <__fixunssfsi+0x46>
    1300:	b1 30       	cpi	r27, 0x01	; 1
    1302:	81 f0       	breq	.+32     	; 0x1324 <__fixunssfsi+0x46>
    1304:	c3 d0       	rcall	.+390    	; 0x148c <__fp_zero>
    1306:	b1 e0       	ldi	r27, 0x01	; 1
    1308:	08 95       	ret
    130a:	c0 c0       	rjmp	.+384    	; 0x148c <__fp_zero>
    130c:	67 2f       	mov	r22, r23
    130e:	78 2f       	mov	r23, r24
    1310:	88 27       	eor	r24, r24
    1312:	b8 5f       	subi	r27, 0xF8	; 248
    1314:	39 f0       	breq	.+14     	; 0x1324 <__fixunssfsi+0x46>
    1316:	b9 3f       	cpi	r27, 0xF9	; 249
    1318:	cc f3       	brlt	.-14     	; 0x130c <__fixunssfsi+0x2e>
    131a:	86 95       	lsr	r24
    131c:	77 95       	ror	r23
    131e:	67 95       	ror	r22
    1320:	b3 95       	inc	r27
    1322:	d9 f7       	brne	.-10     	; 0x131a <__fixunssfsi+0x3c>
    1324:	3e f4       	brtc	.+14     	; 0x1334 <__fixunssfsi+0x56>
    1326:	90 95       	com	r25
    1328:	80 95       	com	r24
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	08 95       	ret

00001336 <__floatunsisf>:
    1336:	e8 94       	clt
    1338:	09 c0       	rjmp	.+18     	; 0x134c <__floatsisf+0x12>

0000133a <__floatsisf>:
    133a:	97 fb       	bst	r25, 7
    133c:	3e f4       	brtc	.+14     	; 0x134c <__floatsisf+0x12>
    133e:	90 95       	com	r25
    1340:	80 95       	com	r24
    1342:	70 95       	com	r23
    1344:	61 95       	neg	r22
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	8f 4f       	sbci	r24, 0xFF	; 255
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	99 23       	and	r25, r25
    134e:	a9 f0       	breq	.+42     	; 0x137a <__floatsisf+0x40>
    1350:	f9 2f       	mov	r31, r25
    1352:	96 e9       	ldi	r25, 0x96	; 150
    1354:	bb 27       	eor	r27, r27
    1356:	93 95       	inc	r25
    1358:	f6 95       	lsr	r31
    135a:	87 95       	ror	r24
    135c:	77 95       	ror	r23
    135e:	67 95       	ror	r22
    1360:	b7 95       	ror	r27
    1362:	f1 11       	cpse	r31, r1
    1364:	f8 cf       	rjmp	.-16     	; 0x1356 <__floatsisf+0x1c>
    1366:	fa f4       	brpl	.+62     	; 0x13a6 <__floatsisf+0x6c>
    1368:	bb 0f       	add	r27, r27
    136a:	11 f4       	brne	.+4      	; 0x1370 <__floatsisf+0x36>
    136c:	60 ff       	sbrs	r22, 0
    136e:	1b c0       	rjmp	.+54     	; 0x13a6 <__floatsisf+0x6c>
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	16 c0       	rjmp	.+44     	; 0x13a6 <__floatsisf+0x6c>
    137a:	88 23       	and	r24, r24
    137c:	11 f0       	breq	.+4      	; 0x1382 <__floatsisf+0x48>
    137e:	96 e9       	ldi	r25, 0x96	; 150
    1380:	11 c0       	rjmp	.+34     	; 0x13a4 <__floatsisf+0x6a>
    1382:	77 23       	and	r23, r23
    1384:	21 f0       	breq	.+8      	; 0x138e <__floatsisf+0x54>
    1386:	9e e8       	ldi	r25, 0x8E	; 142
    1388:	87 2f       	mov	r24, r23
    138a:	76 2f       	mov	r23, r22
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <__floatsisf+0x5e>
    138e:	66 23       	and	r22, r22
    1390:	71 f0       	breq	.+28     	; 0x13ae <__floatsisf+0x74>
    1392:	96 e8       	ldi	r25, 0x86	; 134
    1394:	86 2f       	mov	r24, r22
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	2a f0       	brmi	.+10     	; 0x13a6 <__floatsisf+0x6c>
    139c:	9a 95       	dec	r25
    139e:	66 0f       	add	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	da f7       	brpl	.-10     	; 0x139c <__floatsisf+0x62>
    13a6:	88 0f       	add	r24, r24
    13a8:	96 95       	lsr	r25
    13aa:	87 95       	ror	r24
    13ac:	97 f9       	bld	r25, 7
    13ae:	08 95       	ret

000013b0 <__fp_cmp>:
    13b0:	99 0f       	add	r25, r25
    13b2:	00 08       	sbc	r0, r0
    13b4:	55 0f       	add	r21, r21
    13b6:	aa 0b       	sbc	r26, r26
    13b8:	e0 e8       	ldi	r30, 0x80	; 128
    13ba:	fe ef       	ldi	r31, 0xFE	; 254
    13bc:	16 16       	cp	r1, r22
    13be:	17 06       	cpc	r1, r23
    13c0:	e8 07       	cpc	r30, r24
    13c2:	f9 07       	cpc	r31, r25
    13c4:	c0 f0       	brcs	.+48     	; 0x13f6 <__fp_cmp+0x46>
    13c6:	12 16       	cp	r1, r18
    13c8:	13 06       	cpc	r1, r19
    13ca:	e4 07       	cpc	r30, r20
    13cc:	f5 07       	cpc	r31, r21
    13ce:	98 f0       	brcs	.+38     	; 0x13f6 <__fp_cmp+0x46>
    13d0:	62 1b       	sub	r22, r18
    13d2:	73 0b       	sbc	r23, r19
    13d4:	84 0b       	sbc	r24, r20
    13d6:	95 0b       	sbc	r25, r21
    13d8:	39 f4       	brne	.+14     	; 0x13e8 <__fp_cmp+0x38>
    13da:	0a 26       	eor	r0, r26
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <__fp_cmp+0x46>
    13de:	23 2b       	or	r18, r19
    13e0:	24 2b       	or	r18, r20
    13e2:	25 2b       	or	r18, r21
    13e4:	21 f4       	brne	.+8      	; 0x13ee <__fp_cmp+0x3e>
    13e6:	08 95       	ret
    13e8:	0a 26       	eor	r0, r26
    13ea:	09 f4       	brne	.+2      	; 0x13ee <__fp_cmp+0x3e>
    13ec:	a1 40       	sbci	r26, 0x01	; 1
    13ee:	a6 95       	lsr	r26
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	81 1d       	adc	r24, r1
    13f4:	81 1d       	adc	r24, r1
    13f6:	08 95       	ret

000013f8 <__fp_inf>:
    13f8:	97 f9       	bld	r25, 7
    13fa:	9f 67       	ori	r25, 0x7F	; 127
    13fc:	80 e8       	ldi	r24, 0x80	; 128
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	08 95       	ret

00001404 <__fp_nan>:
    1404:	9f ef       	ldi	r25, 0xFF	; 255
    1406:	80 ec       	ldi	r24, 0xC0	; 192
    1408:	08 95       	ret

0000140a <__fp_pscA>:
    140a:	00 24       	eor	r0, r0
    140c:	0a 94       	dec	r0
    140e:	16 16       	cp	r1, r22
    1410:	17 06       	cpc	r1, r23
    1412:	18 06       	cpc	r1, r24
    1414:	09 06       	cpc	r0, r25
    1416:	08 95       	ret

00001418 <__fp_pscB>:
    1418:	00 24       	eor	r0, r0
    141a:	0a 94       	dec	r0
    141c:	12 16       	cp	r1, r18
    141e:	13 06       	cpc	r1, r19
    1420:	14 06       	cpc	r1, r20
    1422:	05 06       	cpc	r0, r21
    1424:	08 95       	ret

00001426 <__fp_round>:
    1426:	09 2e       	mov	r0, r25
    1428:	03 94       	inc	r0
    142a:	00 0c       	add	r0, r0
    142c:	11 f4       	brne	.+4      	; 0x1432 <__fp_round+0xc>
    142e:	88 23       	and	r24, r24
    1430:	52 f0       	brmi	.+20     	; 0x1446 <__fp_round+0x20>
    1432:	bb 0f       	add	r27, r27
    1434:	40 f4       	brcc	.+16     	; 0x1446 <__fp_round+0x20>
    1436:	bf 2b       	or	r27, r31
    1438:	11 f4       	brne	.+4      	; 0x143e <__fp_round+0x18>
    143a:	60 ff       	sbrs	r22, 0
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <__fp_round+0x20>
    143e:	6f 5f       	subi	r22, 0xFF	; 255
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	8f 4f       	sbci	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	08 95       	ret

00001448 <__fp_split3>:
    1448:	57 fd       	sbrc	r21, 7
    144a:	90 58       	subi	r25, 0x80	; 128
    144c:	44 0f       	add	r20, r20
    144e:	55 1f       	adc	r21, r21
    1450:	59 f0       	breq	.+22     	; 0x1468 <__fp_splitA+0x10>
    1452:	5f 3f       	cpi	r21, 0xFF	; 255
    1454:	71 f0       	breq	.+28     	; 0x1472 <__fp_splitA+0x1a>
    1456:	47 95       	ror	r20

00001458 <__fp_splitA>:
    1458:	88 0f       	add	r24, r24
    145a:	97 fb       	bst	r25, 7
    145c:	99 1f       	adc	r25, r25
    145e:	61 f0       	breq	.+24     	; 0x1478 <__fp_splitA+0x20>
    1460:	9f 3f       	cpi	r25, 0xFF	; 255
    1462:	79 f0       	breq	.+30     	; 0x1482 <__fp_splitA+0x2a>
    1464:	87 95       	ror	r24
    1466:	08 95       	ret
    1468:	12 16       	cp	r1, r18
    146a:	13 06       	cpc	r1, r19
    146c:	14 06       	cpc	r1, r20
    146e:	55 1f       	adc	r21, r21
    1470:	f2 cf       	rjmp	.-28     	; 0x1456 <__fp_split3+0xe>
    1472:	46 95       	lsr	r20
    1474:	f1 df       	rcall	.-30     	; 0x1458 <__fp_splitA>
    1476:	08 c0       	rjmp	.+16     	; 0x1488 <__fp_splitA+0x30>
    1478:	16 16       	cp	r1, r22
    147a:	17 06       	cpc	r1, r23
    147c:	18 06       	cpc	r1, r24
    147e:	99 1f       	adc	r25, r25
    1480:	f1 cf       	rjmp	.-30     	; 0x1464 <__fp_splitA+0xc>
    1482:	86 95       	lsr	r24
    1484:	71 05       	cpc	r23, r1
    1486:	61 05       	cpc	r22, r1
    1488:	08 94       	sec
    148a:	08 95       	ret

0000148c <__fp_zero>:
    148c:	e8 94       	clt

0000148e <__fp_szero>:
    148e:	bb 27       	eor	r27, r27
    1490:	66 27       	eor	r22, r22
    1492:	77 27       	eor	r23, r23
    1494:	cb 01       	movw	r24, r22
    1496:	97 f9       	bld	r25, 7
    1498:	08 95       	ret

0000149a <__gesf2>:
    149a:	8a df       	rcall	.-236    	; 0x13b0 <__fp_cmp>
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <__gesf2+0x6>
    149e:	8f ef       	ldi	r24, 0xFF	; 255
    14a0:	08 95       	ret

000014a2 <__mulsf3>:
    14a2:	0b d0       	rcall	.+22     	; 0x14ba <__mulsf3x>
    14a4:	c0 cf       	rjmp	.-128    	; 0x1426 <__fp_round>
    14a6:	b1 df       	rcall	.-158    	; 0x140a <__fp_pscA>
    14a8:	28 f0       	brcs	.+10     	; 0x14b4 <__mulsf3+0x12>
    14aa:	b6 df       	rcall	.-148    	; 0x1418 <__fp_pscB>
    14ac:	18 f0       	brcs	.+6      	; 0x14b4 <__mulsf3+0x12>
    14ae:	95 23       	and	r25, r21
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <__mulsf3+0x12>
    14b2:	a2 cf       	rjmp	.-188    	; 0x13f8 <__fp_inf>
    14b4:	a7 cf       	rjmp	.-178    	; 0x1404 <__fp_nan>
    14b6:	11 24       	eor	r1, r1
    14b8:	ea cf       	rjmp	.-44     	; 0x148e <__fp_szero>

000014ba <__mulsf3x>:
    14ba:	c6 df       	rcall	.-116    	; 0x1448 <__fp_split3>
    14bc:	a0 f3       	brcs	.-24     	; 0x14a6 <__mulsf3+0x4>

000014be <__mulsf3_pse>:
    14be:	95 9f       	mul	r25, r21
    14c0:	d1 f3       	breq	.-12     	; 0x14b6 <__mulsf3+0x14>
    14c2:	95 0f       	add	r25, r21
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	55 1f       	adc	r21, r21
    14c8:	62 9f       	mul	r22, r18
    14ca:	f0 01       	movw	r30, r0
    14cc:	72 9f       	mul	r23, r18
    14ce:	bb 27       	eor	r27, r27
    14d0:	f0 0d       	add	r31, r0
    14d2:	b1 1d       	adc	r27, r1
    14d4:	63 9f       	mul	r22, r19
    14d6:	aa 27       	eor	r26, r26
    14d8:	f0 0d       	add	r31, r0
    14da:	b1 1d       	adc	r27, r1
    14dc:	aa 1f       	adc	r26, r26
    14de:	64 9f       	mul	r22, r20
    14e0:	66 27       	eor	r22, r22
    14e2:	b0 0d       	add	r27, r0
    14e4:	a1 1d       	adc	r26, r1
    14e6:	66 1f       	adc	r22, r22
    14e8:	82 9f       	mul	r24, r18
    14ea:	22 27       	eor	r18, r18
    14ec:	b0 0d       	add	r27, r0
    14ee:	a1 1d       	adc	r26, r1
    14f0:	62 1f       	adc	r22, r18
    14f2:	73 9f       	mul	r23, r19
    14f4:	b0 0d       	add	r27, r0
    14f6:	a1 1d       	adc	r26, r1
    14f8:	62 1f       	adc	r22, r18
    14fa:	83 9f       	mul	r24, r19
    14fc:	a0 0d       	add	r26, r0
    14fe:	61 1d       	adc	r22, r1
    1500:	22 1f       	adc	r18, r18
    1502:	74 9f       	mul	r23, r20
    1504:	33 27       	eor	r19, r19
    1506:	a0 0d       	add	r26, r0
    1508:	61 1d       	adc	r22, r1
    150a:	23 1f       	adc	r18, r19
    150c:	84 9f       	mul	r24, r20
    150e:	60 0d       	add	r22, r0
    1510:	21 1d       	adc	r18, r1
    1512:	82 2f       	mov	r24, r18
    1514:	76 2f       	mov	r23, r22
    1516:	6a 2f       	mov	r22, r26
    1518:	11 24       	eor	r1, r1
    151a:	9f 57       	subi	r25, 0x7F	; 127
    151c:	50 40       	sbci	r21, 0x00	; 0
    151e:	8a f0       	brmi	.+34     	; 0x1542 <__mulsf3_pse+0x84>
    1520:	e1 f0       	breq	.+56     	; 0x155a <__mulsf3_pse+0x9c>
    1522:	88 23       	and	r24, r24
    1524:	4a f0       	brmi	.+18     	; 0x1538 <__mulsf3_pse+0x7a>
    1526:	ee 0f       	add	r30, r30
    1528:	ff 1f       	adc	r31, r31
    152a:	bb 1f       	adc	r27, r27
    152c:	66 1f       	adc	r22, r22
    152e:	77 1f       	adc	r23, r23
    1530:	88 1f       	adc	r24, r24
    1532:	91 50       	subi	r25, 0x01	; 1
    1534:	50 40       	sbci	r21, 0x00	; 0
    1536:	a9 f7       	brne	.-22     	; 0x1522 <__mulsf3_pse+0x64>
    1538:	9e 3f       	cpi	r25, 0xFE	; 254
    153a:	51 05       	cpc	r21, r1
    153c:	70 f0       	brcs	.+28     	; 0x155a <__mulsf3_pse+0x9c>
    153e:	5c cf       	rjmp	.-328    	; 0x13f8 <__fp_inf>
    1540:	a6 cf       	rjmp	.-180    	; 0x148e <__fp_szero>
    1542:	5f 3f       	cpi	r21, 0xFF	; 255
    1544:	ec f3       	brlt	.-6      	; 0x1540 <__mulsf3_pse+0x82>
    1546:	98 3e       	cpi	r25, 0xE8	; 232
    1548:	dc f3       	brlt	.-10     	; 0x1540 <__mulsf3_pse+0x82>
    154a:	86 95       	lsr	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f7 95       	ror	r31
    1554:	e7 95       	ror	r30
    1556:	9f 5f       	subi	r25, 0xFF	; 255
    1558:	c1 f7       	brne	.-16     	; 0x154a <__mulsf3_pse+0x8c>
    155a:	fe 2b       	or	r31, r30
    155c:	88 0f       	add	r24, r24
    155e:	91 1d       	adc	r25, r1
    1560:	96 95       	lsr	r25
    1562:	87 95       	ror	r24
    1564:	97 f9       	bld	r25, 7
    1566:	08 95       	ret

00001568 <__divmodsi4>:
    1568:	05 2e       	mov	r0, r21
    156a:	97 fb       	bst	r25, 7
    156c:	1e f4       	brtc	.+6      	; 0x1574 <__divmodsi4+0xc>
    156e:	00 94       	com	r0
    1570:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__negsi2>
    1574:	57 fd       	sbrc	r21, 7
    1576:	07 d0       	rcall	.+14     	; 0x1586 <__divmodsi4_neg2>
    1578:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__udivmodsi4>
    157c:	07 fc       	sbrc	r0, 7
    157e:	03 d0       	rcall	.+6      	; 0x1586 <__divmodsi4_neg2>
    1580:	4e f4       	brtc	.+18     	; 0x1594 <__divmodsi4_exit>
    1582:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__negsi2>

00001586 <__divmodsi4_neg2>:
    1586:	50 95       	com	r21
    1588:	40 95       	com	r20
    158a:	30 95       	com	r19
    158c:	21 95       	neg	r18
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	4f 4f       	sbci	r20, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255

00001594 <__divmodsi4_exit>:
    1594:	08 95       	ret

00001596 <__negsi2>:
    1596:	90 95       	com	r25
    1598:	80 95       	com	r24
    159a:	70 95       	com	r23
    159c:	61 95       	neg	r22
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	8f 4f       	sbci	r24, 0xFF	; 255
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	08 95       	ret

000015a6 <__tablejump2__>:
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31

000015aa <__tablejump__>:
    15aa:	05 90       	lpm	r0, Z+
    15ac:	f4 91       	lpm	r31, Z
    15ae:	e0 2d       	mov	r30, r0
    15b0:	09 94       	ijmp

000015b2 <__adddi3_s8>:
    15b2:	00 24       	eor	r0, r0
    15b4:	a7 fd       	sbrc	r26, 7
    15b6:	00 94       	com	r0
    15b8:	2a 0f       	add	r18, r26
    15ba:	30 1d       	adc	r19, r0
    15bc:	40 1d       	adc	r20, r0
    15be:	50 1d       	adc	r21, r0
    15c0:	60 1d       	adc	r22, r0
    15c2:	70 1d       	adc	r23, r0
    15c4:	80 1d       	adc	r24, r0
    15c6:	90 1d       	adc	r25, r0
    15c8:	08 95       	ret

000015ca <__subdi3>:
    15ca:	2a 19       	sub	r18, r10
    15cc:	3b 09       	sbc	r19, r11
    15ce:	4c 09       	sbc	r20, r12
    15d0:	5d 09       	sbc	r21, r13
    15d2:	6e 09       	sbc	r22, r14
    15d4:	7f 09       	sbc	r23, r15
    15d6:	80 0b       	sbc	r24, r16
    15d8:	91 0b       	sbc	r25, r17
    15da:	08 95       	ret

000015dc <__cmpdi2>:
    15dc:	2a 15       	cp	r18, r10
    15de:	3b 05       	cpc	r19, r11
    15e0:	4c 05       	cpc	r20, r12
    15e2:	5d 05       	cpc	r21, r13
    15e4:	6e 05       	cpc	r22, r14
    15e6:	7f 05       	cpc	r23, r15
    15e8:	80 07       	cpc	r24, r16
    15ea:	91 07       	cpc	r25, r17
    15ec:	08 95       	ret

000015ee <__udivmodsi4>:
    15ee:	a1 e2       	ldi	r26, 0x21	; 33
    15f0:	1a 2e       	mov	r1, r26
    15f2:	aa 1b       	sub	r26, r26
    15f4:	bb 1b       	sub	r27, r27
    15f6:	fd 01       	movw	r30, r26
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <__udivmodsi4_ep>

000015fa <__udivmodsi4_loop>:
    15fa:	aa 1f       	adc	r26, r26
    15fc:	bb 1f       	adc	r27, r27
    15fe:	ee 1f       	adc	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	a2 17       	cp	r26, r18
    1604:	b3 07       	cpc	r27, r19
    1606:	e4 07       	cpc	r30, r20
    1608:	f5 07       	cpc	r31, r21
    160a:	20 f0       	brcs	.+8      	; 0x1614 <__udivmodsi4_ep>
    160c:	a2 1b       	sub	r26, r18
    160e:	b3 0b       	sbc	r27, r19
    1610:	e4 0b       	sbc	r30, r20
    1612:	f5 0b       	sbc	r31, r21

00001614 <__udivmodsi4_ep>:
    1614:	66 1f       	adc	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	1a 94       	dec	r1
    161e:	69 f7       	brne	.-38     	; 0x15fa <__udivmodsi4_loop>
    1620:	60 95       	com	r22
    1622:	70 95       	com	r23
    1624:	80 95       	com	r24
    1626:	90 95       	com	r25
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	bd 01       	movw	r22, r26
    162e:	cf 01       	movw	r24, r30
    1630:	08 95       	ret

00001632 <dtostrf>:
    1632:	ef 92       	push	r14
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	e8 01       	movw	r28, r16
    163e:	47 ff       	sbrs	r20, 7
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <dtostrf+0x14>
    1642:	34 e1       	ldi	r19, 0x14	; 20
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <dtostrf+0x16>
    1646:	34 e0       	ldi	r19, 0x04	; 4
    1648:	e4 2f       	mov	r30, r20
    164a:	ff 27       	eor	r31, r31
    164c:	e7 fd       	sbrc	r30, 7
    164e:	f0 95       	com	r31
    1650:	f7 ff       	sbrs	r31, 7
    1652:	03 c0       	rjmp	.+6      	; 0x165a <dtostrf+0x28>
    1654:	f1 95       	neg	r31
    1656:	e1 95       	neg	r30
    1658:	f1 09       	sbc	r31, r1
    165a:	e3 2e       	mov	r14, r19
    165c:	02 2f       	mov	r16, r18
    165e:	2e 2f       	mov	r18, r30
    1660:	ae 01       	movw	r20, r28
    1662:	0e 94 3e 0b 	call	0x167c	; 0x167c <dtoa_prf>
    1666:	ce 01       	movw	r24, r28
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ef 90       	pop	r14
    1672:	08 95       	ret

00001674 <atof>:
    1674:	66 27       	eor	r22, r22
    1676:	77 27       	eor	r23, r23
    1678:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <strtod>

0000167c <dtoa_prf>:
    167c:	6f 92       	push	r6
    167e:	7f 92       	push	r7
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	29 97       	sbiw	r28, 0x09	; 9
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	6a 01       	movw	r12, r20
    16a8:	b2 2e       	mov	r11, r18
    16aa:	10 2f       	mov	r17, r16
    16ac:	0c 33       	cpi	r16, 0x3C	; 60
    16ae:	20 f4       	brcc	.+8      	; 0x16b8 <dtoa_prf+0x3c>
    16b0:	ff 24       	eor	r15, r15
    16b2:	f3 94       	inc	r15
    16b4:	f0 0e       	add	r15, r16
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <dtoa_prf+0x40>
    16b8:	4c e3       	ldi	r20, 0x3C	; 60
    16ba:	f4 2e       	mov	r15, r20
    16bc:	0f 2d       	mov	r16, r15
    16be:	27 e0       	ldi	r18, 0x07	; 7
    16c0:	ae 01       	movw	r20, r28
    16c2:	4f 5f       	subi	r20, 0xFF	; 255
    16c4:	5f 4f       	sbci	r21, 0xFF	; 255
    16c6:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__ftoa_engine>
    16ca:	79 81       	ldd	r23, Y+1	; 0x01
    16cc:	27 2f       	mov	r18, r23
    16ce:	29 70       	andi	r18, 0x09	; 9
    16d0:	21 30       	cpi	r18, 0x01	; 1
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <dtoa_prf+0x64>
    16d4:	e1 fc       	sbrc	r14, 1
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <dtoa_prf+0x68>
    16d8:	e0 fc       	sbrc	r14, 0
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <dtoa_prf+0x6c>
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <dtoa_prf+0x6e>
    16e0:	6d e2       	ldi	r22, 0x2D	; 45
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <dtoa_prf+0x6e>
    16e4:	6b e2       	ldi	r22, 0x2B	; 43
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <dtoa_prf+0x6e>
    16e8:	60 e2       	ldi	r22, 0x20	; 32
    16ea:	ae 2d       	mov	r26, r14
    16ec:	a0 71       	andi	r26, 0x10	; 16
    16ee:	73 ff       	sbrs	r23, 3
    16f0:	36 c0       	rjmp	.+108    	; 0x175e <dtoa_prf+0xe2>
    16f2:	66 23       	and	r22, r22
    16f4:	11 f0       	breq	.+4      	; 0x16fa <dtoa_prf+0x7e>
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <dtoa_prf+0x80>
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	8b 15       	cp	r24, r11
    16fe:	10 f4       	brcc	.+4      	; 0x1704 <dtoa_prf+0x88>
    1700:	b8 1a       	sub	r11, r24
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <dtoa_prf+0x8a>
    1704:	b1 2c       	mov	r11, r1
    1706:	a1 11       	cpse	r26, r1
    1708:	0b c0       	rjmp	.+22     	; 0x1720 <dtoa_prf+0xa4>
    170a:	f6 01       	movw	r30, r12
    170c:	8b 2d       	mov	r24, r11
    170e:	90 e2       	ldi	r25, 0x20	; 32
    1710:	88 23       	and	r24, r24
    1712:	19 f0       	breq	.+6      	; 0x171a <dtoa_prf+0x9e>
    1714:	91 93       	st	Z+, r25
    1716:	81 50       	subi	r24, 0x01	; 1
    1718:	fb cf       	rjmp	.-10     	; 0x1710 <dtoa_prf+0x94>
    171a:	cb 0c       	add	r12, r11
    171c:	d1 1c       	adc	r13, r1
    171e:	b1 2c       	mov	r11, r1
    1720:	66 23       	and	r22, r22
    1722:	31 f0       	breq	.+12     	; 0x1730 <dtoa_prf+0xb4>
    1724:	f6 01       	movw	r30, r12
    1726:	60 83       	st	Z, r22
    1728:	96 01       	movw	r18, r12
    172a:	2f 5f       	subi	r18, 0xFF	; 255
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	69 01       	movw	r12, r18
    1730:	c6 01       	movw	r24, r12
    1732:	03 96       	adiw	r24, 0x03	; 3
    1734:	e2 fe       	sbrs	r14, 2
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <dtoa_prf+0xc6>
    1738:	2e e4       	ldi	r18, 0x4E	; 78
    173a:	f6 01       	movw	r30, r12
    173c:	20 83       	st	Z, r18
    173e:	31 e4       	ldi	r19, 0x41	; 65
    1740:	04 c0       	rjmp	.+8      	; 0x174a <dtoa_prf+0xce>
    1742:	2e e6       	ldi	r18, 0x6E	; 110
    1744:	f6 01       	movw	r30, r12
    1746:	20 83       	st	Z, r18
    1748:	31 e6       	ldi	r19, 0x61	; 97
    174a:	31 83       	std	Z+1, r19	; 0x01
    174c:	22 83       	std	Z+2, r18	; 0x02
    174e:	fc 01       	movw	r30, r24
    1750:	2b 2d       	mov	r18, r11
    1752:	30 e2       	ldi	r19, 0x20	; 32
    1754:	22 23       	and	r18, r18
    1756:	f1 f1       	breq	.+124    	; 0x17d4 <dtoa_prf+0x158>
    1758:	31 93       	st	Z+, r19
    175a:	21 50       	subi	r18, 0x01	; 1
    175c:	fb cf       	rjmp	.-10     	; 0x1754 <dtoa_prf+0xd8>
    175e:	72 ff       	sbrs	r23, 2
    1760:	40 c0       	rjmp	.+128    	; 0x17e2 <dtoa_prf+0x166>
    1762:	66 23       	and	r22, r22
    1764:	11 f0       	breq	.+4      	; 0x176a <dtoa_prf+0xee>
    1766:	84 e0       	ldi	r24, 0x04	; 4
    1768:	01 c0       	rjmp	.+2      	; 0x176c <dtoa_prf+0xf0>
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	8b 15       	cp	r24, r11
    176e:	10 f4       	brcc	.+4      	; 0x1774 <dtoa_prf+0xf8>
    1770:	b8 1a       	sub	r11, r24
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <dtoa_prf+0xfa>
    1774:	b1 2c       	mov	r11, r1
    1776:	a1 11       	cpse	r26, r1
    1778:	0b c0       	rjmp	.+22     	; 0x1790 <dtoa_prf+0x114>
    177a:	f6 01       	movw	r30, r12
    177c:	8b 2d       	mov	r24, r11
    177e:	90 e2       	ldi	r25, 0x20	; 32
    1780:	88 23       	and	r24, r24
    1782:	19 f0       	breq	.+6      	; 0x178a <dtoa_prf+0x10e>
    1784:	91 93       	st	Z+, r25
    1786:	81 50       	subi	r24, 0x01	; 1
    1788:	fb cf       	rjmp	.-10     	; 0x1780 <dtoa_prf+0x104>
    178a:	cb 0c       	add	r12, r11
    178c:	d1 1c       	adc	r13, r1
    178e:	b1 2c       	mov	r11, r1
    1790:	66 23       	and	r22, r22
    1792:	31 f0       	breq	.+12     	; 0x17a0 <dtoa_prf+0x124>
    1794:	f6 01       	movw	r30, r12
    1796:	60 83       	st	Z, r22
    1798:	96 01       	movw	r18, r12
    179a:	2f 5f       	subi	r18, 0xFF	; 255
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	69 01       	movw	r12, r18
    17a0:	c6 01       	movw	r24, r12
    17a2:	03 96       	adiw	r24, 0x03	; 3
    17a4:	e2 fe       	sbrs	r14, 2
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <dtoa_prf+0x13a>
    17a8:	29 e4       	ldi	r18, 0x49	; 73
    17aa:	f6 01       	movw	r30, r12
    17ac:	20 83       	st	Z, r18
    17ae:	2e e4       	ldi	r18, 0x4E	; 78
    17b0:	21 83       	std	Z+1, r18	; 0x01
    17b2:	26 e4       	ldi	r18, 0x46	; 70
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <dtoa_prf+0x146>
    17b6:	29 e6       	ldi	r18, 0x69	; 105
    17b8:	f6 01       	movw	r30, r12
    17ba:	20 83       	st	Z, r18
    17bc:	2e e6       	ldi	r18, 0x6E	; 110
    17be:	21 83       	std	Z+1, r18	; 0x01
    17c0:	26 e6       	ldi	r18, 0x66	; 102
    17c2:	22 83       	std	Z+2, r18	; 0x02
    17c4:	fc 01       	movw	r30, r24
    17c6:	2b 2d       	mov	r18, r11
    17c8:	30 e2       	ldi	r19, 0x20	; 32
    17ca:	22 23       	and	r18, r18
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <dtoa_prf+0x158>
    17ce:	31 93       	st	Z+, r19
    17d0:	21 50       	subi	r18, 0x01	; 1
    17d2:	fb cf       	rjmp	.-10     	; 0x17ca <dtoa_prf+0x14e>
    17d4:	fc 01       	movw	r30, r24
    17d6:	eb 0d       	add	r30, r11
    17d8:	f1 1d       	adc	r31, r1
    17da:	10 82       	st	Z, r1
    17dc:	8e ef       	ldi	r24, 0xFE	; 254
    17de:	9f ef       	ldi	r25, 0xFF	; 255
    17e0:	b7 c0       	rjmp	.+366    	; 0x1950 <dtoa_prf+0x2d4>
    17e2:	b1 e0       	ldi	r27, 0x01	; 1
    17e4:	61 11       	cpse	r22, r1
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <dtoa_prf+0x16e>
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	4b 2f       	mov	r20, r27
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	18 16       	cp	r1, r24
    17f0:	19 06       	cpc	r1, r25
    17f2:	24 f4       	brge	.+8      	; 0x17fc <dtoa_prf+0x180>
    17f4:	9c 01       	movw	r18, r24
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <dtoa_prf+0x184>
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	24 0f       	add	r18, r20
    1802:	35 1f       	adc	r19, r21
    1804:	11 23       	and	r17, r17
    1806:	29 f0       	breq	.+10     	; 0x1812 <dtoa_prf+0x196>
    1808:	41 2f       	mov	r20, r17
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	4f 5f       	subi	r20, 0xFF	; 255
    180e:	5f 4f       	sbci	r21, 0xFF	; 255
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <dtoa_prf+0x19a>
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	42 0f       	add	r20, r18
    1818:	53 1f       	adc	r21, r19
    181a:	2b 2d       	mov	r18, r11
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	42 17       	cp	r20, r18
    1820:	53 07       	cpc	r21, r19
    1822:	14 f4       	brge	.+4      	; 0x1828 <dtoa_prf+0x1ac>
    1824:	b4 1a       	sub	r11, r20
    1826:	01 c0       	rjmp	.+2      	; 0x182a <dtoa_prf+0x1ae>
    1828:	b1 2c       	mov	r11, r1
    182a:	2e 2d       	mov	r18, r14
    182c:	28 71       	andi	r18, 0x18	; 24
    182e:	59 f4       	brne	.+22     	; 0x1846 <dtoa_prf+0x1ca>
    1830:	f6 01       	movw	r30, r12
    1832:	2b 2d       	mov	r18, r11
    1834:	30 e2       	ldi	r19, 0x20	; 32
    1836:	22 23       	and	r18, r18
    1838:	19 f0       	breq	.+6      	; 0x1840 <dtoa_prf+0x1c4>
    183a:	31 93       	st	Z+, r19
    183c:	21 50       	subi	r18, 0x01	; 1
    183e:	fb cf       	rjmp	.-10     	; 0x1836 <dtoa_prf+0x1ba>
    1840:	cb 0c       	add	r12, r11
    1842:	d1 1c       	adc	r13, r1
    1844:	b1 2c       	mov	r11, r1
    1846:	bb 23       	and	r27, r27
    1848:	31 f0       	breq	.+12     	; 0x1856 <dtoa_prf+0x1da>
    184a:	f6 01       	movw	r30, r12
    184c:	60 83       	st	Z, r22
    184e:	96 01       	movw	r18, r12
    1850:	2f 5f       	subi	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	69 01       	movw	r12, r18
    1856:	a1 11       	cpse	r26, r1
    1858:	0b c0       	rjmp	.+22     	; 0x1870 <dtoa_prf+0x1f4>
    185a:	f6 01       	movw	r30, r12
    185c:	2b 2d       	mov	r18, r11
    185e:	30 e3       	ldi	r19, 0x30	; 48
    1860:	22 23       	and	r18, r18
    1862:	19 f0       	breq	.+6      	; 0x186a <dtoa_prf+0x1ee>
    1864:	31 93       	st	Z+, r19
    1866:	21 50       	subi	r18, 0x01	; 1
    1868:	fb cf       	rjmp	.-10     	; 0x1860 <dtoa_prf+0x1e4>
    186a:	cb 0c       	add	r12, r11
    186c:	d1 1c       	adc	r13, r1
    186e:	b1 2c       	mov	r11, r1
    1870:	f8 0e       	add	r15, r24
    1872:	0a 81       	ldd	r16, Y+2	; 0x02
    1874:	37 2f       	mov	r19, r23
    1876:	30 71       	andi	r19, 0x10	; 16
    1878:	a3 2e       	mov	r10, r19
    187a:	74 ff       	sbrs	r23, 4
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <dtoa_prf+0x208>
    187e:	01 33       	cpi	r16, 0x31	; 49
    1880:	09 f4       	brne	.+2      	; 0x1884 <dtoa_prf+0x208>
    1882:	fa 94       	dec	r15
    1884:	1f 14       	cp	r1, r15
    1886:	2c f4       	brge	.+10     	; 0x1892 <dtoa_prf+0x216>
    1888:	2f 2d       	mov	r18, r15
    188a:	29 30       	cpi	r18, 0x09	; 9
    188c:	18 f0       	brcs	.+6      	; 0x1894 <dtoa_prf+0x218>
    188e:	28 e0       	ldi	r18, 0x08	; 8
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <dtoa_prf+0x218>
    1892:	21 e0       	ldi	r18, 0x01	; 1
    1894:	68 2f       	mov	r22, r24
    1896:	39 2f       	mov	r19, r25
    1898:	97 ff       	sbrs	r25, 7
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <dtoa_prf+0x224>
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	46 2f       	mov	r20, r22
    18a2:	53 2f       	mov	r21, r19
    18a4:	61 2c       	mov	r6, r1
    18a6:	71 2c       	mov	r7, r1
    18a8:	3e e2       	ldi	r19, 0x2E	; 46
    18aa:	93 2e       	mov	r9, r19
    18ac:	bc 01       	movw	r22, r24
    18ae:	62 1b       	sub	r22, r18
    18b0:	71 09       	sbc	r23, r1
    18b2:	9b 01       	movw	r18, r22
    18b4:	dc 01       	movw	r26, r24
    18b6:	a4 1b       	sub	r26, r20
    18b8:	b5 0b       	sbc	r27, r21
    18ba:	e1 e0       	ldi	r30, 0x01	; 1
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	ec 0f       	add	r30, r28
    18c0:	fd 1f       	adc	r31, r29
    18c2:	ae 0f       	add	r26, r30
    18c4:	bf 1f       	adc	r27, r31
    18c6:	e1 2e       	mov	r14, r17
    18c8:	f1 2c       	mov	r15, r1
    18ca:	f1 94       	neg	r15
    18cc:	e1 94       	neg	r14
    18ce:	f1 08       	sbc	r15, r1
    18d0:	4f 3f       	cpi	r20, 0xFF	; 255
    18d2:	ff ef       	ldi	r31, 0xFF	; 255
    18d4:	5f 07       	cpc	r21, r31
    18d6:	31 f4       	brne	.+12     	; 0x18e4 <dtoa_prf+0x268>
    18d8:	f6 01       	movw	r30, r12
    18da:	90 82       	st	Z, r9
    18dc:	b6 01       	movw	r22, r12
    18de:	6f 5f       	subi	r22, 0xFF	; 255
    18e0:	7f 4f       	sbci	r23, 0xFF	; 255
    18e2:	6b 01       	movw	r12, r22
    18e4:	84 17       	cp	r24, r20
    18e6:	95 07       	cpc	r25, r21
    18e8:	4c f0       	brlt	.+18     	; 0x18fc <dtoa_prf+0x280>
    18ea:	24 17       	cp	r18, r20
    18ec:	35 07       	cpc	r19, r21
    18ee:	34 f4       	brge	.+12     	; 0x18fc <dtoa_prf+0x280>
    18f0:	bd 01       	movw	r22, r26
    18f2:	66 0d       	add	r22, r6
    18f4:	77 1d       	adc	r23, r7
    18f6:	fb 01       	movw	r30, r22
    18f8:	11 81       	ldd	r17, Z+1	; 0x01
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <dtoa_prf+0x282>
    18fc:	10 e3       	ldi	r17, 0x30	; 48
    18fe:	41 50       	subi	r20, 0x01	; 1
    1900:	51 09       	sbc	r21, r1
    1902:	ff ef       	ldi	r31, 0xFF	; 255
    1904:	6f 1a       	sub	r6, r31
    1906:	7f 0a       	sbc	r7, r31
    1908:	b6 01       	movw	r22, r12
    190a:	6f 5f       	subi	r22, 0xFF	; 255
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	4e 15       	cp	r20, r14
    1910:	5f 05       	cpc	r21, r15
    1912:	24 f0       	brlt	.+8      	; 0x191c <dtoa_prf+0x2a0>
    1914:	f6 01       	movw	r30, r12
    1916:	10 83       	st	Z, r17
    1918:	6b 01       	movw	r12, r22
    191a:	da cf       	rjmp	.-76     	; 0x18d0 <dtoa_prf+0x254>
    191c:	48 17       	cp	r20, r24
    191e:	59 07       	cpc	r21, r25
    1920:	39 f4       	brne	.+14     	; 0x1930 <dtoa_prf+0x2b4>
    1922:	06 33       	cpi	r16, 0x36	; 54
    1924:	20 f4       	brcc	.+8      	; 0x192e <dtoa_prf+0x2b2>
    1926:	05 33       	cpi	r16, 0x35	; 53
    1928:	19 f4       	brne	.+6      	; 0x1930 <dtoa_prf+0x2b4>
    192a:	a1 10       	cpse	r10, r1
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <dtoa_prf+0x2b4>
    192e:	11 e3       	ldi	r17, 0x31	; 49
    1930:	f6 01       	movw	r30, r12
    1932:	10 83       	st	Z, r17
    1934:	fb 01       	movw	r30, r22
    1936:	8b 2d       	mov	r24, r11
    1938:	90 e2       	ldi	r25, 0x20	; 32
    193a:	88 23       	and	r24, r24
    193c:	19 f0       	breq	.+6      	; 0x1944 <dtoa_prf+0x2c8>
    193e:	91 93       	st	Z+, r25
    1940:	81 50       	subi	r24, 0x01	; 1
    1942:	fb cf       	rjmp	.-10     	; 0x193a <dtoa_prf+0x2be>
    1944:	fb 01       	movw	r30, r22
    1946:	eb 0d       	add	r30, r11
    1948:	f1 1d       	adc	r31, r1
    194a:	10 82       	st	Z, r1
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	29 96       	adiw	r28, 0x09	; 9
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	bf 90       	pop	r11
    196e:	af 90       	pop	r10
    1970:	9f 90       	pop	r9
    1972:	7f 90       	pop	r7
    1974:	6f 90       	pop	r6
    1976:	08 95       	ret

00001978 <strtod>:
    1978:	a0 e0       	ldi	r26, 0x00	; 0
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e2 ec       	ldi	r30, 0xC2	; 194
    197e:	fc e0       	ldi	r31, 0x0C	; 12
    1980:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__prologue_saves__+0xc>
    1984:	8b 01       	movw	r16, r22
    1986:	61 15       	cp	r22, r1
    1988:	71 05       	cpc	r23, r1
    198a:	21 f0       	breq	.+8      	; 0x1994 <strtod+0x1c>
    198c:	db 01       	movw	r26, r22
    198e:	8c 93       	st	X, r24
    1990:	11 96       	adiw	r26, 0x01	; 1
    1992:	9c 93       	st	X, r25
    1994:	ec 01       	movw	r28, r24
    1996:	5e 01       	movw	r10, r28
    1998:	bf ef       	ldi	r27, 0xFF	; 255
    199a:	ab 1a       	sub	r10, r27
    199c:	bb 0a       	sbc	r11, r27
    199e:	75 01       	movw	r14, r10
    19a0:	c8 80       	ld	r12, Y
    19a2:	8c 2d       	mov	r24, r12
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <isspace>
    19aa:	89 2b       	or	r24, r25
    19ac:	11 f0       	breq	.+4      	; 0x19b2 <strtod+0x3a>
    19ae:	e5 01       	movw	r28, r10
    19b0:	f2 cf       	rjmp	.-28     	; 0x1996 <strtod+0x1e>
    19b2:	ed e2       	ldi	r30, 0x2D	; 45
    19b4:	ce 12       	cpse	r12, r30
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <strtod+0x50>
    19b8:	7e 01       	movw	r14, r28
    19ba:	f2 e0       	ldi	r31, 0x02	; 2
    19bc:	ef 0e       	add	r14, r31
    19be:	f1 1c       	adc	r15, r1
    19c0:	c9 80       	ldd	r12, Y+1	; 0x01
    19c2:	dd 24       	eor	r13, r13
    19c4:	d3 94       	inc	r13
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <strtod+0x62>
    19c8:	2b e2       	ldi	r18, 0x2B	; 43
    19ca:	c2 12       	cpse	r12, r18
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <strtod+0x60>
    19ce:	7e 01       	movw	r14, r28
    19d0:	42 e0       	ldi	r20, 0x02	; 2
    19d2:	e4 0e       	add	r14, r20
    19d4:	f1 1c       	adc	r15, r1
    19d6:	c9 80       	ldd	r12, Y+1	; 0x01
    19d8:	d1 2c       	mov	r13, r1
    19da:	e7 01       	movw	r28, r14
    19dc:	21 97       	sbiw	r28, 0x01	; 1
    19de:	43 e0       	ldi	r20, 0x03	; 3
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	60 e8       	ldi	r22, 0x80	; 128
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	ce 01       	movw	r24, r28
    19e8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <strncasecmp_P>
    19ec:	89 2b       	or	r24, r25
    19ee:	c1 f4       	brne	.+48     	; 0x1a20 <strtod+0xa8>
    19f0:	23 96       	adiw	r28, 0x03	; 3
    19f2:	45 e0       	ldi	r20, 0x05	; 5
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	6b e7       	ldi	r22, 0x7B	; 123
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	ce 01       	movw	r24, r28
    19fc:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <strncasecmp_P>
    1a00:	89 2b       	or	r24, r25
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <strtod+0x8e>
    1a04:	25 96       	adiw	r28, 0x05	; 5
    1a06:	01 15       	cp	r16, r1
    1a08:	11 05       	cpc	r17, r1
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <strtod+0x9a>
    1a0c:	d8 01       	movw	r26, r16
    1a0e:	cd 93       	st	X+, r28
    1a10:	dc 93       	st	X, r29
    1a12:	d1 10       	cpse	r13, r1
    1a14:	06 c1       	rjmp	.+524    	; 0x1c22 <strtod+0x2aa>
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	80 e8       	ldi	r24, 0x80	; 128
    1a1c:	9f e7       	ldi	r25, 0x7F	; 127
    1a1e:	0a c1       	rjmp	.+532    	; 0x1c34 <strtod+0x2bc>
    1a20:	43 e0       	ldi	r20, 0x03	; 3
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	68 e7       	ldi	r22, 0x78	; 120
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	ce 01       	movw	r24, r28
    1a2a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <strncasecmp_P>
    1a2e:	89 2b       	or	r24, r25
    1a30:	59 f4       	brne	.+22     	; 0x1a48 <strtod+0xd0>
    1a32:	01 15       	cp	r16, r1
    1a34:	11 05       	cpc	r17, r1
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <strtod+0xc2>
    1a38:	f9 c0       	rjmp	.+498    	; 0x1c2c <strtod+0x2b4>
    1a3a:	b2 e0       	ldi	r27, 0x02	; 2
    1a3c:	eb 0e       	add	r14, r27
    1a3e:	f1 1c       	adc	r15, r1
    1a40:	f8 01       	movw	r30, r16
    1a42:	f1 82       	std	Z+1, r15	; 0x01
    1a44:	e0 82       	st	Z, r14
    1a46:	f2 c0       	rjmp	.+484    	; 0x1c2c <strtod+0x2b4>
    1a48:	f7 01       	movw	r30, r14
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	cb 01       	movw	r24, r22
    1a50:	c0 e0       	ldi	r28, 0x00	; 0
    1a52:	d0 e0       	ldi	r29, 0x00	; 0
    1a54:	7f 01       	movw	r14, r30
    1a56:	a0 ed       	ldi	r26, 0xD0	; 208
    1a58:	aa 2e       	mov	r10, r26
    1a5a:	ac 0c       	add	r10, r12
    1a5c:	29 e0       	ldi	r18, 0x09	; 9
    1a5e:	2a 15       	cp	r18, r10
    1a60:	30 f1       	brcs	.+76     	; 0x1aae <strtod+0x136>
    1a62:	4d 2d       	mov	r20, r13
    1a64:	42 60       	ori	r20, 0x02	; 2
    1a66:	b4 2e       	mov	r11, r20
    1a68:	2d 2d       	mov	r18, r13
    1a6a:	28 70       	andi	r18, 0x08	; 8
    1a6c:	d2 fe       	sbrs	r13, 2
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <strtod+0x100>
    1a70:	21 11       	cpse	r18, r1
    1a72:	25 c0       	rjmp	.+74     	; 0x1abe <strtod+0x146>
    1a74:	21 96       	adiw	r28, 0x01	; 1
    1a76:	23 c0       	rjmp	.+70     	; 0x1abe <strtod+0x146>
    1a78:	21 11       	cpse	r18, r1
    1a7a:	21 97       	sbiw	r28, 0x01	; 1
    1a7c:	a5 e0       	ldi	r26, 0x05	; 5
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	9b 01       	movw	r18, r22
    1a82:	ac 01       	movw	r20, r24
    1a84:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__muluhisi3>
    1a88:	66 0f       	add	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	6a 0d       	add	r22, r10
    1a92:	71 1d       	adc	r23, r1
    1a94:	81 1d       	adc	r24, r1
    1a96:	91 1d       	adc	r25, r1
    1a98:	68 39       	cpi	r22, 0x98	; 152
    1a9a:	a9 e9       	ldi	r26, 0x99	; 153
    1a9c:	7a 07       	cpc	r23, r26
    1a9e:	8a 07       	cpc	r24, r26
    1aa0:	a9 e1       	ldi	r26, 0x19	; 25
    1aa2:	9a 07       	cpc	r25, r26
    1aa4:	60 f0       	brcs	.+24     	; 0x1abe <strtod+0x146>
    1aa6:	bd 2d       	mov	r27, r13
    1aa8:	b6 60       	ori	r27, 0x06	; 6
    1aaa:	bb 2e       	mov	r11, r27
    1aac:	08 c0       	rjmp	.+16     	; 0x1abe <strtod+0x146>
    1aae:	2e ef       	ldi	r18, 0xFE	; 254
    1ab0:	a2 12       	cpse	r10, r18
    1ab2:	0a c0       	rjmp	.+20     	; 0x1ac8 <strtod+0x150>
    1ab4:	d3 fc       	sbrc	r13, 3
    1ab6:	50 c0       	rjmp	.+160    	; 0x1b58 <strtod+0x1e0>
    1ab8:	4d 2d       	mov	r20, r13
    1aba:	48 60       	ori	r20, 0x08	; 8
    1abc:	b4 2e       	mov	r11, r20
    1abe:	31 96       	adiw	r30, 0x01	; 1
    1ac0:	d7 01       	movw	r26, r14
    1ac2:	cc 90       	ld	r12, X
    1ac4:	db 2c       	mov	r13, r11
    1ac6:	c6 cf       	rjmp	.-116    	; 0x1a54 <strtod+0xdc>
    1ac8:	2c 2d       	mov	r18, r12
    1aca:	2f 7d       	andi	r18, 0xDF	; 223
    1acc:	25 34       	cpi	r18, 0x45	; 69
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <strtod+0x15a>
    1ad0:	43 c0       	rjmp	.+134    	; 0x1b58 <strtod+0x1e0>
    1ad2:	a0 81       	ld	r26, Z
    1ad4:	ad 32       	cpi	r26, 0x2D	; 45
    1ad6:	41 f4       	brne	.+16     	; 0x1ae8 <strtod+0x170>
    1ad8:	bd 2d       	mov	r27, r13
    1ada:	b0 61       	ori	r27, 0x10	; 16
    1adc:	db 2e       	mov	r13, r27
    1ade:	7f 01       	movw	r14, r30
    1ae0:	22 e0       	ldi	r18, 0x02	; 2
    1ae2:	e2 0e       	add	r14, r18
    1ae4:	f1 1c       	adc	r15, r1
    1ae6:	0c c0       	rjmp	.+24     	; 0x1b00 <strtod+0x188>
    1ae8:	7f 01       	movw	r14, r30
    1aea:	ab 32       	cpi	r26, 0x2B	; 43
    1aec:	31 f0       	breq	.+12     	; 0x1afa <strtod+0x182>
    1aee:	4f ef       	ldi	r20, 0xFF	; 255
    1af0:	e4 1a       	sub	r14, r20
    1af2:	f4 0a       	sbc	r15, r20
    1af4:	21 e0       	ldi	r18, 0x01	; 1
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	06 c0       	rjmp	.+12     	; 0x1b06 <strtod+0x18e>
    1afa:	a2 e0       	ldi	r26, 0x02	; 2
    1afc:	ea 0e       	add	r14, r26
    1afe:	f1 1c       	adc	r15, r1
    1b00:	a1 81       	ldd	r26, Z+1	; 0x01
    1b02:	22 e0       	ldi	r18, 0x02	; 2
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	a0 53       	subi	r26, 0x30	; 48
    1b08:	aa 30       	cpi	r26, 0x0A	; 10
    1b0a:	18 f0       	brcs	.+6      	; 0x1b12 <strtod+0x19a>
    1b0c:	e2 1a       	sub	r14, r18
    1b0e:	f3 0a       	sbc	r15, r19
    1b10:	23 c0       	rjmp	.+70     	; 0x1b58 <strtod+0x1e0>
    1b12:	f7 01       	movw	r30, r14
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	20 38       	cpi	r18, 0x80	; 128
    1b1a:	bc e0       	ldi	r27, 0x0C	; 12
    1b1c:	3b 07       	cpc	r19, r27
    1b1e:	5c f4       	brge	.+22     	; 0x1b36 <strtod+0x1be>
    1b20:	a9 01       	movw	r20, r18
    1b22:	44 0f       	add	r20, r20
    1b24:	55 1f       	adc	r21, r21
    1b26:	44 0f       	add	r20, r20
    1b28:	55 1f       	adc	r21, r21
    1b2a:	24 0f       	add	r18, r20
    1b2c:	35 1f       	adc	r19, r21
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	2a 0f       	add	r18, r26
    1b34:	31 1d       	adc	r19, r1
    1b36:	af 01       	movw	r20, r30
    1b38:	4f 5f       	subi	r20, 0xFF	; 255
    1b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3c:	7a 01       	movw	r14, r20
    1b3e:	a0 81       	ld	r26, Z
    1b40:	a0 53       	subi	r26, 0x30	; 48
    1b42:	aa 30       	cpi	r26, 0x0A	; 10
    1b44:	10 f4       	brcc	.+4      	; 0x1b4a <strtod+0x1d2>
    1b46:	fa 01       	movw	r30, r20
    1b48:	e7 cf       	rjmp	.-50     	; 0x1b18 <strtod+0x1a0>
    1b4a:	d4 fe       	sbrs	r13, 4
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <strtod+0x1dc>
    1b4e:	31 95       	neg	r19
    1b50:	21 95       	neg	r18
    1b52:	31 09       	sbc	r19, r1
    1b54:	c2 0f       	add	r28, r18
    1b56:	d3 1f       	adc	r29, r19
    1b58:	d1 fe       	sbrs	r13, 1
    1b5a:	09 c0       	rjmp	.+18     	; 0x1b6e <strtod+0x1f6>
    1b5c:	01 15       	cp	r16, r1
    1b5e:	11 05       	cpc	r17, r1
    1b60:	31 f0       	breq	.+12     	; 0x1b6e <strtod+0x1f6>
    1b62:	e1 e0       	ldi	r30, 0x01	; 1
    1b64:	ee 1a       	sub	r14, r30
    1b66:	f1 08       	sbc	r15, r1
    1b68:	d8 01       	movw	r26, r16
    1b6a:	ed 92       	st	X+, r14
    1b6c:	fc 92       	st	X, r15
    1b6e:	0e 94 9b 09 	call	0x1336	; 0x1336 <__floatunsisf>
    1b72:	2d 2d       	mov	r18, r13
    1b74:	23 70       	andi	r18, 0x03	; 3
    1b76:	23 30       	cpi	r18, 0x03	; 3
    1b78:	19 f0       	breq	.+6      	; 0x1b80 <strtod+0x208>
    1b7a:	4b 01       	movw	r8, r22
    1b7c:	5c 01       	movw	r10, r24
    1b7e:	06 c0       	rjmp	.+12     	; 0x1b8c <strtod+0x214>
    1b80:	4b 01       	movw	r8, r22
    1b82:	5c 01       	movw	r10, r24
    1b84:	b7 fa       	bst	r11, 7
    1b86:	b0 94       	com	r11
    1b88:	b7 f8       	bld	r11, 7
    1b8a:	b0 94       	com	r11
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	a9 01       	movw	r20, r18
    1b92:	c5 01       	movw	r24, r10
    1b94:	b4 01       	movw	r22, r8
    1b96:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <strtod+0x228>
    1b9e:	3e c0       	rjmp	.+124    	; 0x1c1c <strtod+0x2a4>
    1ba0:	d7 ff       	sbrs	r29, 7
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <strtod+0x238>
    1ba4:	d1 95       	neg	r29
    1ba6:	c1 95       	neg	r28
    1ba8:	d1 09       	sbc	r29, r1
    1baa:	07 e9       	ldi	r16, 0x97	; 151
    1bac:	10 e0       	ldi	r17, 0x00	; 0
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <strtod+0x23c>
    1bb0:	0f ea       	ldi	r16, 0xAF	; 175
    1bb2:	10 e0       	ldi	r17, 0x00	; 0
    1bb4:	68 01       	movw	r12, r16
    1bb6:	b8 e1       	ldi	r27, 0x18	; 24
    1bb8:	cb 1a       	sub	r12, r27
    1bba:	d1 08       	sbc	r13, r1
    1bbc:	90 e2       	ldi	r25, 0x20	; 32
    1bbe:	e9 2e       	mov	r14, r25
    1bc0:	f1 2c       	mov	r15, r1
    1bc2:	ce 15       	cp	r28, r14
    1bc4:	df 05       	cpc	r29, r15
    1bc6:	74 f0       	brlt	.+28     	; 0x1be4 <strtod+0x26c>
    1bc8:	f8 01       	movw	r30, r16
    1bca:	25 91       	lpm	r18, Z+
    1bcc:	35 91       	lpm	r19, Z+
    1bce:	45 91       	lpm	r20, Z+
    1bd0:	54 91       	lpm	r21, Z
    1bd2:	c5 01       	movw	r24, r10
    1bd4:	b4 01       	movw	r22, r8
    1bd6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3>
    1bda:	4b 01       	movw	r8, r22
    1bdc:	5c 01       	movw	r10, r24
    1bde:	ce 19       	sub	r28, r14
    1be0:	df 09       	sbc	r29, r15
    1be2:	ef cf       	rjmp	.-34     	; 0x1bc2 <strtod+0x24a>
    1be4:	04 50       	subi	r16, 0x04	; 4
    1be6:	11 09       	sbc	r17, r1
    1be8:	f5 94       	asr	r15
    1bea:	e7 94       	ror	r14
    1bec:	0c 15       	cp	r16, r12
    1bee:	1d 05       	cpc	r17, r13
    1bf0:	41 f7       	brne	.-48     	; 0x1bc2 <strtod+0x24a>
    1bf2:	8a 2d       	mov	r24, r10
    1bf4:	88 0f       	add	r24, r24
    1bf6:	8b 2d       	mov	r24, r11
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfc:	49 f0       	breq	.+18     	; 0x1c10 <strtod+0x298>
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	a9 01       	movw	r20, r18
    1c04:	c5 01       	movw	r24, r10
    1c06:	b4 01       	movw	r22, r8
    1c08:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__cmpsf2>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	06 c0       	rjmp	.+12     	; 0x1c1c <strtod+0x2a4>
    1c10:	82 e2       	ldi	r24, 0x22	; 34
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	90 93 d0 03 	sts	0x03D0, r25
    1c18:	80 93 cf 03 	sts	0x03CF, r24
    1c1c:	c5 01       	movw	r24, r10
    1c1e:	b4 01       	movw	r22, r8
    1c20:	09 c0       	rjmp	.+18     	; 0x1c34 <strtod+0x2bc>
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	80 e8       	ldi	r24, 0x80	; 128
    1c28:	9f ef       	ldi	r25, 0xFF	; 255
    1c2a:	04 c0       	rjmp	.+8      	; 0x1c34 <strtod+0x2bc>
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	80 ec       	ldi	r24, 0xC0	; 192
    1c32:	9f e7       	ldi	r25, 0x7F	; 127
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	ec e0       	ldi	r30, 0x0C	; 12
    1c3a:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__epilogue_restores__+0xc>

00001c3e <__ftoa_engine>:
    1c3e:	28 30       	cpi	r18, 0x08	; 8
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <__ftoa_engine+0x6>
    1c42:	27 e0       	ldi	r18, 0x07	; 7
    1c44:	33 27       	eor	r19, r19
    1c46:	da 01       	movw	r26, r20
    1c48:	99 0f       	add	r25, r25
    1c4a:	31 1d       	adc	r19, r1
    1c4c:	87 fd       	sbrc	r24, 7
    1c4e:	91 60       	ori	r25, 0x01	; 1
    1c50:	00 96       	adiw	r24, 0x00	; 0
    1c52:	61 05       	cpc	r22, r1
    1c54:	71 05       	cpc	r23, r1
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <__ftoa_engine+0x28>
    1c58:	32 60       	ori	r19, 0x02	; 2
    1c5a:	2e 5f       	subi	r18, 0xFE	; 254
    1c5c:	3d 93       	st	X+, r19
    1c5e:	30 e3       	ldi	r19, 0x30	; 48
    1c60:	2a 95       	dec	r18
    1c62:	e1 f7       	brne	.-8      	; 0x1c5c <__ftoa_engine+0x1e>
    1c64:	08 95       	ret
    1c66:	9f 3f       	cpi	r25, 0xFF	; 255
    1c68:	30 f0       	brcs	.+12     	; 0x1c76 <__ftoa_engine+0x38>
    1c6a:	80 38       	cpi	r24, 0x80	; 128
    1c6c:	71 05       	cpc	r23, r1
    1c6e:	61 05       	cpc	r22, r1
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <__ftoa_engine+0x36>
    1c72:	3c 5f       	subi	r19, 0xFC	; 252
    1c74:	3c 5f       	subi	r19, 0xFC	; 252
    1c76:	3d 93       	st	X+, r19
    1c78:	91 30       	cpi	r25, 0x01	; 1
    1c7a:	08 f0       	brcs	.+2      	; 0x1c7e <__ftoa_engine+0x40>
    1c7c:	80 68       	ori	r24, 0x80	; 128
    1c7e:	91 1d       	adc	r25, r1
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	1f 93       	push	r17
    1c86:	0f 93       	push	r16
    1c88:	ff 92       	push	r15
    1c8a:	ef 92       	push	r14
    1c8c:	19 2f       	mov	r17, r25
    1c8e:	98 7f       	andi	r25, 0xF8	; 248
    1c90:	96 95       	lsr	r25
    1c92:	e9 2f       	mov	r30, r25
    1c94:	96 95       	lsr	r25
    1c96:	96 95       	lsr	r25
    1c98:	e9 0f       	add	r30, r25
    1c9a:	ff 27       	eor	r31, r31
    1c9c:	e3 5f       	subi	r30, 0xF3	; 243
    1c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca0:	99 27       	eor	r25, r25
    1ca2:	33 27       	eor	r19, r19
    1ca4:	ee 24       	eor	r14, r14
    1ca6:	ff 24       	eor	r15, r15
    1ca8:	a7 01       	movw	r20, r14
    1caa:	e7 01       	movw	r28, r14
    1cac:	05 90       	lpm	r0, Z+
    1cae:	08 94       	sec
    1cb0:	07 94       	ror	r0
    1cb2:	28 f4       	brcc	.+10     	; 0x1cbe <__ftoa_engine+0x80>
    1cb4:	36 0f       	add	r19, r22
    1cb6:	e7 1e       	adc	r14, r23
    1cb8:	f8 1e       	adc	r15, r24
    1cba:	49 1f       	adc	r20, r25
    1cbc:	51 1d       	adc	r21, r1
    1cbe:	66 0f       	add	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	06 94       	lsr	r0
    1cc8:	a1 f7       	brne	.-24     	; 0x1cb2 <__ftoa_engine+0x74>
    1cca:	05 90       	lpm	r0, Z+
    1ccc:	07 94       	ror	r0
    1cce:	28 f4       	brcc	.+10     	; 0x1cda <__ftoa_engine+0x9c>
    1cd0:	e7 0e       	add	r14, r23
    1cd2:	f8 1e       	adc	r15, r24
    1cd4:	49 1f       	adc	r20, r25
    1cd6:	56 1f       	adc	r21, r22
    1cd8:	c1 1d       	adc	r28, r1
    1cda:	77 0f       	add	r23, r23
    1cdc:	88 1f       	adc	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	66 1f       	adc	r22, r22
    1ce2:	06 94       	lsr	r0
    1ce4:	a1 f7       	brne	.-24     	; 0x1cce <__ftoa_engine+0x90>
    1ce6:	05 90       	lpm	r0, Z+
    1ce8:	07 94       	ror	r0
    1cea:	28 f4       	brcc	.+10     	; 0x1cf6 <__ftoa_engine+0xb8>
    1cec:	f8 0e       	add	r15, r24
    1cee:	49 1f       	adc	r20, r25
    1cf0:	56 1f       	adc	r21, r22
    1cf2:	c7 1f       	adc	r28, r23
    1cf4:	d1 1d       	adc	r29, r1
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	66 1f       	adc	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	06 94       	lsr	r0
    1d00:	a1 f7       	brne	.-24     	; 0x1cea <__ftoa_engine+0xac>
    1d02:	05 90       	lpm	r0, Z+
    1d04:	07 94       	ror	r0
    1d06:	20 f4       	brcc	.+8      	; 0x1d10 <__ftoa_engine+0xd2>
    1d08:	49 0f       	add	r20, r25
    1d0a:	56 1f       	adc	r21, r22
    1d0c:	c7 1f       	adc	r28, r23
    1d0e:	d8 1f       	adc	r29, r24
    1d10:	99 0f       	add	r25, r25
    1d12:	66 1f       	adc	r22, r22
    1d14:	77 1f       	adc	r23, r23
    1d16:	88 1f       	adc	r24, r24
    1d18:	06 94       	lsr	r0
    1d1a:	a9 f7       	brne	.-22     	; 0x1d06 <__ftoa_engine+0xc8>
    1d1c:	84 91       	lpm	r24, Z
    1d1e:	10 95       	com	r17
    1d20:	17 70       	andi	r17, 0x07	; 7
    1d22:	41 f0       	breq	.+16     	; 0x1d34 <__ftoa_engine+0xf6>
    1d24:	d6 95       	lsr	r29
    1d26:	c7 95       	ror	r28
    1d28:	57 95       	ror	r21
    1d2a:	47 95       	ror	r20
    1d2c:	f7 94       	ror	r15
    1d2e:	e7 94       	ror	r14
    1d30:	1a 95       	dec	r17
    1d32:	c1 f7       	brne	.-16     	; 0x1d24 <__ftoa_engine+0xe6>
    1d34:	e3 eb       	ldi	r30, 0xB3	; 179
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	68 94       	set
    1d3a:	15 90       	lpm	r1, Z+
    1d3c:	15 91       	lpm	r17, Z+
    1d3e:	35 91       	lpm	r19, Z+
    1d40:	65 91       	lpm	r22, Z+
    1d42:	95 91       	lpm	r25, Z+
    1d44:	05 90       	lpm	r0, Z+
    1d46:	7f e2       	ldi	r23, 0x2F	; 47
    1d48:	73 95       	inc	r23
    1d4a:	e1 18       	sub	r14, r1
    1d4c:	f1 0a       	sbc	r15, r17
    1d4e:	43 0b       	sbc	r20, r19
    1d50:	56 0b       	sbc	r21, r22
    1d52:	c9 0b       	sbc	r28, r25
    1d54:	d0 09       	sbc	r29, r0
    1d56:	c0 f7       	brcc	.-16     	; 0x1d48 <__ftoa_engine+0x10a>
    1d58:	e1 0c       	add	r14, r1
    1d5a:	f1 1e       	adc	r15, r17
    1d5c:	43 1f       	adc	r20, r19
    1d5e:	56 1f       	adc	r21, r22
    1d60:	c9 1f       	adc	r28, r25
    1d62:	d0 1d       	adc	r29, r0
    1d64:	7e f4       	brtc	.+30     	; 0x1d84 <__ftoa_engine+0x146>
    1d66:	70 33       	cpi	r23, 0x30	; 48
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <__ftoa_engine+0x130>
    1d6a:	8a 95       	dec	r24
    1d6c:	e6 cf       	rjmp	.-52     	; 0x1d3a <__ftoa_engine+0xfc>
    1d6e:	e8 94       	clt
    1d70:	01 50       	subi	r16, 0x01	; 1
    1d72:	30 f0       	brcs	.+12     	; 0x1d80 <__ftoa_engine+0x142>
    1d74:	08 0f       	add	r16, r24
    1d76:	0a f4       	brpl	.+2      	; 0x1d7a <__ftoa_engine+0x13c>
    1d78:	00 27       	eor	r16, r16
    1d7a:	02 17       	cp	r16, r18
    1d7c:	08 f4       	brcc	.+2      	; 0x1d80 <__ftoa_engine+0x142>
    1d7e:	20 2f       	mov	r18, r16
    1d80:	23 95       	inc	r18
    1d82:	02 2f       	mov	r16, r18
    1d84:	7a 33       	cpi	r23, 0x3A	; 58
    1d86:	28 f0       	brcs	.+10     	; 0x1d92 <__ftoa_engine+0x154>
    1d88:	79 e3       	ldi	r23, 0x39	; 57
    1d8a:	7d 93       	st	X+, r23
    1d8c:	2a 95       	dec	r18
    1d8e:	e9 f7       	brne	.-6      	; 0x1d8a <__ftoa_engine+0x14c>
    1d90:	10 c0       	rjmp	.+32     	; 0x1db2 <__ftoa_engine+0x174>
    1d92:	7d 93       	st	X+, r23
    1d94:	2a 95       	dec	r18
    1d96:	89 f6       	brne	.-94     	; 0x1d3a <__ftoa_engine+0xfc>
    1d98:	06 94       	lsr	r0
    1d9a:	97 95       	ror	r25
    1d9c:	67 95       	ror	r22
    1d9e:	37 95       	ror	r19
    1da0:	17 95       	ror	r17
    1da2:	17 94       	ror	r1
    1da4:	e1 18       	sub	r14, r1
    1da6:	f1 0a       	sbc	r15, r17
    1da8:	43 0b       	sbc	r20, r19
    1daa:	56 0b       	sbc	r21, r22
    1dac:	c9 0b       	sbc	r28, r25
    1dae:	d0 09       	sbc	r29, r0
    1db0:	98 f0       	brcs	.+38     	; 0x1dd8 <__ftoa_engine+0x19a>
    1db2:	23 95       	inc	r18
    1db4:	7e 91       	ld	r23, -X
    1db6:	73 95       	inc	r23
    1db8:	7a 33       	cpi	r23, 0x3A	; 58
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <__ftoa_engine+0x180>
    1dbc:	70 e3       	ldi	r23, 0x30	; 48
    1dbe:	7c 93       	st	X, r23
    1dc0:	20 13       	cpse	r18, r16
    1dc2:	b8 f7       	brcc	.-18     	; 0x1db2 <__ftoa_engine+0x174>
    1dc4:	7e 91       	ld	r23, -X
    1dc6:	70 61       	ori	r23, 0x10	; 16
    1dc8:	7d 93       	st	X+, r23
    1dca:	30 f0       	brcs	.+12     	; 0x1dd8 <__ftoa_engine+0x19a>
    1dcc:	83 95       	inc	r24
    1dce:	71 e3       	ldi	r23, 0x31	; 49
    1dd0:	7d 93       	st	X+, r23
    1dd2:	70 e3       	ldi	r23, 0x30	; 48
    1dd4:	2a 95       	dec	r18
    1dd6:	e1 f7       	brne	.-8      	; 0x1dd0 <__ftoa_engine+0x192>
    1dd8:	11 24       	eor	r1, r1
    1dda:	ef 90       	pop	r14
    1ddc:	ff 90       	pop	r15
    1dde:	0f 91       	pop	r16
    1de0:	1f 91       	pop	r17
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	99 27       	eor	r25, r25
    1de8:	87 fd       	sbrc	r24, 7
    1dea:	90 95       	com	r25
    1dec:	08 95       	ret

00001dee <isspace>:
    1dee:	91 11       	cpse	r25, r1
    1df0:	1e c0       	rjmp	.+60     	; 0x1e2e <__ctype_isfalse>
    1df2:	80 32       	cpi	r24, 0x20	; 32
    1df4:	19 f0       	breq	.+6      	; 0x1dfc <isspace+0xe>
    1df6:	89 50       	subi	r24, 0x09	; 9
    1df8:	85 50       	subi	r24, 0x05	; 5
    1dfa:	d0 f7       	brcc	.-12     	; 0x1df0 <isspace+0x2>
    1dfc:	08 95       	ret

00001dfe <strncasecmp_P>:
    1dfe:	fb 01       	movw	r30, r22
    1e00:	dc 01       	movw	r26, r24
    1e02:	41 50       	subi	r20, 0x01	; 1
    1e04:	50 40       	sbci	r21, 0x00	; 0
    1e06:	88 f0       	brcs	.+34     	; 0x1e2a <strncasecmp_P+0x2c>
    1e08:	8d 91       	ld	r24, X+
    1e0a:	81 34       	cpi	r24, 0x41	; 65
    1e0c:	1c f0       	brlt	.+6      	; 0x1e14 <strncasecmp_P+0x16>
    1e0e:	8b 35       	cpi	r24, 0x5B	; 91
    1e10:	0c f4       	brge	.+2      	; 0x1e14 <strncasecmp_P+0x16>
    1e12:	80 5e       	subi	r24, 0xE0	; 224
    1e14:	65 91       	lpm	r22, Z+
    1e16:	61 34       	cpi	r22, 0x41	; 65
    1e18:	1c f0       	brlt	.+6      	; 0x1e20 <strncasecmp_P+0x22>
    1e1a:	6b 35       	cpi	r22, 0x5B	; 91
    1e1c:	0c f4       	brge	.+2      	; 0x1e20 <strncasecmp_P+0x22>
    1e1e:	60 5e       	subi	r22, 0xE0	; 224
    1e20:	86 1b       	sub	r24, r22
    1e22:	61 11       	cpse	r22, r1
    1e24:	71 f3       	breq	.-36     	; 0x1e02 <strncasecmp_P+0x4>
    1e26:	99 0b       	sbc	r25, r25
    1e28:	08 95       	ret
    1e2a:	88 1b       	sub	r24, r24
    1e2c:	fc cf       	rjmp	.-8      	; 0x1e26 <strncasecmp_P+0x28>

00001e2e <__ctype_isfalse>:
    1e2e:	99 27       	eor	r25, r25
    1e30:	88 27       	eor	r24, r24

00001e32 <__ctype_istrue>:
    1e32:	08 95       	ret

00001e34 <__muluhisi3>:
    1e34:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__umulhisi3>
    1e38:	a5 9f       	mul	r26, r21
    1e3a:	90 0d       	add	r25, r0
    1e3c:	b4 9f       	mul	r27, r20
    1e3e:	90 0d       	add	r25, r0
    1e40:	a4 9f       	mul	r26, r20
    1e42:	80 0d       	add	r24, r0
    1e44:	91 1d       	adc	r25, r1
    1e46:	11 24       	eor	r1, r1
    1e48:	08 95       	ret

00001e4a <__prologue_saves__>:
    1e4a:	2f 92       	push	r2
    1e4c:	3f 92       	push	r3
    1e4e:	4f 92       	push	r4
    1e50:	5f 92       	push	r5
    1e52:	6f 92       	push	r6
    1e54:	7f 92       	push	r7
    1e56:	8f 92       	push	r8
    1e58:	9f 92       	push	r9
    1e5a:	af 92       	push	r10
    1e5c:	bf 92       	push	r11
    1e5e:	cf 92       	push	r12
    1e60:	df 92       	push	r13
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	ca 1b       	sub	r28, r26
    1e74:	db 0b       	sbc	r29, r27
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	09 94       	ijmp

00001e82 <__epilogue_restores__>:
    1e82:	2a 88       	ldd	r2, Y+18	; 0x12
    1e84:	39 88       	ldd	r3, Y+17	; 0x11
    1e86:	48 88       	ldd	r4, Y+16	; 0x10
    1e88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e94:	b9 84       	ldd	r11, Y+9	; 0x09
    1e96:	c8 84       	ldd	r12, Y+8	; 0x08
    1e98:	df 80       	ldd	r13, Y+7	; 0x07
    1e9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ea2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ea4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ea6:	ce 0f       	add	r28, r30
    1ea8:	d1 1d       	adc	r29, r1
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	ed 01       	movw	r28, r26
    1eb6:	08 95       	ret

00001eb8 <__umulhisi3>:
    1eb8:	a2 9f       	mul	r26, r18
    1eba:	b0 01       	movw	r22, r0
    1ebc:	b3 9f       	mul	r27, r19
    1ebe:	c0 01       	movw	r24, r0
    1ec0:	a3 9f       	mul	r26, r19
    1ec2:	70 0d       	add	r23, r0
    1ec4:	81 1d       	adc	r24, r1
    1ec6:	11 24       	eor	r1, r1
    1ec8:	91 1d       	adc	r25, r1
    1eca:	b2 9f       	mul	r27, r18
    1ecc:	70 0d       	add	r23, r0
    1ece:	81 1d       	adc	r24, r1
    1ed0:	11 24       	eor	r1, r1
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	08 95       	ret

00001ed6 <_exit>:
    1ed6:	f8 94       	cli

00001ed8 <__stop_program>:
    1ed8:	ff cf       	rjmp	.-2      	; 0x1ed8 <__stop_program>
